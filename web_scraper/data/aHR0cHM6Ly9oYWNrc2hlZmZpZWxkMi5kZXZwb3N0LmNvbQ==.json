[["Sentwee", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Sentwee \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/572/datas/gallery.jpg\"/>\n<p>\n<i>The graph, showing sentiment vs time</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Sentwee \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/573/datas/gallery.jpg\"/>\n<p>\n<i>On hovering on a point, the tweet message appears in the tooltip</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Sentwee \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/648/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Pretty graphs, social media</p>\n<h2>What it does</h2>\n<p>Takes a realtime feed of a certain searchterm from twitter, puts it through the google cloud api to find the sentiment (happiness) and then displays it in a web app</p>\n<h2>How we built it</h2>\n<p>In Python, Tweepy collects the tweets, which are passed to Google Cloud to find the sentiment. These are sent over a socket to the Flask webserver, which sends them over a continuous event stream to the front end, where CanvasJS plots them. As such, everything is entirely real time</p>\n<h2>Challenges we ran into</h2>\n<ul>\n<li>Forgetting/not knowing python</li>\n<li>Getting the twitter and server process to talk to each other - streams going all over the place</li>\n<li>API rate limits</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<ul>\n<li>IT WORKS</li>\n<li>Everything being in real time</li>\n</ul>\n<h2>What we learned</h2>\n<ul>\n<li>Python</li>\n<li>JSON</li>\n<li>Using APIs</li>\n<li>Realtime streams</li>\n<li>Who Panda is</li>\n</ul>\n<h2>What's next for Sentwee</h2>\n<ul>\n<li>Better UI</li>\n<li>Selectable search term on website</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">tweepy</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-cloud\">google-cloud</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag\">canvas-js</span></li></ul>\n</div>\n</div>", ["I interfaced with the google-cloud language API and brought the rest of the team up to speed on developing in python and flask\n", "", "", ""]], ["Docker Assistant", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/H8Ar8GkUt8w?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<p><img alt=\"Just Docker\" data-canonical-url=\"http://i.imgur.com/coLD9Dm.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--eIr4rUDe--/http://i.imgur.com/coLD9Dm.jpg\"/></p>\n<h2>Inspiration</h2>\n<p>Ever thought your laptop was too far away while you're sitting in bed while you're meant to be looking after your Docker containers? Fear no more! You can manage your containers from the safety of your bed.</p>\n<h2>What it does</h2>\n<p>This app allows you to create, start and stop containers while also allowing you to check the status of the containers, how many are running and if the Docker Hub is up.</p>\n<h2>How we built it</h2>\n<p>We used an AWS Lambda to facilitate the communication between the Alexa device and the Docker API that we developed. The Lambda converts the data received from the Docker API to nice messages to play back to the user. There is a conversational element of the app is accomplished by using the session variables in the Alexa Skills Kit.</p>\n<p>The Docker API was built upon the official Docker Remote API (and Node bindings) with some changes to combine some results and to reduce network overhead by removing unneeded variables. The API runs on a server and the communication was done over https (with a Let's Encrypt certificate). </p>\n<h2>Challenges we ran into</h2>\n<p>We attempted to create an infrastructure to allow you to log in to the Alexa Skills app to select the server you wanted to administrate. Due to the complexity and time restraints, we could not complete this. This means the server details have to be hardcoded in to the Lambda.</p>\n<p>We had issues when creating and starting the containers as Alexa would time out. We worked around this by splitting the creating and starting of the containers in to two steps that can be stringed together with a conversational like command. (\"create a ... container called ... \" then \"start it\")</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>The whole thing! It's three of the team members first Hackathon and the fourth's second, so it was a great learning experience to complete a working app. We're most proud of the contextual awareness when starting a container.</p>\n<h2>What we learned</h2>\n<p>Many of the tools/APIs we used were new to us. We used AWS Lambdas, Alexa Skills Kit and the Docker Remote API for the first time. The project provided a great refresher to JavaScript and Node JS which we only had limited experience with.</p>\n<h2>What's next for Docker Assistant</h2>\n<p>We hope to add the ability to log in to the app via the Alexa Skills app to select the server you will be administrating. A long term goal would be to add the ability to administrate swarms/clusters.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/alexa\">alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/docker\">docker</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twitter\">twitter</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/php\">php</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/hacksheff-docker-assistant/docker-assistant\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/hacksheff-docker-assistant/docker-assistant\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["Russian Roulette", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We all like party games, don't we? We took the famous game Russian Roulette and adapted it to the modern era, making it work on Amazon Alexa. Take risks, bet and win!</p>\n<h2>What it does</h2>\n<p>The application follows the rules of the famous Russian Roulette rules. Connecting every player to an Nessie account, we raised the bar with virtual betting, each player having an account which allows him to take risks and feel the excitement of the game.</p>\n<h2>How I built it</h2>\n<p>The application is built using JavaScript. We integrated the Nessie API within our app.</p>\n<h2>Challenges I ran into</h2>\n<p>Having no previous experience with some of the technologies and languages we used, we had trouble making them work together. (e.g. using JavaScript requests for the Nessie API)</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Learning from mistakes is always the biggest accomplishment at any Hackathon. We managed to correct the errors and fix the bugs. </p>\n<h2>What I learned</h2>\n<h2>What's next for Russian Roulette</h2>\n<p>We are willing to continue the development of the Amazon Alexa skill and make the game more complex and user friendly.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/capital-one\">capital-one</a></span></li><li><span class=\"cp-tag\">nessie</span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">echo</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li></ul>\n</div>\n</div>", ["Wrote AWS Lambda function to handle Alexa requests, used JavaScript", "", "", ""]], ["Lazy Web Dev", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/kAVEwwvAgGU?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We took inspiration from ourselves in the sense that we are very lazy.</p>\n<h2>What it does</h2>\n<p>Allows you to lazily create websites with your voice.</p>\n<h2>How we built it</h2>\n<p>Uses Amazon Alexa, Amazon Web Services, Lamda and nodeJS</p>\n<h2>Challenges we ran into</h2>\n<p>Getting used to how Alexa works as well as Amazon Web Services as these were technologies that were new to us.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Having an MVP by the finish time\nHaving extra time to add in advanced features such as Bootstrap snippets to add in Jumbotrons and Navbars</p>\n<h2>What's next for Lazy Web Dev</h2>\n<p>More lazy features\nMore intents allowing easier web development</p>\n<h2>Best Domain Name Challenge</h2>\n<p><a href=\"http://bananaeatingcyb.org/\" rel=\"nofollow\">http://bananaeatingcyb.org/</a> \n(Banana Eating Cyborg)</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://lazywebdev.herokuapp.com/\" rel=\"nofollow\" target=\"_blank\" title=\"https://lazywebdev.herokuapp.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>lazywebdev.herokuapp.com</span>\n</a></li>\n<li><a href=\"http://bananaeatingcyb.org/\" rel=\"nofollow\" target=\"_blank\" title=\"http://bananaeatingcyb.org/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>bananaeatingcyb.org</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Voice controlled dashboard", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Ability to use voice control in order to simplify tasks in business and life</p>\n<h2>What it does</h2>\n<p>Gets the data from Nessie API, processes it and display on the dashboard. Modifications to data are being applied based on voice commands, which are captured by Amazon Alexa.</p>\n<h2>How we built it</h2>\n<p>Divided project into 3 parts:\n1) Developed front-end which displays processed data using technologies like Js, AngularJs, d3,, html5, css3..\n2) Developed back-end which processes data and connects AWS lambda to front-end  using technologies like Spring, Java\n3) Developed AWS lambda code using Nodejs, which controls Amazon Alexa.</p>\n<h2>Challenges we ran into</h2>\n<p>Malformed data, voice recognition with flaws, connection issues to AWS</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Connects everything fine into 1 system and accepts simple data modification voice commands.</p>\n<h2>What we learned</h2>\n<p>Got more experience in toolsets we have used, got first experience in using voice control devie.</p>\n<h2>What's next for Voice controlled dashboard</h2>\n<p>TBD</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/angular-js\">angular.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/alexa\">alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/capital-one\">capital-one</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/d3-js\">d3.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/spring\">spring</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/crownz/HackSheffieldFront\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/crownz/HackSheffieldFront\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["TapOne", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"TapOne \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/590/datas/gallery.jpg\"/>\n<p>\n<i>The home screen that lists the accounts</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"TapOne \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/592/datas/gallery.jpg\"/>\n<p>\n<i>The transactions on a particular account</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"TapOne \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/593/datas/gallery.jpg\"/>\n<p>\n<i>Transferring money to another phone via NFC</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"TapOne \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/591/datas/gallery.jpg\"/>\n<p>\n<i>The transfer of money is complete, and the list under the popup has updated</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"TapOne \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/611/datas/gallery.jpg\"/>\n<p>\n<i>Windows Phone and Amazon Fire Phone running the app side by side</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We saw the capital one presentation before the start, and had an idea about what we could do that worked cross-platform, NFC.</p>\n<h2>What it does</h2>\n<p>The app retrieves data from the Nessie API, made by CapitalOne. It allows users to view their accounts, and send and receive money by tapping their phones together.</p>\n<h2>How we built it</h2>\n<p>Anthony built a Universal Windows application using Visual Studio, and Tanin used Android Studio to develop an Android/Amazon Fire Phone app on a Mac.</p>\n<h2>Challenges we ran into</h2>\n<p>The NFC implementations were ever so slightly different across the two platforms, so the most of our time was spent getting the two platforms to interact in a meaningful way.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>A cross-platform payment app that works on both Android and Windows Phone, making sure even the users on the small platforms are included.</p>\n<h2>What we learned</h2>\n<p>While NFC is a standard, there is some leeway on how it can be implemented.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li><li><span class=\"cp-tag\">uwp</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag\">nessie</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag\">fireos</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/Mushroom/HackSheffield2.0/branches\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Mushroom/HackSheffield2.0/branches\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I created the Universal Windows app", "Android and FireOs"]], ["Rock the payments", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Rock the payments \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/428/481/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Innovative payments through facial recognition and internet-banking.</p>\n<h2>What it does</h2>\n<p>Payments using facial recognition. NO NEED FOR ANYTHING ELSE</p>\n<h2>How we built it</h2>\n<p>We wrote two projects, one working with the capital-one API for the banking objects and the other with kairos-api for facial recognition and then we combine them together</p>\n<h2>Challenges we ran into</h2>\n<p>Could not send requests to pusher from iPhone for no reason</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Facial recognition &amp; created methods for everything in capital-one</p>\n<h2>What we learned</h2>\n<p>A lot. Debugging pusher put us in the position of writing 2 servers - one in php and the other in python using flask</p>\n<h2>What's next for Rock the payments</h2>\n<p>Quicker processing, better UI, easier UX, confirm payments based on the location of the two merchants</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/php\">php</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/pusher\">pusher</a></span></li><li><span class=\"cp-tag\">swift-3</span></li><li><span class=\"cp-tag\">networkkit-api</span></li><li><span class=\"cp-tag\">kairos-api</span></li><li><span class=\"cp-tag\">capital-one-api</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/xcode\">xcode</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ios\">ios</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/razvangeangu/RockThePayments\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/razvangeangu/RockThePayments\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["BlockSpot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Blockspot</h2>\n<p><a href=\"https://github.com/ThomasBower/Blockspot\" rel=\"nofollow\">GitHub</a></p>\n<p>Productivity app that uses geofencing to set up interactive hubs to block all the distracting websites defined on your personal blacklist.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/swift\">swift</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mapkit\">mapkit</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/HackSheffieldTeamImperial/Blockspot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/HackSheffieldTeamImperial/Blockspot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Idea, geofencing backend", "", "", "", ""]], ["Alexa Allergies", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to make a skill for Amazon's Alexa. We thought that health-care was an interesting sector. One of our team members has a nut allergy. A common question is \"can I eat ...\". It would be useful if when in your home, Alexa could easily answer this question.</p>\n<h2>What it does</h2>\n<p>This is an Alexa 'skill' that lets you ask if a food is ok for you to eat based on an allergy profile that you make.</p>\n<h2>How we built it</h2>\n<p>First, we experimented with different food APIs to see which one would give us enough allergen information. We made a codepen to visualise these API's output.</p>\n<p>We used AWS Lambda to host the Node.js backend that included the Alexa SDK and a custom wrapper for the food label SDK. We used Firebase DB by Google to store user allergen profiles.</p>\n<h2>Challenges we ran into</h2>\n<p>AWS Lambda is terrible at giving meaningful errors and also seems to have patchy support for new JavaScript ES6. </p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We were able to pass arbitrary length strings to Alexa and pass the data to an API. This proved quite difficult.</p>\n<h2>What we learned</h2>\n<p>Some members learned JavaScript for the first time. We got better at collaborating with Git and Github and learned how to use the Alexa SDK.</p>\n<h2>What's next for Alexa Allergens</h2>\n<p>We'd like to provide more 'sample utterances' so we can interact with it in different and more human-like ways. Hopefully we'll be able to publish the skill.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/alexa\">alexa</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/davejm/CanIEat-Alexa-Skill\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/davejm/CanIEat-Alexa-Skill\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://www.alexaallergies.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.alexaallergies.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.alexaallergies.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["It was my first time using javascript and AWS Lambda while working on the User-Alexa interaction.", "I worked mostly on the node backend for the Alexa skill. I implemented the backend API from other members' codepen tests.\nI'd never used AWS Lambda before and learnt a lot about it in the process.", ""]], ["Hackinator", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/TVBDRHVhRWM?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We've both wasted too much time trying to fool the great akinator. From a smart-ass genie, a smart-ass AI companion seems like the next logical step. </p>\n<h2>What it does</h2>\n<p>Think of someone! Anyone! Alexa will ask you yes/no questions and (hopefully) guess correctly.</p>\n<p>(<strong>Top Tip:</strong> If you don't know an answer you can say: \"I don't know\", \"Probably\" or \"Probably not\")</p>\n<h2>How we built it</h2>\n<p>Node.js with the <code>alexa-sdk</code> package. Interfacing directly with akinator.com API endpoints.</p>\n<h2>Challenges we ran into</h2>\n<ul>\n<li>AWS lambda</li>\n<li>Faulty zip commands</li>\n<li>Node.js</li>\n<li>Stateless design!?!</li>\n<li><del>Skynet</del></li>\n<li>Unhandled state transitions</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<p>Possibly the first time we've actually finished a hackathon project.\nWith time to spare too!</p>\n<h2>What we learned</h2>\n<p>I'll think about that when I'm less sleep deprived</p>\n<h2>What's next for Hackinator</h2>\n<p>We'll publish it as a public alexa skill soon</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/jlogandavison/hacksheffield\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/jlogandavison/hacksheffield\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["Untriggered", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>CHRIS + Coffe + Orange juice + Funk Music = BOOM</p>\n<h2>What it does</h2>\n<p>It makes you laugh</p>\n<h2>How we built it</h2>\n<p>You tell me</p>\n<h2>Challenges we ran into</h2>\n<p>The world</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We can finally go to sleep </p>\n<h2>What we learned</h2>\n<p>Free food is awesome</p>\n<h2>What's next for Untriggered</h2>\n<p>Nothing</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/RhymeCrime/project/tree/branch3\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/RhymeCrime/project/tree/branch3\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["HackYouVeryMuch.com", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"HackYouVeryMuch.com \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/548/datas/gallery.jpg\"/>\n<p>\n<i>a schematic of the website</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>APPEARING SOON ON HACKYOUVERYMUCH.COM!!!!1!!!</h2>\n<p>Built to host my other hack, WirePath, I designed this domain using Weebly. I did not know, during initial planning, that it would take 24-48 hours for servers to update after a domain is unparked. Clearly, we didn't have that time. In the above picture is a schematic of the website layout. Once my other hack is more... polished... it will appear where the beautiful green comic sans indicates, on the brick background. I am considering using this page as a portfolio for past and future projects, once it is available to the general public. I'd also like to add more information and detail, and perhaps more pages. If you wait it out a bit more, the magic internet fairy will wave her wand and this wonderful website will poof into being on the world wide web.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/weebly\">weebly</a></span></li><li><span class=\"cp-tag\">domain.com</span></li></ul>\n</div>\n</div>", [""]], ["MeMeStOcKeXcHaNgE", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"MeMeStOcKeXcHaNgE \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/697/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMeStOcKeXcHaNgE \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/699/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMeStOcKeXcHaNgE \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/694/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Seeing some reddit users joke about a meme stock exchange which could be made into reality.</p>\n<h2>What it does</h2>\n<p>Lets you buy and sell memes with their value updating according to real trending data on Twitter.</p>\n<h2>How we built it</h2>\n<p>We made a HTML+CSS website and then introduced Bootstrap to provide a nav bar, whilst also creating a Ruby and database setup to run a server and merged in the Ruby to the HTML and then pulled the meme trending value from Twitter's API to go into our database.</p>\n<h2>Challenges we ran into</h2>\n<p>Twitter's API was not straight forward. Google Trends does not have an API and the embedded link from their own site was completely broken.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Being able to buy a meme and make profit off of it</p>\n<h2>What we learned</h2>\n<p>Strong team building skills - allocation of tasks and dealing with bottlenecks in plan.</p>\n<p>Ruby does not work easily on Windows and Google trends does not have an API. Twitter's API is extremely confusing and had to be hacked to get to work. We learnt how to use some Ruby gems (rufus-scheduler,twitter) and to interface with a database through Ruby.</p>\n<h2>What's next for MeMeStOcKeXcHaNgE</h2>\n<p>Running on a real web server, supporting logins and adding more memes or unrestricting the purchases to all memes. Hosting adverts on the site and creating a paid or ad based app.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ruby\">ruby</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bootstrap\">bootstrap</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sql\">sql</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sqlite\">sqlite</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sinatra\">sinatra</a></span></li><li><span class=\"cp-tag\">rack</span></li><li><span class=\"cp-tag\">png</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/notepad\">notepad++</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://meme-stock-exchange.herokuapp.com/meme?meme_name=Xzibit\" rel=\"nofollow\" target=\"_blank\" title=\"https://meme-stock-exchange.herokuapp.com/meme?meme_name=Xzibit\">\n<i class=\"ss-icon ss-link\"></i>\n<span>meme-stock-exchange.herokuapp.com</span>\n</a></li>\n<li><a href=\"https://github.com/MeMeStOcKeXcHaNgErS/MeMeStOcKeXcHaNgE\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/MeMeStOcKeXcHaNgErS/MeMeStOcKeXcHaNgE\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I turned the static HTML files into dynamic web pages as erb files. I also participated heavily in coding their controllers, particularly the login system with Twitter. I also helped colin code his database methods as he did not have an IDE, so I proofread his code and ran it.", "I worked mostly on the front-end, using Bootstrap to build a generic webpage, which was then rolled out to each meme page. I also was part of the pair which figured out how to embed Google Trends onto the webpage; this was much more difficult than anticipated. Once that was set up, we (the front end team) did help with the back-end, particularly with using the Twitter API. We were using the Twitter API to do something (i.e. count tweets) which we had never done before, and that posed its difficulties but we worked it out eventually. \n", "I worked on the back end code of our web app.  I coded the low level functions which handled the interactions between our ruby controller an our database.  I used these functions to build more complex functions which calculated basic stock trends and the value of the price of memes.  I also worked on the twitter api which was used to take trending results to power our stock exchange.", "I worked mostly on the front end, making a basic prototype for the website and then styling it to look nice and be responsive - this was useful later when we needed to shrink the browser window and would allow us to make a website based app easily if we had the time. I also helped with some of the debugging with the Ruby code and trying to work out how to get value data from Twitter trends."]], ["Hype", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Hype \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/764/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Hype \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/641/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Hype \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/614/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Hype \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/615/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Hype \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/616/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>During our first board meeting we deliberated that there had never really been a good app that allowed you to find local events at any given time. Therefore our vision was to design an app that implemented the simplicity of apps such as SnapChat and Instagram while offering a core functionality that can be used by all.</p>\n<h2>What it does</h2>\n<p>Hype allows users to share events that they are hosting or at already, allowing other users to find and see what's popular in real time. All users are kept totally anonymous so you won't have to worry about privacy concerns.</p>\n<h2>How we built it</h2>\n<p>Complex algorithms written in Java and NodeJS are used to calculate the locations of events based on where users 'hype' an area. Dense areas with frequent hypes are ranked above other smaller events that users may not be interested in.</p>\n<h2>Challenges we ran into</h2>\n<p>None of our team had experience with any of the tools we used before the event. We taught ourselves to use them from scratch and crafted something beautiful out of them.</p>\n<h2>What's next for Hype</h2>\n<p>With continued development we intend to add many more features such as social interaction as well as sponsored events.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">ngrok</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/express-js\">express.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android-studio\">android-studio</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-play\">google-play</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/inkscape\">inkscape</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://drive.google.com/file/d/0B1gjzDFy6RUcb3hkT3VXM2hmRGM/view?usp=sharing\" rel=\"nofollow\" target=\"_blank\" title=\"https://drive.google.com/file/d/0B1gjzDFy6RUcb3hkT3VXM2hmRGM/view?usp=sharing\">\n<i class=\"ss-icon ss-link\"></i>\n<span>drive.google.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I did a lot of the back-end work designing the web apis and security that we used for our app. I also spent a lot of time providing round the clock tech-support for the front-end team. I was also up working all night making sure it was perfect for today.", "I worked on the front-end app development in Android Studio, building the user interface of the app, and I made the graphics (icon and logo).", "I worked on front-end and design. It was my first experience with stuff like that (Java, XML, Inkscape) and I have learned a lot of new exciting things!", "I worked on the backend services, helped to solve various issues we encountered using NodeJS. Also helped in design challenges and debugging front-end java code."]], ["Couch Diagnosis", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>As the aging population of the UK turns into an inverted period, Dementia becomes more and more of a pressing issue. The time consuming nature of Dementia Questionnaires in a time where General Practice Surgeries are constrained with time and resources, promotes need for more efficient way of screening.</p>\n<h2>What it does</h2>\n<p>Removes the need for human interaction to do 20-30 minute questionnaire, saving time for the GP, translated to improved efficiency in services. Questionnaire will be done before GP appointment for annual medication review, Results will be available to be discussed during the GP appointment. It will demonstrate the likely hood/ risk of having dementia,  promoting GP to conduct detailed clinical examination to confirm diagnosis. </p>\n<h2>How we built it</h2>\n<p>Questionnaire written to AWS RDS. Lambda queries RDS and passes questionnaire to Amazon Alexa. Alexa speaks out question and listens to response. and writes response to RDS. Express app on EC2 queries RDS for response and presents result on web app.. (In theory)</p>\n<h2>Challenges we ran into</h2>\n<p>Setting up a skill (SDK) in Alexa, getting Alexa to Write responses, Java development script and displaying responses on the web page, connecting the different components together in a restricted time frame (everything:P), </p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Managed to overcome some of the challenges faced in untreaded waters. \nFew members of the team were completely unaware of coding and learnt few of the basics of it through the help of the rest of team.\nMeeting new people from different disciplines! \nExploring the different AWS services including Alexa and Lambda</p>\n<h2>What we learned</h2>\n<p>Specific skills - Developing Alexa skills, Using Lambda queries, Using EC 2 API\nImproving knowledge of coding \nThe possibility of self learning any programming language with the the help of google \nUnderstanding the concept of hackathons </p>\n<h2>What's next for Couch Diagnosis</h2>\n<p>Complete building on Minimal Viable Product to fulfill objectives and fit into context \nConcept is transferable to multiple contexts in medicine including other cognitive function questionnaires, Asthma risk assessment questionnaire etc. </p>\n</div>\n</div>", ["front end", "Worked on Amazon Alexa app,", "", ""]], ["Calculator Alpha", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/iw3nRhl7NsA?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Alexa is a powerful platform of natural language processing, it has huge potential to free our cerativity, and bring the spark of thinking by talking to us. For engineers and scientists, maths is one of the most important and frequent request we would like to send to alexa.</p>\n<h2>What it does</h2>\n<p>It answers all mathmatical questions and everything which has been stored in the knowledgebase</p>\n<h2>How we built it</h2>\n<p>It was built with the Amazon Web Service Lamda and incoorperate with Wolfram Alpha API in python. Amazon web service and Alexa skill kit is the backbone of the service.</p>\n<h2>Challenges I ran into</h2>\n<ol>\n<li>Find the arithmetic API, finally we find wolfram alpha API.</li>\n<li>The method we use to convert text message to the html format wolfram alpha could understand.</li>\n<li>Extract key information returned from wolfram alpha using regular expression.</li>\n<li>Build easyily extensible corpus for the import message.\nWe've ran in challenges such as taking Alexa's input in a way to pass it in our API and \n## Accomplishments that I'm proud of</li>\n</ol>\n<h2>What I learned</h2>\n<h2>What's next for Calculating Alexa</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">phython</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://www.github.com/iamlxb3/Calculator_Alpha\" rel=\"nofollow\" target=\"_blank\" title=\"https://www.github.com/iamlxb3/Calculator_Alpha\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Slenderllama", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<pre class=\"language-nolang\"><code>After a few hours of thinking, it came down to one simple thing, *we like llamas*. So we ran with it and out came this.\n</code></pre>\n<h2>What it does</h2>\n<pre class=\"language-nolang\"><code>Slanderllama is an (incredibly) basic game designed with the \n</code></pre>\n<p>game elements of Slenderman in mind. Whilst walking around in the world, at night, with a torch, you have to find the carrots that the Slenderllama dropped in order to progress to the next level. (coming soon...).</p>\n<h2>How we built it</h2>\n<pre class=\"language-nolang\"><code>Slenderllama was built with Unity and Blender with one member focusing on the world, one focusing on the game mechanics and one on the 3D models.\n</code></pre>\n<h2>Challenges we ran into</h2>\n<pre class=\"language-nolang\"><code>Firstly, not being able to make our first idea due to complexity, or our second for that matter. Our next problem was none of us had used any of the software before which meant a steep learning curve to get the product that we wanted. A major problem for us was dealing with random coding issues such as the Slenderllama randomly flying away from time to time among other things. The final problem was the resources we were using. As only one of us had a laptop, we were restricted to the Uni PCs which meant no installations of any additional software or anything that required administrator rights (this was partly solved by one of us who was running a remote desktop for the majority of the time) . \n</code></pre>\n<h2>Accomplishments that we're proud of</h2>\n<pre class=\"language-nolang\"><code>We are very proud of the fact that we made something first of all as we had no idea what we were doing half of the time. We are also really proud as we all now have a sound knowledge in each of the programs we were using (and considering we hadn't used them 24 hours ago, that's not bad).\n</code></pre>\n<h2>What we learned</h2>\n<pre class=\"language-nolang\"><code>How to use Blender and Unity and how to get around admin requirements.\n</code></pre>\n<h2>What's next for Slenderllama</h2>\n<pre class=\"language-nolang\"><code>A working AI for the Slenderllama, more levels and a farming sequel called farm-a-llama.\n</code></pre>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/blender\">blender</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unity\">unity</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag\">unityengine-api</span></li></ul>\n</div>\n</div>", ["I worked on the 3D models for the game as well as the thumbnail graphic and the content for the Devpost submission", "I created the world, putting scripts and other elements together and aided with AI programming"]], ["The Dossier", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"The Dossier \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/617/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Dossier \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/618/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Dossier \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/619/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Dossier \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/620/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<pre class=\"language-nolang\"><code>For HackSheffield 2.0, we designed a video game to fit within what we felt was realistic ambitions.  We drew artistic inspiration from games such as \"Gods Will Be Watching\" and \"The Secret of Monkey Island\" - and loosely based our primary game mechanic on... \"Papers, Please\" and... maybe \"Guess Who\"? With hindsight, the game turned out rather similar to Sheffield's Assassin's Guild society - and as two of our developers are indeed members, this is PROBABLY not coincidence. Call it subconscious game design, or whatever floats your boat.\n\"The Dossier\" was a game designed to combine the talents of our four developers. We decided on a video game, as this is where the majority of our cumulative experience lies - video game development. Rather than limiting us, this let us draw from a dauntingly vast pool of disciplines that making a decent game requires. Artwork, programming, web development, and creative writing - we split our team of four rather neatly into these four different categories.\n</code></pre>\n<h2>What it does</h2>\n<pre class=\"language-nolang\"><code>The Dossier features intrigue, espionage, and pirates. Put simply, there's a load of characters in a room - one of whom is your \"target\". Equipped with a rather vague \"briefing file\", along with each character's dialogue and appearances, you are tasked with identifying your target correctly.\nThe quicker you make a correct identification, the more points you score - and after five rounds of investigation, your score is uploaded to an online leaderboard. We've also got functionality to post your score to twitter, because social media.\n</code></pre>\n<p>Oh, and did we mention that we composed and arranged an entire soundtrack for The Dossier? (A 15 second chip-tune loop, don't get excited.)</p>\n<h2>How we built it</h2>\n<pre class=\"language-nolang\"><code>The game itself was developed in the Game Maker engine, using GML (Game Maker Language), whilst the assets were hand drawn in a image editor called \"Krita\". Tying everything together were various Google Drive folders and documents, which also found themselves spontaneously filled with tonnes and tonnes of god-awful character dialogue - as if from thin air...\n</code></pre>\n<p>Last but by no means least, we used HTML, CSS, and PHP to get the online leaderboard up and running.</p>\n<h2>Challenges we ran into</h2>\n<pre class=\"language-nolang\"><code>Coding wise, matching up the sprite animations with the character movement, alongside varying the game with each play (random characters chosen from a pool of possibilities), proved to be something of a timesink.\nRegarding asset creation, the large workload for a project of this nature made it difficult to produce content fast enough. We were able to overcome this through re-using many of our assets - modifying the originals to make them unique.\nFinding a web hosting service proved tricky, to say the least. This, combined with a mid-hackathon fresh OS install, set the leaderboard development a little behind other aspects of the game.\n</code></pre>\n<h2>Accomplishments that we're proud of</h2>\n<pre class=\"language-nolang\"><code>All of us on the team, having never worked together before, were able to successfully meet the workload of the game we designed from the beginning. It was stressful at times, and plain tedious at others, but we unanimously pulled through and were to deliver a game that lived up to our expectations.\n</code></pre>\n<h2>What we learned</h2>\n<pre class=\"language-nolang\"><code>The most significant thing we learned was that: allocating roles is effective. The four of us worked on very different, equally important aspects of the project, but maintained communication throughout. In this way, we made progress on our individual tasks, whilst helping each other and making design decisions as a group.\n</code></pre>\n<h2>What's next for The Dossier</h2>\n<p>Whilst we don't intend to continue developing The Dossier, we certainly learned a lot from its development, and find it likely that we'll collaborate again on a future project.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">gml</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/gamemaker\">gamemaker</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag\">famitracker</span></li><li><span class=\"cp-tag\">krita</span></li><li><span class=\"cp-tag\">paint.net</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-drive\">google-drive</a></span></li><li><span class=\"cp-tag\">hostinger.co.uk</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://thedossier.esy.es\" rel=\"nofollow\" target=\"_blank\" title=\"http://thedossier.esy.es\">\n<i class=\"ss-icon ss-link\"></i>\n<span>thedossier.esy.es</span>\n</a></li>\n<li><a href=\"https://drive.google.com/file/d/0B4TgvTu5QnqFT2NydkRLSDNMTlE/view\" rel=\"nofollow\" target=\"_blank\" title=\"https://drive.google.com/file/d/0B4TgvTu5QnqFT2NydkRLSDNMTlE/view\">\n<i class=\"ss-icon ss-link\"></i>\n<span>drive.google.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I produced all assets in Krita, including character sprites, the background image. The art style was somewhat inspired by Gods Will Be Watching.", ""]], ["Stomp Trump's wall", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>After the tragic loss of half our group, we ended up on an entirely new platform (unity) using a hardware that we never had heard of before (leap motion), with a language that neither of us knew (c#). why did we choose this project  if there was virtually no way of it being finished in 24 hours ever? good question. We're not quite sure ourselves. Our initial idea was to build a world thanks to leap motion, shaping it like clay with our own hands. Instead we ended with a political satire. Why create a world when you can effortlessly destroy the walls built by a real-life evil?</p>\n<h2>What it does</h2>\n<p>It's a wall. Which you destroy. With your hands.\nWow</p>\n<h2>How we built it</h2>\n<p>With a lot of pain and boring tutorial videos. We only spent about four hours on it, the rest was mainly learning.</p>\n<h2>Challenges we ran into</h2>\n<p>Literally all of them. \"the software I've been using for the past three hours was the wrong one\" \"the actual software doesn't want to open properly\" \"there are no online resources for our situation\" \"my computer doesn't work\" \"wait did half of our group casually left five hours in?\" etc etc etc</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We built a wall!</p>\n<h2>What we learned</h2>\n<p>The... power of friendship? And also the basics of unity, which is a pretty neat program to know</p>\n<h2>What's next for Stomp Trump's wall</h2>\n<p>We believe that our game is truly at the peak of originality and software engineering; There really is no need for further development. </p>\n<p>(No but really, this weekend was amazing we really enjoyed ourselves :D)</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">our-blood-and-tears</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unity\">unity</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li></ul>\n</div>\n</div>", [""]], ["Interactive_adventure_game_through_Alexa_", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We saw the tool on the GitHub samples</p>\n<h2>What it does</h2>\n<p>A voice based interactive adventure game. You can input commands for decisions through Alexa.</p>\n<h2>How we built it</h2>\n<p>We used an API from Github, and the Alexa skills developer kit.</p>\n<h2>Challenges we ran into</h2>\n<p>Making the API work (it was not intended for windows 10). Making the save and upload function work (it had very specific rules for working). Uploading it as an Alexa skill, it was a bit confusing at first. We also couldn't create the graphical interface in time. We also couldn't get the audio to work, so right now its can only work by text based utterances to Alexa.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We made a game together, even if its not working fully</p>\n<h2>What we learned.</h2>\n<p>expanded on programming knowledge, and how to use Alexa Skills developer. Learned how to deal with problems we come across more effectively.</p>\n<h2>What's next for Interactive_adventure_game_through_Alexa - perhaps making the graphical interface and making the audio work.</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n</div>", ["I installed the API and created the adventure game inside there. I then tried to integrate that into Alexa but while the code is working, the audio isn't.", "I contributed to the creation of a 3D CAD model in Java using YCAD. However, this was not implemented in the final project.", ""]], ["FinRisk", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"FinRisk \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/610/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to to be able to ask Amazon's Alexa about the current financial information.</p>\n<h2>What it does</h2>\n<p>It looks up financial information and lists the companies different risk so that someone can get the up-to-date information on the risk and rewards of the companies. </p>\n<h2>How we built it</h2>\n<p>We started by learning the different things we could do with Amazon's Alexa however after a few issues we stopped using it and decided to just do the financial information querying on its own. \nWhile learning how to use the Alexa's system we were developing a system that communicated with the BlackRock financial information api. This worked well from the start but we had a lot of companies to sort through ().\nOnce the decision of removing the Alexa Skill from our plan we started developing a web front end that allowed users to request the top x number of companies and list their financial risk.</p>\n<h2>Challenges we ran into</h2>\n<p>We could not get the Alexa working with our code and we spent a lot of time trying to get things working on it. This reduced the amount of time we had significantly because we though we were close to getting everything working. We still managed to get a visual version of the data produced but it was not the original plan. </p>\n<h2>What we learned</h2>\n<p>We have learned that researching as much as possible on new systems quickly and seeing if it is feasible would have helped us out a lot to:\n\u2022 Find how to get our Skill working\n\u2022 That learning multiple languages and getting them to work together on systems we didn't understand was a lot of work.</p>\n<h2>What's next for FinRisk</h2>\n<p>Getting the skill to work and expanding the overall options the user has for requesting the data.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">blackrock-api</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/mholeys/richardsFunApp\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/mholeys/richardsFunApp\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["TheBombHasBeenDefused.com", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"TheBombHasBeenDefused.com \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/724/datas/gallery.jpg\"/>\n<p>\n<i>On laptop screen</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"TheBombHasBeenDefused.com \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/651/datas/gallery.jpg\"/>\n<p>\n<i>Wires mini-games</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"TheBombHasBeenDefused.com \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/726/datas/gallery.jpg\"/>\n<p>\n<i>Buttons min-game</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The game called Keep talking and nobody explodes.</p>\n<h2>What it does</h2>\n<p>The game allows multiple players to join with their smartphones and displays a single part of a bomb for each player. A separate main screen displays a live bomb with a burning fuse and defusal instructions. The players have to defuse the bomb by performing correct actions on the correct bomb parts (and by extension - smartphones). They have to succeed before the bomb explodes. </p>\n<h2>How we built it</h2>\n<p>We used Node.js to build a server, which we are running on AWS, accessible with a Domain.com domain name: thebombhasbeendefused.com. Both the main display and the smartphones are displaying a web applicaton built mostly in JavaScript.</p>\n<h2>Challenges we ran into</h2>\n<p>The fact that each smartphone displays another part of the bomb. It required from us to create a server that can manage all those mini-games, sending and responding to different, personalized clients.</p>\n<h2>What we learned</h2>\n<p>Working in a two people group is more challening and time consuming than work in a group of four.</p>\n<h2>What's next for TheBombHasBeenDefused.com</h2>\n<ul>\n<li>Adapt the game for more players</li>\n<li>Create more mini-games</li>\n<li>Add more animations </li>\n<li>Work on the front-end</li>\n<li>Create multi-puzzles displayed at the same time</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/domain\">domain</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["How long to watch", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>I watch a lot of tv series. I wanted to find out how long it would take me to watch specific sets of movies or shows. I made it for that reason</p>\n<h2>What it does</h2>\n<p>Lets people create playlists and it will calcuate how much time it will take to watch them all </p>\n<h2>How I built it</h2>\n<p>backend in php to communicate with the the omdb api to fetch info about different content online. this is saved in a mysql database and then outputted in html using bootstrap template</p>\n<h2>Challenges I ran into</h2>\n<p>time</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>not killing people with streess cause time is ana issue</p>\n<h2>What I learned</h2>\n<p>how much i like sleep.</p>\n<h2>What's next for How long to watch</h2>\n<p>I want to integrate with alexa so i can ask it how long it will take me to watch doctor who. actually allow users to sign up and customise their own playlists which they can share with firends. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">php7</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mysql\">mysql</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/linux\">linux</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mac\">mac</a></span></li><li><span class=\"cp-tag\">topre</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://howlongtowatch.org\" rel=\"nofollow\" target=\"_blank\" title=\"https://howlongtowatch.org\">\n<i class=\"ss-icon ss-link\"></i>\n<span>howlongtowatch.org</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Joana - Web Assistant", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<p>HackSheffield project</p>\n<p>Implemented an on-line project which consists of a of an question-answering assistant. User types in a question, the assistant then thinks for a few seconds then answers the question. Questions all in natural language, so no need for formatted input.</p>\n<p>Credits to Webknox for the Q/A API, which I used from Mashape, and to Voice RSS \u00a9 for their Text-to-Speech API.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/php\">php</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/alex-mitcu7/HackSheffield\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/alex-mitcu7/HackSheffield\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I did everything."]], ["Eventor", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<h2>What it does</h2>\n<p>it find events nearby pulling information from API's. this would then tell you the information and email the ones that you like back to yourself to research into more depth when you are free or buy the ticket from the link</p>\n<h2>How I built it</h2>\n<p>using Amazon Lamda and the Echo Alexa. running on node.js </p>\n<h2>Challenges I ran into</h2>\n<p>setting up an email returning information was very difficicult as it is not a lot of resources online. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>having a bare minimum viable product. learning new skills in Amazon lamda</p>\n<h2>What I learned</h2>\n<p>learning Amazon dev skills, and improve ability to read code better </p>\n<h2>What's next for Eventor</h2>\n<p>to install full functionality as there was not enough time or resources to complete it </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-ses\">amazon-ses</a></span></li></ul>\n</div>\n</div>", ["I worked closely on the code logic which directed how Amazon Alexa responded depending on the vocal commands from the user. The positive side-effects of working with Alexa is that I've also learnt a lot about Lambda on AWS and Node.js, technologies I wasn't familiar with before the start of the hack. ", ""]], ["The Twitter Sphere", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"The Twitter Sphere \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/578/datas/gallery.jpg\"/>\n<p>\n<i>The BBC Twitter account.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Twitter Sphere \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/579/datas/gallery.jpg\"/>\n<p>\n<i>The MLHack Twitter account.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Twitter Sphere \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/580/datas/gallery.jpg\"/>\n<p>\n<i>The Durham_Uni account.</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to use natural language processing for our project and to make a good project we needed a wealth of data which we collect from Twitter. Once we'd gathered some interesting statistics we wanted to make something pretty!</p>\n<h2>What it does</h2>\n<p>A Twitter user name is given by the user and recent posts from that user are used to create a graph of how positive their messages are.</p>\n<h2>How we built it</h2>\n<p>When the Twitter username is submitted a socket is opened.  We use the Twitter API to collect recent posts from that user which are then sent of to Google natural language processing API. The result from this is two metrics called polarity (how positive the message contents is) and magnitude (how strong the language used is) as well as a list of mentions of other Twitter users. This information is then sent via a socket connection back to the user where WebGL is used to graph the results using WebGL (via the ThreeJS library).</p>\n<h2>Challenges we ran into</h2>\n<p>The nature of the Twitter and Google APIs made it very difficult to pass data between the two and then reunite the results with the original Tweets. Half of the team had never used JS before and none of us had any experience with Web/OpenGL which was made worse by the lack of documentation for some areas of ThreeJS.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Data makes it reliably from Twitter -&gt; Google -&gt; User and does so relatively quickly. Client side drawing of interactive graph looks great! Despite being build quickly the whole project is built in such a way that we could fairly quickly implement other features (see What's next...).</p>\n<h2>What we learned</h2>\n<p>WebGL, Javascript, lots about asynchronous connections and more ninja git shell skills!</p>\n<h2>What's next for The Twitter Sphere</h2>\n<p>If the socket connections was held open after the initial data is sent then the user's graph could be updated with new posts in (near) real time. We could also allow for the graph to expand beyond one step away from the original user name entered. More animations for the graph using the huge amount of data available to drive pretty (but also insightful) animations. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">google-natural-language-processing</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/three-js\">three.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/socket-io\">socket.io</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/webgl\">webgl</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twitter\">twitter</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/express-js\">express.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://52.209.232.10:8080/\" rel=\"nofollow\" target=\"_blank\" title=\"http://52.209.232.10:8080/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>52.209.232.10</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the client side WebGL (ThreeJS) layout and rendering of the graph.", "Worked on wrangling the backend and the Google Cloud API into a form we could use. ", "I worked on working with the twitter api into something useful and the front end", ""]], ["Rhyming Game with Alexa", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Ever wondered what to do on a boring weeknight? Well fear not, as Alexa is here to challenge you to an epic rhyme off!</p>\n<h2>What it does</h2>\n<p>This project allows you to play a rhyming game with Alexa, going back and forth until someone gives in (hint: that's gonna be you). Just start the game and give Alexa a word to use, and she'll handle the rest. Just make sure you've brushed up on your rhymes! Who ever can't think of a rhyme fast enough, or repeats themselves first will be the loser.</p>\n<h2>How it was built</h2>\n<p>We build this whole project using node.js and the Amazon Alexa Skills SDK, while also making use of an online rhyming dictionary API.</p>\n<h2>Challenges</h2>\n<p>It was a challenge to get Alexa setup and running, and it was even trickier to integrate the functions for the rhyming API into that.</p>\n<h2>Accomplishments</h2>\n<p>We created our first skill for Alexa, which was a very rewarding challenge, and we also managed to have fun while doing it!</p>\n<h2>What we learned</h2>\n<p>Practice makes perfect--this event stimulates us to practice coding skills. Although, we are not experts in coding, we like coding and want to learn more in the future. The result does not matter, the process matters much more.</p>\n<h2>What's next for Rhyming Game</h2>\n<p>Upgrade it to another high-level game-Dragon and Dungeon with Alexa?</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/alexa\">alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["The Degree Finder", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/duvVJDNQRQw?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Listening to Alexa we started to think about her potential and tried to come up with a problem for her to solve. We thought back to a couple of years ago for us when we were trying to decide what degree to apply to at University. This proved to be a very difficult choice, as it is for many, and we thought Alexa might be able to help people with that choice in the future.</p>\n<h2>What it does</h2>\n<p>The Degree Finder asks you a set of questions and tries to understand what you enjoy and your personality. Through these inferences Alexa suggests a degree she thinks will be right for you!</p>\n<h2>How we built it</h2>\n<p>We used a \"decision-tree\" template to begin to understand how Alexa worked and built from it a small program in javascript that has a total of 16 different Degrees at the end of it.</p>\n<h2>Challenges we ran into</h2>\n<p>Understanding Alexa was our biggest challenge. We tried a few different ideas and simply could not get her to do what we wanted. Once we finally got an example program working we found an idea that we could adapt to that program and worked from there.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Being able to solve our problems that had us stuck for around 6 hours and create a working program, even a simple one, that actually runs on Alexa. We are also very proud of our idea because we think it could be something that could make an impact with future students if developed further.</p>\n<h2>What we learned</h2>\n<p>This was our first hackathon so we learned what is fully involved in one and how much fun it can be. We also learned a bit of javascript from messing around with the code and how to deal with problems in a stressful situation.</p>\n<h2>What's next for The Degree Finder</h2>\n<p>If it could be expanded to over many more degrees and ask many more specific questions we believe it could go on to help future students make their decision an easier one in the future.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n</div>", ["I created the programming base of the skill, and make it work with Alexa (after 6h of trying) and I participated in the questions and answers part as well. ", "I added to many of the descriptions of the degrees and worked on doubling the number of degrees she could cover."]], ["WirePath", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"WirePath \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/556/datas/gallery.jpg\"/>\n<p>\n<i>A preview of the game window</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"WirePath \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/603/datas/gallery.jpg\"/>\n<p>\n<i>the main bit of code, though point.js was later incorporated into main.js. They are split here for demonstrative clarity.</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>leap-maze</h1>\n<h2>A follow the wire challenge using  LEAP Motion</h2>\n<p>Points are assigned based on the color you are on, with the most points gained for being on the black, fewer for the orange, and points are lost in the red. Using your pointer finger as a controller through the LEAP Motion, the code is designed to detect the color the circle is on. This is barely alpha; in future versions I would like to fine tune the color detector, make the image larger and more complex, and add movement and time requirements.</p>\n<h6>this code was started with help from Joe MacMahon, but was completely planned and finished by yours truly.</h6>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/shell\">shell</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/jmacmahon/leap-maze\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/jmacmahon/leap-maze\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I had tons (or tonnes I suppose, for you Brits) of fun learning and using Javascript and HTML5 for the first time ever. I am also very proud that I managed to complete this on my own after a sudden change in teammates."]], ["Qr Ar Overlay", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Idea on the fly at half 10 this morning.</p>\n<h2>What it does</h2>\n<p>The camera scans a qr code and embeds an image of the related website over the top of the camera image.  </p>\n<h2>How we built it</h2>\n<p>OpenCV, Awesomium and lots of coffee.</p>\n<h2>Challenges we ran into</h2>\n<p>We wanted a live browser to be embedded over the top of the camera image. We also wanted the embedded page to have a three 3D effect moving with the user. These became unobtainable due to time constraints. </p>\n<h2>What we learned</h2>\n<p>Learnt how to install and begin to understand Linux, while another member has now been converted to Linux.</p>\n<h2>What's next for Qr Ar Overlay</h2>\n<p>Waiting for technology to catch up. Implementation of above ideas and hololens technology.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/njisaac/qr-overlay \" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/njisaac/qr-overlay \">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Gatesopen", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Gatesopen \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/421/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Gatesopen \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/422/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The Trainline app introduced a new feature a while ago where it asks you whether there are any free seats on the train that you're on. I thought it would be an interesting idea to do something similar for ticket barriers at stations.</p>\n<h2>What it does</h2>\n<p>It's a Telegram (similar to WhatsApp) bot which checks whether ticket barriers are open at stations based on user data. Go and chat to it to find out the commands.</p>\n<h2>How I built it</h2>\n<p>Started out wanting it to be a Messenger bot, but ended up using Telegram instead. It's written in Node.js and stores all its data in Redis. I found the data for all the station codes online - somebody managed to get access to the National Rail API and just dumped all the data.</p>\n<h2>Challenges I ran into</h2>\n<p>Messenger bots are required to be approved. There's no way they'd approve this! So I switched to Telegram.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I keep learning new cool things about Redis! Most people only use it as a cache of some sort, but I'm loving it as my primary data store. I quite enjoy working around its limitations.</p>\n<h2>What I learned</h2>\n<p>Messenger platform, for all the hype surrounding it, is actually a bit rubbish.</p>\n<h2>What's next for Gatesopen</h2>\n<p>I'd really like to incorporate some kind of ML to learn which stations usually have their barriers open at a specific time of day. I think it would also be cool to work in some natural language processing so that conversations with the bot become a bit more human.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/redis\">redis</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/telegram\">telegram</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://telegram.me/gatesopenbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://telegram.me/gatesopenbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>telegram.me</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["moodbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/8XjUwkMtNI4?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"moodbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/484/datas/gallery.jpg\"/>\n<p>\n<i>JSON Response</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"moodbot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/485/datas/gallery.jpg\"/>\n<p>\n<i>JSON Response</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"moodbot \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/426/486/datas/gallery.jpg\"/>\n<p>\n<i>JSON Response</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration:</h2>\n<p>Bots are often looked upon as manifestations of silicon devices that 'mimic' human characteristics. A characteristic a lot of assistants/bots lack is the ability to empathise with human emotions. The idea was to be able to comprehend emotion and help improve it for the better/be a little mischievous.</p>\n<h2>What it does:</h2>\n<p>Alexa asks you how you are feeling and based on your reply, shares a joke/song/anecdote/image/story with you, which 'ideally' should change your mood from the one you are in, to a target mood, like happiness or cheerfulness. It does so by picking curated data from popular websites such as Reddit, Quora and 9GAG. Using these websites keeps the content relevant and fresh.</p>\n<h2>How I built it:</h2>\n<p>I built it using AWS and Node.js</p>\n<h2>Challenges I ran into:</h2>\n<p>Playing an audio file returned an error of endpoint not being found. So I had to fall back on textual music suggestions. Moreover, the documentation on sending cards to the amazon app was relatively vague, hence making it difficult to implement an image send.</p>\n<h2>Accomplishments that I'm proud of:</h2>\n<p>Getting AWS to work. Earlier, it turned out to be such a pain, that my team had to disband. implementing a random sort function with zero bias, making each relevant content suggestion equally possible of being showed to the user.</p>\n<h2>What I learned:</h2>\n<p>Javascript promises and callback, AWS - Lambda Function, running tests using Mocha and Chai, using request-promise</p>\n<h2>What's next for moodbot</h2>\n<p>I intend to make moodbot detect various variations of the same emotion so that it can map to relevant content. I also intend to make moodbot play music samples and send memes to the user's phone to make them smile/amuse them. Given sufficient time and skills, I think getting it to detect subtle language nuances would be another goal, thereby making it provide relevant content without the user explicitly instructing it to.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">fieldbook</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">chai</span></li><li><span class=\"cp-tag\">lodash</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/achadha0111/moodbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/achadha0111/moodbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"https://api.fieldbook.com/v1/58027b0217c5a70300d77a11/mooddata\" rel=\"nofollow\" target=\"_blank\" title=\"https://api.fieldbook.com/v1/58027b0217c5a70300d77a11/mooddata\">\n<i class=\"ss-icon ss-link\"></i>\n<span>api.fieldbook.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]]]