[["AWS Network Helper Bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/KB74FRAYTX4?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h1>AWS Network Helper</h1>\n<p>Project for submission to the 2016 AWS Serverless Chatbot Competition\n<a href=\"https://youtu.be/KB74FRAYTX4\" rel=\"nofollow\">AWS Network Helper Demo Video</a></p>\n<h2>Goals &amp; Features</h2>\n<p>The goal of this project is to provide an AWS network troubleshooting script that runs on a serverless architecture, and can be interacted with via Slack as a chat bot. In simple terms, the goal is to be able to respond to input like:</p>\n<ul>\n<li>Why can\u2019t I connect to ec2-instance-A from ec2-instance-B?</li>\n<li>Troubleshoot connection between ec2-instance-B and rds-instance-C on port 5432</li>\n<li>I cannot connect to S3 from ec2-instance-A</li>\n<li>Help me connect to ec2-instance-B</li>\n</ul>\n<p>In order to respond to inputs like these, the script must be able to analyze these network elements:</p>\n<ul>\n<li>Ingress and Egress Security Groups</li>\n<li>Ingress and Egress Network ACLs</li>\n<li>Route Tables</li>\n<li>NAT and Internet Gateways</li>\n</ul>\n<p>Also, since information like instance type, port, and ephemeral ports may or may not be provided, the code must be able to look through metadata for these values, or at least make reasonable assumptions for what the user is most likely trying to accomplish.</p>\n<p>The code is currently able to understand all of the statements above, as well as small variations in the wording. It can troubleshoot network settings for the following types of connections in both directions:</p>\n<table class=\"responsive\"><thead>\n<tr>\n<th>Instance A</th>\n<th>Instance B</th>\n<th>Complexities</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>EC2</td>\n<td>EC2</td>\n<td>Supports Windows and Linux</td>\n</tr>\n<tr>\n<td>EC2</td>\n<td>RDS</td>\n<td>All RDS engine types supported</td>\n</tr>\n<tr>\n<td>EC2</td>\n<td>The Internet</td>\n<td>Supports instances behind both Internet and NAT Gateways</td>\n</tr>\n<tr>\n<td>RDS</td>\n<td>The Internet</td>\n<td>Supports instances behind both Internet and NAT Gateways</td>\n</tr>\n<tr>\n<td>EC2</td>\n<td>AWS Services</td>\n<td>S3, DynamoDB, KMS, SNS, SQS, etc.</td>\n</tr>\n</tbody></table>\n<p>Wherever possible, the code should also not limit the scope of this project to only use Slack as the messaging interface.</p>\n<h2>Architecture</h2>\n<p>AWS Services Used:</p>\n<ul>\n<li>API Gateway</li>\n<li>SNS</li>\n<li>S3</li>\n<li>Lambda</li>\n<li>IAM &amp; KMS</li>\n</ul>\n<p><img alt=\"Architecture Diagram\" data-canonical-url=\"/docs/AWS%20Network%20Helper%20Architecture.png?raw=true\" src=\"/docs/AWS%20Network%20Helper%20Architecture.png?raw=true\" title=\"AWS Network Helper Architecture Diagram\"/></p>\n<p>An SNS topic is used between the Slack listener Lambda and the network helper Lambda so that in the future, different listeners could be deployed that use interfaces other than Slack. Other interfaces could include, but are not limited to:</p>\n<ul>\n<li>A web app</li>\n<li>A scheduled batch job for auditing network settings</li>\n<li>A command line tool</li>\n<li>A Python module</li>\n</ul>\n<p>S3 is used to provide the user with an externalized configuration file for easier changes. The Slack token, SNS ARN, slash command, and other variables can be changed without re-compiling your Lambda</p>\n<p>KMS is used to decrypt the Slack token stored in the configuration file upon use, and is also used to encrypt/decrypt the response URL as it gets passed through SNS. This is an added layer of security.</p>\n<h2>Installation</h2>\n<p>Please follow the installation instructions in the AWS Network Helper documentation: <a href=\"/docs/AWS%20Network%20Helper.docx\" rel=\"nofollow\">AWS Network Helper Documentation</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/ngmcfarland/aws-network-helper\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/ngmcfarland/aws-network-helper\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["B0pb0t", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/-TkbqTHqvbo?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"B0pb0t \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/920/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>Bopbot</h1>\n<p>Making mealtime awesome.</p>\n<h2>It began with a rumbling belly...</h2>\n<p>It\u2019s 1:00pm, just outside the office front door. Your stomach grumbles in protest, but you and your co-workers are still locked in heated debate over Chinese versus pizza.</p>\n<p>It\u2019s 6:30pm. The setting sun\u2019s rays catch a lone tear inching down your cheek, as you realize your friends have left for dinner without you. <em>Again</em>.</p>\n<p>It\u2019s 9:45pm and you\u2019re dreaming of an easy way to find delicious restaurants nearby for you and your co-workers. You dream of an app that not only finds these nearby treasures, but also streamlines the endless cycle of <em>\u201cI don\u2019t know, what do you wanna eat?\u201d</em> and even reminds Johnny that you want to leave in 15 minutes... <em>oh Johnny, always late</em>. You let this sweet, idyllic dream linger for a delicious moment longer, and then trudge to McDonald\u2019s for the fourth night in a row.</p>\n<p>But that dream, which you dare not hope for, lest your spirit be crushed. Take heart. <em>It\u2019s real</em>.</p>\n<p>Introducing Bopbot (named for \ubc25, the Korean word for \u2018rice\u2019 and/or \u2018meal\u2019). Just install, authorize with one click, and instantly chat your way into suggestions for good eats in your area. Bopbot will conveniently poll your friends and let everyone know the winning restaurant. It even sends reminders.. no hungry belly left behind. And it does all of this with a kind but plucky spirit that makes Siri sound old and crotchety.</p>\n<p>Bopbot. Making mealtime awesome.</p>\n<h2>What's Behind The Curtain?</h2>\n<p>The current implementation of B0pb0t is a sturdy balance of Amazon Web Services -- Lambda, APIGateway, DynamoDB, and SNS. Our server-less architecture sits behind the Slack API and makes friendly requests to the Yelp API as needed.</p>\n<p>The cheerful and friendly UI/UX is a mix of Queen Bee's creative design resources, and the dynamic fusion of the team's combined wit, candor, and love (with sprinkles on top).</p>\n<h2>Flashbacks, Finger Snaps, and the Future</h2>\n<p>This project was conducted by a spirited task force of the MyMusicTaste Development Division. The server-less wizard Kokonak designed, built, tested, and deployed most of the architecture, with some help from Pwalle and Nujabes. Queen Bee was the team's Right Brain, crafting up the UI/UX with some <code>[mostly unnecessary]</code> suggestions from the others. Nujabes spearheaded and managed the effort like Gordon Ramses, and Pwalle was given sovereign right over the copywriting.</p>\n<p>We would like to proudly recognize the work accomplished during the <em>short five weeks</em> allotted for this project, and pour libations to the challenges and lessons along the way. </p>\n<p>Tasty kudos go to Kokonak, who bravely forged his way through a first-time tango with AWS Lambda, DynamoDB, APIGateway and SNS. The architectural obstacles were many.. especially Slack API's required 3 second maximum response time and the statelessness of Lambda. He trounced these issues with a clever pairing with DynamoDB and SNS, making the resulting system not only robust, but also scalable.</p>\n<p>We thank the rest of the intrepid team as well, for supporting Kokonak on his mission. Lastly, we thank Amazon and especially Amazon Web Services for providing the necessary infrastructure for this project and many others, of course not just our own (TLDR: shut up and take our money).</p>\n<p>The future is bright for our plucky Bopbot. Here's the shortlist:</p>\n<ul>\n<li>We plan to leverage AWS CloudFormation to allow brainless installation and enable us to upload to the Slack application directory.</li>\n<li>Once gilded with the architectural final touches, we will open source Bopbot and share it with the development community (\uc0dd\ud65c\ucf54\ub529) here in Korea. Korea largely lacks a unified, reliable, and updated restaurant location service, but Bopbot could fill that gap with data contributions from ever-hungry development teams.</li>\n<li>We love the friendly face of Bopbot, but we hope to harness some machines to make her even more human! The MyMusicTaste data team is currently building a data warehouse and modeling infrastructure using AWS Redshift, EC2, SQS, and other resources. We will use this infrastructure in conjunction with natural language processing to smooth conversation with Bopbot, and build predictive models from usage data to improve her suggestions.</li>\n<li>As always, there is a long list of gold plating for the UI/UX. Minimally, we'd like to fix a Slack feature with reminders that auto-magikally pushes past times to the next day, and use <a href=\"https://github.com/smashwilson/slack-emojinator\" rel=\"nofollow\">this service</a> to auto-install our custom emoji on users' Slack.</li>\n</ul>\n<p>***Note : there are installation instructions and a link for a trial use of Bopbot in the GitHub repo and in this submission.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/yelp\">yelp</a></span></li><li><span class=\"cp-tag\">amazon-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-sns\">amazon-sns</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag\">sweat</span></li><li><span class=\"cp-tag\">sprinkles</span></li><li><span class=\"cp-tag\">amazon-apigateway</span></li><li><span class=\"cp-tag\">magick</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/tastepwalle/b0pb0t\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/tastepwalle/b0pb0t\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"https://slack.com/oauth/authorize?scope=bot,channels:write,im:write,im:history,reminders:write&amp;state=install&amp;client_id=70107175334.85498289508\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack.com/oauth/authorize?scope=bot,channels:write,im:write,im:history,reminders:write&amp;state=install&amp;client_id=70107175334.85498289508\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I wrote things. ", "I payed for snacks!", "", ""]], ["Borges the TranslateBot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/d09KIwT768k?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h1>Translator Slackbot</h1>\n<p>The Translator Slackbot translates messages between users' languages in\nreal time. The Slackbot is useful for teams that transcend native language\nboundaries.</p>\n<p>Translation services are provided by the Google Translate API.</p>\n<h2>Features</h2>\n<ul>\n<li>choose different languages per Slack channel</li>\n<li>auto-detects the source language and skips it in translated messages</li>\n<li>if authorized, modifies translated message with the corresponding translations</li>\n<li>if not authorized, posts translations as the bot user</li>\n</ul>\n<h2>Add to Your Slack Team</h2>\n<p><a href=\"https://slack.com/oauth/authorize?scope=commands,bot,chat:write:user,chat:write:bot&amp;client_id=76454819904.83569102723\" rel=\"nofollow\"><img alt=\"Add to Slack\" data-canonical-url=\"https://platform.slack-edge.com/img/add_to_slack.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--395OMcUy--/https://platform.slack-edge.com/img/add_to_slack.png\"/></a></p>\n<p>Any team member can authorize the bot and allow it to modify their messags.</p>\n<p>This is prototype code so it might not be available all the time.</p>\n<p>After you add it to your team, invite the bot to a channel with <strong>/invite @borges</strong> .\nYou will need to present your Google Translate API credentials using the\n<strong>/borges configure </strong> command only once per Slack team.</p>\n<h2>Implementation</h2>\n<p>The iplementation is in Java and uses <strong>AWS Lambda</strong>, <strong>AWS API Gateway</strong>, <strong>AWS DynamoDB</strong>,\n<strong>AWS S3</strong>, and <strong>AWS Route53</strong> along with <strong>Google Translate API</strong> .  Notice that\nEC2 is not on the list. This application does not reqire any dedicated VM. All\nlogic is implemented in Lambda.</p>\n<p>There are three handlers, one each for the OAuth flow, Slack events, and Slack slash\ncommands.</p>\n<h2>Status</h2>\n<p>This is prototype all the way. Most of the time spent developing this application was\nexperimenting with the Lambda, API Gateway and Slack services and getting them to play\nnicely together. So you will see a lot of duplicate logic and refactoring opportunities\nin the source. Since it wasn't test driven, it needs to be redesigned using TDD to make\nit production-ready.  Depending on the feedback I get, I will decide whether to\nproductionalize it.</p>\n<h2>Run it Yourself</h2>\n<p>All the code to deploy to AWS is in the deploy sub-project. Be sure\nto configure your workstation with the necessary AWS credentials. The easiest way to\ndo that is with the AWS CLI <code>aws configure</code> command.</p>\n<p>You may have to mess with a code path and the domain name to get it running for yourself\nbut in broad strokes, run the main methods from these classes:</p>\n<ul>\n<li>DeployDatabase#main <em>provision a DynamoDB table</em></li>\n<li>DeployCommandHandler#main <em>provision the Lambda Function and API Gateway for handling slash commands</em></li>\n<li>DeployEventHandler#main <em>provision the Lambda Function and API Gateway for handling Slack events</em></li>\n<li>DeployOauthHandler#main <em>provision the Lambda Funcation and API Gateway for the OAuth flows</em></li>\n<li>DeployWebsite#main <em>provision bucket and Route53 domain, and upload web pages</em></li>\n</ul>\n<p>Enjoy</p>\n<p>Icon made by Freepik (<a href=\"http://www.freepik.com/\" rel=\"nofollow\">http://www.freepik.com/</a>) from <a href=\"http://www.flaticon.com\" rel=\"nofollow\">www.flaticon.com</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-translate\">google-translate</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">s3</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag\">dynamodb</span></li><li><span class=\"cp-tag\">route53</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/aztecrex/java-translatebot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/aztecrex/java-translatebot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I developed this as a prototype to try out Lambda and API Gateway."]], ["Opsidian", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://player.vimeo.com/video/184688182?byline=0&amp;portrait=0&amp;title=0#t=\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>In the past it was difficult for us to discuss our AWS infrastructure in Slack. A lot of effort was placed in order to get the whole team to see the same information from AWS. Usually we copy pasted the results from the AWS CLI commands or attached screenshots of the AWS console. One day it hit us - this doesn\u2019t have to be so hard. That\u2019s how Opsidian was born.</p>\n<h2>What it does</h2>\n<p>Opsidian makes it easy for developers to query their AWS using natural language or AWS CLI commands. This allows teams to:</p>\n<ul>\n<li> Collaborate easier on AWS infrastructure without leaving Slack. </li>\n<li> Run more atomic commands than the AWS CLI - making it easier to discuss on Slack.</li>\n<li> Use natural language to let devs who are not AWS experts query and participate in tackling infrastructure challenges without remembering AWS CLI command syntax.</li>\n<li> Use multiple AWS profiles/accounts.</li>\n</ul>\n<p>The bot captures user input queries and uses them to improve our NLP model. This way the bot will get much smarter over time and will gain a better understanding of what the users are asking about.</p>\n<p>For security reasons we allow read-only commands to be performed. We currently have coverage of the following AWS services: Kinesis, SQS, ECS, EC2, API Gateway, RDS, S3, DynamoDB, ELB, EMR, ElastiCache and Lambda.  You can see our full command and AWS service coverage at <a href=\"http://opsidian.ai/commands\" rel=\"nofollow\">http://opsidian.ai/commands</a>.</p>\n<h2>How we built it</h2>\n<p>We used AWS Lambda, AWS API gateway, AWS Kinesis and AWS Dynamodb. Opsidian is written in python, for deployments we use Gordon. We use wit.ai for natural language processing and command recognition.</p>\n<h2>Challenges we ran into</h2>\n<p>We've started developing our own natural language processing solution. We have build a text corpus from Amazon Web Services documentation and trained an LSI model to find commands that are most similar to what the user has typed in. Unfortunately, data from the documentation was not enough to train a good enough model - and that's because our commands are not identical to aws-cli commands (our commands are more atomic).\nWe have created a wit.ai app and we have been teaching it how to recognise services, commands and resources. We are gathering input data and we use it to improve wit.ai's understanding.\nWhen we have a big enough data set we plan to implement our own NLP solution.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are proud of how easy it is to use Opisidian without the need to remember exact commands. We also think that our atomic commands approach makes a lot of sense and simplifies collaborating on AWS infrastructure.</p>\n<h2>What we learned</h2>\n<ul>\n<li> We've learned that Serverless is a perfect solution for writing bots.</li>\n<li> Even though we are experienced developers, we have learned how comfortable it is to use natural language instead of remembering or checking the syntax of commands.</li>\n<li> We have learned (yet again) that machine learning and natural language processing are very difficult to use without having access to big data sets.</li>\n</ul>\n<h2>What's next for Opsidian</h2>\n<p>Our next step is to gather real world feedback on how the bot is used both in small teams as well as in larger organisations. As a first step we have approached Nordcloud, an AWS Premiere consulting partner to test and give us input on the bot by piloting it on different real world deployments with their managed services team. Initial feedback has been encouraging.</p>\n<p>Based on early feedback we plan to extend our AWS service coverage to include Cloud Watch, Billing and IAM.  We might also include integration to third party infra management tools (e.g. DataDogs). We plan to start a company to commercialise Opsidian and introduce a paid for version of the bot with extended functionality.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">gordon</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wit-ai\">wit.ai</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://opsidian.ai\" rel=\"nofollow\" target=\"_blank\" title=\"https://opsidian.ai\">\n<i class=\"ss-icon ss-link\"></i>\n<span>opsidian.ai</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["Litlbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/LC1yNkXnBRo?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Litlbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/452/datas/gallery.jpg\"/>\n<p>\n<i>Gauge retention and get feedback instantly and regularly to adapt teaching methods.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Litlbot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/451/datas/gallery.jpg\"/>\n<p>\n<i>Do polls/feedback to assess retention and engage students.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Litlbot \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/450/datas/gallery.jpg\"/>\n<p>\n<i>Students can ask questions anonymously and together bubble up questions and flag concerns for instructors.</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>Litlbot is a Slack bot that enables realtime interaction with students in class, creating a more engaged classroom and learning experience.</p>\n<h2>Salient Features</h2>\n<p><strong>Digital Assistant for Professors</strong>\nLitlbot allows professors to take a live 'in classroom' pop quiz or take a feedback survey from students. Questions could be based on course content, teaching speed, class notes, assignments, quizzes etc.</p>\n<p><strong>Assess and Adapt</strong>\nProfessors can view feedback results in a live classroom and adapt in real time.</p>\n<p><strong>Anonymous Questions</strong>\nNot every student is comfortable asking questions in a classroom. Litlbot allows students to anonymously ask questions.</p>\n<p><strong>Live Demo</strong>\nHead to <a href=\"https://jropljt2oa.execute-api.us-east-1.amazonaws.com/dev/\" rel=\"nofollow\">https://jropljt2oa.execute-api.us-east-1.amazonaws.com/dev/</a> to see it in action.</p>\n<h2>Architecture of the bot</h2>\n<p><img alt=\"architecture of litlbot\" data-canonical-url=\"https://raw.githubusercontent.com/subodh-malgonde/serverless-slack-bot/master/architecture.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--ibOxDimQ--/https://raw.githubusercontent.com/subodh-malgonde/serverless-slack-bot/master/architecture.png\"/></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">slack-api</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/subodh-malgonde/serverless-slack-bot.git\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/subodh-malgonde/serverless-slack-bot.git\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"https://jropljt2oa.execute-api.us-east-1.amazonaws.com/dev/\" rel=\"nofollow\" target=\"_blank\" title=\"https://jropljt2oa.execute-api.us-east-1.amazonaws.com/dev/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>jropljt2oa.execute-api.us-east-1.amazonaws.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["marbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/RORtDRcSkXk?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"marbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/143/datas/gallery.jpg\"/>\n<p>\n<i>Forward CloudWatch alarms to Slack.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"marbot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/142/datas/gallery.jpg\"/>\n<p>\n<i>Acknowledge, Pass, or Close alerts.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"marbot \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/141/datas/gallery.jpg\"/>\n<p>\n<i>Talk to marbot!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1><a href=\"https://marbot.io\" rel=\"nofollow\">Try it out for free!</a></h1>\n<h2>Inspiration</h2>\n<p>Working as DevOps engineers in various teams we have alway been looking for a tool to share on-call duty among many shoulders without the need for organizational overhead. We came up with the idea of building a chatbot to combine Amazon CloudWatch with Slack.</p>\n<h2>What it does</h2>\n<p>Avoid alert fatigue! Connect Amazon CloudWatch and Slack to spread alerts among your team members.</p>\n<h3>Minimize distraction</h3>\n<p>One engineer, not the whole team, receives an alert. You can focus on your project work instead of being distracted by your pager. marbot escalates unnoticed incidents up to the next engineer or the team.</p>\n<h3>Reuse channel</h3>\n<p>No need to register a new account or install a new app. Just reuse your favorite messaging app: Slack. marbot delivers alarms by sending direct messages. Acknowledging, passing, and closing alerts with Slack-native actions.</p>\n<h3>Simplify organization</h3>\n<p>No need to setup complicated on-call rotations and schedules. Use Slack channels to organize teams. Join a channel to be on-call. marbot respects your DND schedule and snooze setting.</p>\n<h3>Features</h3>\n<ul>\n<li>Receiving alerts from Amazon CloudWatch via Amazon SNS</li>\n<li>Escalating alerts if a team member isn't acknowledging within 5 minutes</li>\n<li>Managing alerts by accepting, passing or closing them</li>\n<li>Analyzing alerts in a daily summary</li>\n<li>Grouping alerts with a dedicated alarm gateway for each channel</li>\n</ul>\n<h2>How we built it</h2>\n<p>We used the following services and tools to create marbot.</p>\n<h3>APIs and Libraries</h3>\n<ul>\n<li>Slack Events API</li>\n<li>Slack Web API</li>\n<li>natural (general natural language facility for Node.js)</li>\n</ul>\n<h3>Services</h3>\n<ul>\n<li>AWS Lambda</li>\n<li>Amazon API Gateway</li>\n<li>Amazon DynamoDB</li>\n<li>Amazon Kinesis Streams</li>\n<li>Amazon Kinesis Analytics</li>\n<li>Amazon SNS</li>\n<li>Amazon SQS</li>\n<li>AWS CloudWatch</li>\n</ul>\n<h3>Tools</h3>\n<ul>\n<li>Serverless Framework</li>\n<li>Node.js</li>\n<li>Jenkins 2.0</li>\n</ul>\n<h2>Challenges we ran into</h2>\n<p>Besides building a great chatbot our goal during this hackathon was to learn about new services and tools. Getting started with new tools and services has been a rewarding challenge for us.</p>\n<ul>\n<li>Using the latest version of the Serverless framework to deploy our chatbot.</li>\n<li>Analyzing data with Amazon Kinesis Analytics.</li>\n<li>Talking to the Slack APIs.</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<p>We were particularly proud of the following three details of our chatbot.</p>\n<h3>Keep It Simple</h3>\n<p>marbot is simple to use. It combines existing concepts to provide a relaxed pager solution. We spent a lot of effort to simplify the onboarding process and day-to-day usage.</p>\n<h3>Slack App Directory</h3>\n<p>marbot was approved by Slack and is listed in the Slack App Directory.</p>\n<h3>Kinesis Analytics</h3>\n<p>marbot is making use of a shiny new service: Amazon Kinesis Analytics. Allowing us to generate accurate daily team statistics.</p>\n<h2>What we learned</h2>\n<ul>\n<li>People do love our sweet marmot mascot.</li>\n<li>Using the Serverless framework to speed up the setup process of a serverless environment.</li>\n<li>How to analyze data streams with Kinesis Analytics.</li>\n</ul>\n<h2>What's next for marbot</h2>\n<p>We are looking forward to improving our Minimum Viable Product based on the feedback from our steadily growing user base. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">kinesis</span></li><li><span class=\"cp-tag\">kinesis-analytics</span></li><li><span class=\"cp-tag\">dynamodb</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://marbot.io/\" rel=\"nofollow\" target=\"_blank\" title=\"https://marbot.io/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>marbot.io</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the Slack integration (Events API, Oauth, Button), SNS integration and NLP.", "I worked on the timer triggering an escalation of alerts. I've also implemented the daily team statistics based on Kinesis Analytics."]], ["CLIve, a serverless Slack bot for AWS", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/bsf54phUltk?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Meet CLIve</h2>\n<p>Hello world, meet CLIve, a serverless Slack bot for AWS. CLIve makes managing your AWS EC2 instances a doddle. He understands natural language, so you can just ask <em>@clive can you stop nginx?</em> and he\u2019ll go ahead and do it. It\u2019s that simple.</p>\n<p><img alt=\"Capture\" data-canonical-url=\"https://s3-ap-southeast-2.amazonaws.com/www.clive.chat/slack/capture.gif\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--OeEVT-qP--/https://s3-ap-southeast-2.amazonaws.com/www.clive.chat/slack/capture.gif\"/></p>\n<p>If one of your instances goes haywire, CLIve can give you a rundown on recent changes to that resource, or even on your entire account.</p>\n<p>If you want to get creative, CLIve also supports custom notifications so you can integrate him into pretty much anything!</p>\n<p>Go to <a href=\"https://clive.chat\" rel=\"nofollow\">https://clive.chat</a>, click on the 'Add to Slack' button to add CLIve to your team.</p>\n<h2>Inspiration</h2>\n<p>The AWS CLI is <strong>awesome</strong>! I use it countless times a day, I can't recommend it enough. The problem? It's a CLI. For newcomers, there are the usual setup and configuration barriers, and then there's the new syntax to learn.</p>\n<p>The CLI setup is not straightforward; there's the awkward permissions, user and access key creation dance to undertake. Then there's the configuration of the CLI itself with profiles and regions to navigate. Once complete, your CLI should be ready to run - but how do you start your IIS box? <em>aws start IIS</em>? Nope. More like, </p>\n<blockquote>\n<p>instanceId=$(aws ec2 describe-instances --filters \"Name=tag:Name,Values=IIS\" | jq -r .Reservations[].Instances[].InstanceId) &amp;&amp; aws ec2 start-instances --instance-ids $instanceId; aws ec2 wait instance-running --instance-ids $instanceId; unset instanceId;</p>\n</blockquote>\n<p>Yikes!</p>\n<p>Whilst the CLI is a necessity for AWS specialists, there's a large number of development and operations teams who require just EC2 start, stop and reboot to get their jobs done; and what's more, they're already getting their work done in Slack. That's the sweet spot where CLIve can help.</p>\n<p>You see, there's no CLI in CLIve. Under the hood he's interacting with the same set of AWS APIs, but he's taking care of the setup and configuration, and removing the need for any special syntax. So you can ask something like <em>@clive please start IIS</em>, and he'll get to it!</p>\n<h2>How does CLIve work?</h2>\n<p>CLIve is serverless. AWS API Gateway and Lambda are CLIve's engine room, as such he uses Slack's Event API to interact with users (rather than Slack RTM).</p>\n<p>When you message CLIve, he tries to make sense of what you said by leveraging Wit.ai's natural language processing capabilities. CLIve has been trained to recognise AWS concepts, such as instance state, whilst using everyday vocabulary. For example, you can ask CLIve to start an instance in many different ways, e.g. \"start\", \"boot up\", \"load up\", etc.</p>\n<p>Once CLIve has worked out what you want him to do, he begins interacting with AWS APIs. He does this by assuming a role and invoking AWS JavaScript SDK functions with Lambda. CLIve takes care of orchestrating the various API calls. For example to start IIS (just as with the CLI); first he'll describe the instances, then he'll issue a start command, and then he'll wait for the instance to report that it's running.</p>\n<p>But how does CLIve help you get setup? To start, there's no need to install any software, just add CLIve to your Slack team. For every chat CLIve is added to, he creates a custom CloudFormation template (to setup the permissions and role he needs to do his thing). Run this template in your AWS account and you're <em>5 clicks</em> away from being setup. The template also contains a custom resource to notify CLIve when you've run the template (so you don't have to copy/paste any CloudFormation outputs). He's not done yet though! Once he receives access to your account, CLIve checks each region for running instances to setup your default region automatically. That's it, not <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html\" rel=\"nofollow\">3</a> <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/installing.html\" rel=\"nofollow\">pages</a> <a href=\"http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\" rel=\"nofollow\">of</a> CLI setup, 5 clicks!</p>\n<h2>How I built CLIve</h2>\n<p>CLIve is a completely serverless bot. He leverages the following AWS services; Lambda, S3, CloudFront, DynamoDB, Route 53, CloudWatch, CloudFormation, CloudTrail, Config, IAM, Certificate Manager, Kinesis, SNS and API Gateway.</p>\n<p>CLIve is built almost entirely from CloudFormation. The exception being Wit.ai.</p>\n<p>CLIve was initially trained, by hand, using the Wit.ai web interface. Now that CLIve is integrated with Slack he learns from real user interactions.</p>\n<p>The flow which is triggered when a user chats to CLIve on Slack is roughly as follows:</p>\n<ol>\n<li>Slack pushes an event to API Gateway</li>\n<li>API Gateway triggers a Lambda function (event put)</li>\n<li>The Lambda function (event put) puts a record onto a Kinesis stream</li>\n<li>Another Lambda function (event get) reads the record from Kinesis and triggers the main Lambda function (core)</li>\n<li>The Lambda function (core) gets operational data from DynamoDB and decrypts it with KMS</li>\n<li>The Lambda function (core) sends the message to Wit.ai for processing</li>\n<li>Wit.ai extracts any known entities from the message</li>\n<li>The Lambda function (core) divines the requested action from the parsed entities and triggers downstream Lambda functions (actions)</li>\n<li>When actions are complete the Lambda function (core) sends a message to Slack</li>\n<li>Slack pushes the message to the user</li>\n</ol>\n<p><img alt=\"Event flow\" data-canonical-url=\"https://s3-ap-southeast-2.amazonaws.com/www.clive.chat/slack/event2.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--AepSXMd9--/https://s3-ap-southeast-2.amazonaws.com/www.clive.chat/slack/event2.png\"/></p>\n<p>The setup flow is similar to the above, although slightly more complex, with a Lambda function (authorize) to handle OAuth and additional resources including SNS to handle per channel configuration.</p>\n<h2>Challenges I ran into</h2>\n<p>Natural language processing isn't ready, yet. CLIve does pretty well responding to expected behaviour. However, humans are mean, and they try to trick him, constantly. Wit.ai, out of the box, doesn't know what to do with completely random messages (more on this below), crazy slang or worse... emojis (which even I, a human, can't translate most of the time).</p>\n<p>Of course there were the usual technical challenges too. Kinesis doesn't appear to like cold starts, and doubles up on some messages. The dreaded API rate limiting of course caused more than its fair share of problems - I mean one lookup a second, when the lookup only supports one event per call (despite being called LookupEvent*<em>s</em>*), argh!</p>\n<blockquote>\n<p>The rate of lookup requests is limited to one per second per account. If this limit is exceeded, a throttling error occurs.</p>\n</blockquote>\n<p><a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.html\" rel=\"nofollow\">AWS CloudTrail LookupEvents</a></p>\n<p>API Gateway doesn't (at the time of writing) support Certificate Manager, so I had to spend $$$ on a third party certificate... In truth, these are minor annoyances; it's pretty amazing how much CLIve can do, given he utilises no EC2 at all and costs the equivalent of a cup of coffee to run!</p>\n<h2>What I learned</h2>\n<p>People want to <strong>date</strong> my bot! Sure, the majority of Slackers use CLIve responsibly, but a significant percentage try to chat him up! It goes without saying that CLIve doesn't know how to respond to such advances. Similarly, users often send him gobbledygook, ask him to book a taxi or some other crazy request. Whilst natural language technology definitely has some way to go, it appears that humans also have a bit of growing up to do!</p>\n<h2>What's next for CLIve, a serverless Slack bot for AWS</h2>\n<p>There's still some tidying up to do! He could use a little bit of error handling TLC and refactoring (especially of the core function). There's also a list of feature requests I'm steadily working through. If you'd like to submit a bug report, or feature request, please do so here, <a href=\"https://clive.zendesk.com/hc/en-us/requests/new\" rel=\"nofollow\">https://clive.zendesk.com/hc/en-us/requests/new</a>.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag\">kinesis</span></li><li><span class=\"cp-tag\">kms</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wit-ai\">wit.ai</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://clive.chat\" rel=\"nofollow\" target=\"_blank\" title=\"https://clive.chat\">\n<i class=\"ss-icon ss-link\"></i>\n<span>clive.chat</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["ServiceBot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/Y3aekudqVjg?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"ServiceBot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/872/datas/gallery.jpg\"/>\n<p>\n<i>Enterprise Platform</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"ServiceBot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/873/datas/gallery.jpg\"/>\n<p>\n<i>Building block</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"ServiceBot \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/870/datas/gallery.jpg\"/>\n<p>\n<i>Contextual Alerts</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"ServiceBot \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/874/datas/gallery.jpg\"/>\n<p>\n<i>Interactive Messaging</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The idea is to create an ubiquitous Enterprise communication platform . This platform enables machines, humans,  and enterprise solutions  to <em>talk</em> and <em>act.</em></p>\n<p>Enterprise IT landscape is witnessing impact of  <strong>disruptive technology</strong>  from consumer world. Next generation workforce comes with the natural expectation of usability at work.</p>\n<p>Secondly, increased complexity in building these Smart Products puts newer challenges for Digital enterprise. \nThe traditional tools such as Email, and spreadsheets though prevalent today, do not meet future expectations.</p>\n<h2>What it does</h2>\n<p>Service Bot showcases how enterprises can use Slack and AWS communication platform to address critical business challenges.</p>\n<p>Service Bot enables following key features that are demonstrated in the video:</p>\n<ul>\n<li>Real time alerts based on telemetry device data</li>\n<li>Present contextual data, saving non-productive time of search and aggregate data</li>\n<li>Intuitive workflow interface</li>\n<li>Interface to enterprise software, extract relevant information and present in actionable format</li>\n</ul>\n<h2>How I built it</h2>\n<p>ServiceBot is built with Serverless computing using AWS Lambda. Being completely new to Slack I experimented quite a bit to finally come up with complete solution. \nThough was having background of Lambda  API Gateway was new to me. I started with few samples with Bot Kit and Claudia Bot builder.</p>\n<p>Since I am proficient in Java,  I used it as a Programming language. despite known issues of use of Java for real time response. In the end , that turned to be good choice for me. I used Eclipse Lambda plugin for development and debugging, live log feature was a extremely useful.</p>\n<p>Overall I used lot of different Slack API to meet my solution goals. </p>\n<ul>\n<li>Oauth 2.0</li>\n<li>Events API</li>\n<li>Messaging (post message, chat update, etc)</li>\n<li>Interactive Messages</li>\n</ul>\n<p>To capture all experiences l recorded a technology <strong>under the hood</strong> video (separate from demo video). The video is available on my try out website.</p>\n<h2>Challenges I ran into</h2>\n<p>I ran into multiple challenges as I was using so many platform capabilities. </p>\n<ul>\n<li>IoT Action handler troubleshooting</li>\n<li>API gateway, mapping REST to JSON, stage variables ,etc</li>\n<li>Lambda JVM warm up time. for Slack message handler response</li>\n</ul>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Architecture is fully Cloud native Serverless, secure, and responsive. In the end there is <strong>Joy</strong> in accomplishing what I envisioned.</p>\n<h2>What I learned</h2>\n<p>Newer paradigms of programming , use of mature Slack API.  The competition has sparked interest in me to pursue and promote server less computing.</p>\n<h2>What's next for Service ChatBot</h2>\n<p>I would be showcasing the solution inside my organization. There is opportunity to develop a few integrations with enterprise solutions. Then it will be an extensible platform, helping create Enterprise Bots faster.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag\">aws-iot</span></li><li><span class=\"cp-tag\">aws-api-gateway</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://servicebot.valueinnovation.co.in/\" rel=\"nofollow\" target=\"_blank\" title=\"http://servicebot.valueinnovation.co.in/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>servicebot.valueinnovation.co.in</span>\n</a></li>\n<li><a href=\"https://github.com/MaheshBeri/servicebot.git\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/MaheshBeri/servicebot.git\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://www.slideshare.net/MAHESHSA719/service-bot?next_slideshow=1\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.slideshare.net/MAHESHSA719/service-bot?next_slideshow=1\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.slideshare.net</span>\n</a></li>\n<li><a href=\"http://www.slideshare.net/MAHESHSA719/service-bot-66532914\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.slideshare.net/MAHESHSA719/service-bot-66532914\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.slideshare.net</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["From concept to realization, I could work on every aspect of technology involved in making of ServiceBot.\nLong hours in last few weeks to make this happen."]], ["Eva", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/7FoiyoV_-bk?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Eva is a virtual travel assistant for your Slack team. She hooks you up with travel.cloud, our team-based travel booking tool that sets out to challenge the traditional approach to corporate travel management.</p>\n<p>Only launched 3 months ago, travel.cloud is AWS to the very core, and as its fundamental ethos is \u201ctravel, but for teams\u201d it seems like a perfect match-up with Slack! So we already had \"build a Slackbot\" somewhere a way down our roadmap when we spotted the contest.</p>\n<p>Organising business travel is a pain in the neck. Getting everyone\u2019s requirements together, scouring the internet for hotels, getting everyone\u2019s passport details for flights, then distributing all the travel confirmations back out; it's a complete time sink. To paraphrase a common quote: \u201cyour organization is not in the business of arranging travel, yet a significant amount of time and money is spent doing just that!\u201d Well, travel.cloud fixes all that, and Eva is going to fix it even better.</p>\n<h2>What it does</h2>\n<p>By connecting you up to the power of travel.cloud, Eva helps you find flights, hotels and trains from a wide range of suppliers and gets them booked for you and your teammates. Making her home in Slack she increases the power and usability of travel.cloud: you can ask her to find a hotel or a train in a public channel, and then everyone can look at the pictures or discuss the departure times. Once everyone is agreed, she\u2019ll make sure it\u2019s all included in one checkout and travel.cloud will take care of distributing confirmations and accounting for the costs.</p>\n<p>She already has some other nifty add-ons, allowing you to get your travel.cloud notifications directly in Slack and helping you when you arrive at a hotel, airport or train station by having your check-in details to hand.</p>\n<h2>How we built it</h2>\n<p>Eva leverages multiple parts of the AWS infrastructure to allow us deliver a truly serverless slack bot. Deployed using cloud formation, the first step was to build some simple functions that would allow us to verify our application with the Slack event service so that we started to receive messages on a push basis, the first iteration of Eva simply echoed your chats back to you.</p>\n<p>Once basic communication was tackled we had to authenticate with our own services, leveraging AWS KMS we could trigger an OAuth process with our own services joining slack users to their travel.cloud profiles and storing state in DynamoDB fully encrypted by the KMS service. Beyond that its simple text analysis allowing Eva to respond to various queries by integrating with the travel.cloud API.</p>\n<h2>Challenges we ran into</h2>\n<p>Lost track of how many hours we spent trying to get Eva to appear active in Slack - we never did solve this and have logged the issue with Slack. </p>\n<p>It also took us some deep thought to get the authentication piece right with our own travel.cloud microservices - Eva is only our second client application for travel.cloud!</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>First things first, getting her done! We decided on this last minute, and just packed 7 engineers into a house in the country for a week. With no experience of Slack bots (but luckily, growing experience of AWS Lambda) we're very happy to have an Eva that, right now, today, could really help Slack teams with their travel planning.</p>\n<p>The other thing we love is this proof that the microservice APIs we've built for travel.cloud are versatile and fit for use by other client applications, like our Slack bot.</p>\n<h2>What we learned</h2>\n<p>We learned that NLP is very hard, especially in a hurry. We got it integrated, but then found that it was trampling over our existing interactions and making way too many assumptions about what the user was trying to say. Perhaps it was the library we chose, but it just seemed way too confident in its interpretations.</p>\n<p>We also quickly learned that in order to be engaging and feel like a proper assistant, Eva needs to have a lot more interactions at her fingertips than just the travel.cloud commands we really wanted to enable.</p>\n<h2>What's next for Eva</h2>\n<p>We haven\u2019t gone beyond some experimentation into NLP - we want her to be really helpful first, nearly human second. But travel is a complicated business, so Eva\u2019s ability to try and answer any question fired at her is really going to help make her an invaluable assistant, so we\u2019ll have to crack it soon.</p>\n<p>Functionally, we're working on one-click booking in travel.cloud which will allow Eva to book things for you without the \"final step\" of having to go into travel.cloud and complete the checkout yourself. We also want to work on her teamworking aspects more: so if you want to book a flight for your colleagues, she can run around asking them to provide any missing passport details needed to complete the booking.</p>\n<p>That's short term. Long term? She can spot when you've got a flight coming up, and offer to call you a cab. Let you know about the weather where you're going, and how soon you should leave to make that train. In the team space she can make sure everyone is sitting next to each other on their flight, or let you know where in the world your whole team are currently. Basically take all the sweat out of organising travel for an entire team.</p>\n<h2>Installing Eva</h2>\n<p>Eva is a slack bot user and will need to be installed into your team as a slack app before she can be used to aid you in your travel needs. This installation can be started by navigating to <a href=\"http://travel.cloud/eva.html\" rel=\"nofollow\">http://travel.cloud/eva.html</a> in your browser and clicking on the \u2018Add to slack\u2019 button under the icon of lovely Eva. This will lead you to the application authorization page where you will be asked to grant access to travel.cloud which in turn will add a bot user who represents Eva. Clicking the \u2018Authorize\u2019 button here will complete the installation. Eva is now available for use in Slack! </p>\n<h2>Using Eva</h2>\n<p>Once in Slack you can talk to Eva like any other user. She responds to direct messages and can be invited to your current public and private channels. In these channels she will only listen to posts beginning \"@eva\". All of Eva\u2019s common commands can be found by asking her to help you, but she likes to chat too so don\u2019t be scared to ask her a few random questions and see if she is knowledgeable in that area.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">amazon-lambda</span></li><li><span class=\"cp-tag\">amazon-api-gateway</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag\">amazon-kms</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-sns\">amazon-sns</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/travel-cloud/eva\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/travel-cloud/eva\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://travel.cloud/eva.html\" rel=\"nofollow\" target=\"_blank\" title=\"http://travel.cloud/eva.html\">\n<i class=\"ss-icon ss-link\"></i>\n<span>travel.cloud</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I am one of the developers of Eva. I helped create the integration with travel.cloud APIs and also produced a daily update during our hack week.", "I worked on building initial routing of messages and the slack authorisation process. As well as various other commands like support for listening to notifications ", "I helped the team with developing the flight search commands that integrates with the travel.cloud APIs and also assisted on developing the adapter for communicating with Slack to send messages.", "I'm the product owner, so mainly I made the tea and cooked dinners.", "I mostly helped design and implement the OAuth 2.0 piece to enable Eva to make authorised calls to our API on the behalf of our authenticated users. This said, my colleagues supported this implementation as we worked as a team with each of us adding a bit to bring Eva to life.", "I developed the hotel search command that integrates with travel.cloud. ", ""]], ["AWS-Service-Health-Chatbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/rULEXvCmxHY?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"AWS-Service-Health-Chatbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/220/datas/gallery.jpg\"/>\n<p>\n<i>Screenshot </i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>AWS Service Health Dashboard slackbot</h1>\n<h2>Usage</h2>\n<p>There are two primary ways which the service health check slackbot works.</p>\n<ol>\n<li><p>Custom slash command:</p>\n<pre class=\"language-nolang\"><code>/aws_status\n</code></pre></li>\n<li><p>Scheduled via Cloudwatch Event</p></li>\n</ol>\n<p><img alt=\"Example\" data-canonical-url=\"https://github.com/faultymonk/AWS-Service-Health-Chatbot/blob/master/screenshot.png?raw=true\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--3kIbEHdk--/https://github.com/faultymonk/AWS-Service-Health-Chatbot/blob/master/screenshot.png%3Fraw%3Dtrue\"/></p>\n<h2>Slack setup (part 1)</h2>\n<h3>Incoming Webhooks</h3>\n<ol>\n<li>Build a <code>Custom Integration</code> using <code>Incoming WebHooks</code>to the desired channel (e.g. #aws_health).</li>\n<li>Add the incoming webhooks integration and enter \"AWS Health\" for the <code>Customize Name</code> (additionally customize the Descriptive Label and icon if desired).</li>\n<li>Note the <code>Webhook URL</code> and save the settings.</li>\n</ol>\n<h2>AWS setup</h2>\n<h3>Export AWS credentials</h3>\n<p>The CLI commands below require the following environmental variables:</p>\n<pre class=\"language-sh\"><code>AWS_DEFAULT_REGION=us-west-2\nAWS_DEFAULT_PROFILE=aws_profile\nAWS_SECRET_ACCESS_KEY=########################################\nAWS_ACCESS_KEY_ID=AKIA################\n</code></pre>\n<h3>Create a <code>Simpledb</code> domain:</h3>\n<pre class=\"language-sh\"><code>$ aws sdb create-domain \\\n--domain-name aws-status\n--profile aws_profile\n</code></pre>\n<h3>Create an <code>IAM role</code></h3>\n<p>(and capture output to $ROLE_ARN)</p>\n<pre class=\"language-sh\"><code>$ ROLE_ARN=$(aws iam create-role \\\n--role-name lambda_aws_status \\\n--assume-role-policy-document '{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Principal\": {\"Service\": \"lambda.amazonaws.com\"},\n    \"Action\": \"sts:AssumeRole\"\n  }\n}' \\\n--query 'Role.Arn' \\\n--output text)\n</code></pre>\n<h4>Attach an inline <code>IAM policy</code> to the <code>IAM role</code></h4>\n<pre class=\"language-sh\"><code>$ aws iam put-role-policy \\\n--role-name lambda_aws_status \\\n--policy-name lambda_aws_status \\\n--policy-document file://lambda_aws_status_policy.json\n</code></pre>\n<h3>Creating the Lambda .zip package</h3>\n<ol>\n<li><p>Edit <code>aws_status.py</code> and edit as needed (i.e. provide Slack channel webhook URL).</p></li>\n<li><p>Create the <code>Lambda</code> package:</p></li>\n</ol>\n<pre class=\"language-sh\"><code>$ sh create_lambda_package.sh\n</code></pre>\n<h3>Create a new Lambda function and upload</h3>\n<pre class=\"language-sh\"><code>$ aws lambda create-function \\\n--function-name aws_status \\\n--zip-file fileb://aws_status.zip \\\n--role $ROLE_ARN \\\n--handler aws_status.lambda_handler \\\n--runtime python2.7 \\\n--timeout 5\n</code></pre>\n<h3>Create a REST API endpoint</h3>\n<pre class=\"language-sh\"><code>$ ACCT_ID=$(aws ec2 describe-security-groups \\\n--group-names 'Default' \\\n--query 'SecurityGroups[0].OwnerId' \\\n--output text) ; \\\necho \"account_id: $ACCT_ID\"\n\n$ API_ID=$(aws apigateway create-rest-api \\\n--name aws_status \\\n--query 'id' \\\n--output text) ;\\\necho \"api_id: $API_ID\"\n\n$ ROOT_ID=$(aws apigateway get-resources \\\n--rest-api-id $API_ID \\\n--query 'items[].id' \\\n--output text) ;\\\necho \"root_id: $ROOT_ID\"\n\n$ RESOURCE_ID=$(aws apigateway create-resource \\\n--rest-api-id $API_ID \\\n--parent-id $ROOT_ID \\\n--path-part aws_status \\\n--query 'id' \\\n--output text) ;\\\necho \"resource_id: $RESOURCE_ID\"\n\n$ aws apigateway put-method \\\n--rest-api-id $API_ID \\\n--resource-id $RESOURCE_ID \\\n--http-method GET \\\n--authorization-type NONE\n\n$ aws apigateway put-integration \\\n--rest-api-id $API_ID \\\n--resource-id $RESOURCE_ID \\\n--http-method GET \\\n--type AWS \\\n--integration-http-method POST \\\n--uri \"arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:$ACCT_ID:function:aws_status/invocations\"\n\n$ aws apigateway put-integration-response \\\n--rest-api-id $API_ID \\\n--resource-id $RESOURCE_ID \\\n--http-method GET \\\n--status-code 200 \\\n--response-templates \"{\\\"application/json\\\": \\\"\\\"}\"\n\n$ aws apigateway put-method-response \\\n--rest-api-id $API_ID \\\n--resource-id $RESOURCE_ID \\\n--http-method GET \\\n--status-code 200 \\\n--response-models \"{\\\"application/json\\\": \\\"Empty\\\"}\"\n\n$ aws apigateway create-deployment \\\n--rest-api-id $API_ID \\\n--stage-name prod\n\n$ aws lambda add-permission \\\n--function-name aws_status \\\n--statement-id apigateway-aws_status \\\n--principal apigateway.amazonaws.com \\\n--action lambda:InvokeFunction \\\n--source-arn \"arn:aws:execute-api:us-west-2:$ACCT_ID:$API_ID/*/GET/aws_status\"\n</code></pre>\n<h3>Optionally create a scheduled event (recommended)</h3>\n<pre class=\"language-sh\"><code>$ aws events put-rule \\\n--name lambda_aws_status_cron_3m \\\n--schedule-expression \"rate(3 minutes)\"\n\n$ FUNC_ARN=$(aws lambda get-function \\\n--function-name aws_status \\\n--query 'Configuration.FunctionArn' \\\n--output text)\n\n$ aws events put-targets \\\n--rule lambda_aws_status_cron_3m \\\n--targets Id=1,Arn=$FUNC_ARN\n</code></pre>\n<h2>Slack setup (part 2)</h2>\n<h3>Custom Slash Command</h3>\n<ol>\n<li>Build another Custom Integration with <code>Slash Commands</code>.</li>\n<li>Enter \"/aws_status\" in the <code>Choose a Command</code> field then <code>Add Slash Command Integration</code>.</li>\n<li>Enter \"https://$API_ID.execute-api.us-west-2.amazonaws.com/prod/aws_status\" as <code>Invoke URL</code> where <code>$API_ID</code> is the API Gateway REST API ID.</li>\n<li>Set <code>Method</code> to <code>GET</code>.</li>\n<li>Enter \"AWS Health\" for <code>Customize Name</code>.</li>\n<li>Under <code>Autocomplete help text</code>, check <code>Show this command in the autocomplete list</code> and enter \"Check AWS Service Health Dashboard for events\".</li>\n<li><code>Save Integration</code>.</li>\n</ol>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">xslt</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/shell\">shell</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/faultymonk/AWS-Service-Health-Chatbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/faultymonk/AWS-Service-Health-Chatbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Design Engine", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/Z83Or6V9gCk?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The bot came about just wanting to play around some AI models, and use them in a practical and fun way.</p>\n<h2>What it does</h2>\n<p>@deio paints any picture you share with him in a number of famous painting styles, like <strong>StarryNight</strong>, <strong>cCubist</strong> or <strong>Serrat</strong>. </p>\n<h2>How I built it</h2>\n<p>@deio was built using Slack's Event API, AWS Lambda and API Gateway together with an EC2 server.</p>\n<h2>Challenges I ran into</h2>\n<p>There were various challenges making the bot respond in a timely manner. First off, getting the AI model working at near real-time velocity presented various challenges. The models run better in GPU, requiring a lot of configurations in order to have them run smoothly. Afterwards, connecting the Lambda functions woth EC2 instances was also tricky.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Setting up the whole architecture, and making it work so that the user can simply share an image and get an awesome painting back. The big part about building awesome things is that the hide all the complexity from the user.</p>\n<h2>What I learned</h2>\n<p>I learned to love the Event/Action model architecture. It is awesome, and Lambda gives incredible agility.</p>\n<h2>What's next for Design Engine</h2>\n<p>We want to integrate @deio (the bots name) better with our platform DesignEngine.io and help teams that have heavy design become more collaborate and improve their workflow.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li></ul>\n</div>\n</div>", [""]], ["Pregnancy Bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/rzyK4lNvetQ?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>It started 6 years ago, when my wife was pregnant for the first time. That days, Android apps were the hottest thing. I decided to develop my <a href=\"https://play.google.com/store/apps/details?id=com.romkuapps.enfree.duedate\" rel=\"nofollow\">first</a> Android app and it was about Pregnancy. Later on, I developed <a href=\"https://play.google.com/store/apps/details?id=com.romkuapps.tickers\" rel=\"nofollow\">another</a> Pregnancy Android app that created beautiful and unique widgets. Today, my wife is pregnant, again, and Bots are the next hottest thing. Here I am. Again ;)</p>\n<p>Slack is a product for teams; small and big. I think, every team should give a place for sharing and be informed about future mothers and fathers in the team. It's fun, exciting, enlightening and touching.</p>\n<h2>What it does</h2>\n<ul>\n<li>Set duedate and check your daily status.</li>\n<li>Read about each of the pregnancy weeks.</li>\n<li>Play and learn through quiz games.</li>\n<li>Check who is pregnant in your team.</li>\n</ul>\n<h2>How I built it</h2>\n<p>With:</p>\n<ul>\n<li>AWS Lambda</li>\n<li>AWS Gateway API</li>\n<li>AWS RDS (MySQL) </li>\n<li>AWS EC2 (Ubuntu)</li>\n<li>AWS S3</li>\n<li>AWS CloudWatch</li>\n<li>AWS Route 53</li>\n<li>Java + Golang + <strong>Coffee</strong></li>\n</ul>\n<h2>What's next for Pregnancy bot</h2>\n<ul>\n<li>Improve latency in responses and clean the code ;)</li>\n<li>Add private bot in addition to commands.</li>\n<li>Add much more cool features.</li>\n<li>Sync and connect the Bot to Mobile apps.</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/golang\">golang</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/react\">react</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://pregnancybot.com\" rel=\"nofollow\" target=\"_blank\" title=\"http://pregnancybot.com\">\n<i class=\"ss-icon ss-link\"></i>\n<span>pregnancybot.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Designed, developed and QA (as much as I could in two weeks)."]], ["On-demand Github over Slack", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/QsnfZQzQ768?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Code walkthroughs, changes, and discussions over slack directly.</p>\n<h2>What it does</h2>\n<p>Fetches information using Github API and displays it directly over a configured slack channel</p>\n<h2>How I built it</h2>\n<p>Lambada framework is awesome. And Github API. All in Java.\nServerless tech using Lambda + API gateway + S3 + Cloudformation</p>\n<h2>Challenges I ran into</h2>\n<p>I had to define the template for Labmada framework which can translate x-www-form-urlencoded request, that took quite some time</p>\n<p>Then Github rate limiting</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>\"x-www-form-urlencoded\" support for Lambada</p>\n<h2>What I learned</h2>\n<p>Automating AWS deployments</p>\n<h2>What's next for On-demand Github over Slack</h2>\n<p>Fetch more info like Issues, Comments, etc</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/bluejeansnet/slack-github-extra\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/bluejeansnet/slack-github-extra\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Its all me!"]], ["Games of ni", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/yPUibVuOUX8?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Games of ni \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/189/datas/gallery.jpg\"/>\n<p>\n<i>Decision is taken</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Games of ni \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/190/datas/gallery.jpg\"/>\n<p>\n<i>You create, you bid</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Games of ni \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/191/datas/gallery.jpg\"/>\n<p>\n<i>There's Economics behind it! For real =)</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>Deciding on things is hard. Deciding on things together is harder. Dividing chores, deciding on food and movies, voting, managing, - any group decisions. </p>\n<p>The core idea behind the Games of Ni comes from classic auction theory and mechanism design, and is backed by research of a large number of Nobel Prize economists thinking on the subject (William Vickrey and Roger Myerson to name just a few).</p>\n<p>With Games of Ni you create a game and vote for different options in it. When the game is over, the bot announces the winning option and the compensation to everyone else. Done, decision is taken.</p>\n<p>You can read how and why it works on <a href=\"https://kurogitsune.github.io/gamesofni\" rel=\"nofollow\">https://kurogitsune.github.io/gamesofni</a> </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag\">amazon-lambda</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://gamesofni.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://gamesofni.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>gamesofni.com</span>\n</a></li>\n<li><a href=\"https://slack.com/apps/A2FMC2GB0-games-of-ni\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack.com/apps/A2FMC2GB0-games-of-ni\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack.com</span>\n</a></li>\n<li><a href=\"https://slack.com/oauth/authorize?scope=incoming-webhook,commands&amp;client_id=61111185110.83726084374\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack.com/oauth/authorize?scope=incoming-webhook,commands&amp;client_id=61111185110.83726084374\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the backend. Done all the Lambda and integration code and configured slack app.", ""]], ["Manage Google calendar events from slack channel", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/WnY1R09VDEE?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Manage Google calendar events from slack channel \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/921/datas/gallery.jpg\"/>\n<p>\n<i>Chatbot Serverless Arch</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Your team uses Slack for productivity and collaboration. Why not increase their productivity by enabling them access their shared calendar (Google Calendar in this case) right from the Slack channel? </p>\n<h2>What it does</h2>\n<p>The custom Slack - Google Calendar integration helps your team  lookup, add, update calendar events and share their schedule with each other without having to open the Calendar application separately. </p>\n<h2>How I built it</h2>\n<p>The integration leverages slashcommand feature of slack by integrating it with AWS Serverless backend.</p>\n<p>The Slack command triggers a lambda function via API Gateway\nThe Primary lambda function returns an acknowledgement to slash channel that the command is being processed\nThe Primary lambda triggers worker lambda using SNS\nThe worker lambda accesses the slash Channel token and Google API secret access information from a S3 bucket\nThe worker lambda connects with Google Calendar API and accesses the Google Calendar\nThe worker lambda returns Google Calendar event information back to original Slack Channel </p>\n<h2>Challenges I ran into</h2>\n<p>To overcome the 3 seconds default timeout for slash channel by splitting the lambda functions</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Integration of distinct services (Slack &amp; Google Calendar) in a secure and efficient manner using a true serverless architecture.</p>\n<h2>What I learned</h2>\n<p>Being able to build a purposeful cloud solution quickly and securely without having to build and manage a server infrastructure. Best practices and integrations of lambda &amp; API Gateway with external services such as Slack and Google API</p>\n<h2>What's next for Manage Google calendar events from slack channel</h2>\n<p>Next step for this project would be to automate calendar events into action using chatbot. (Example- trigger production deployment or order pizza for the team at event times)</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag\">sns</span></li><li><span class=\"cp-tag\">s3</span></li><li><span class=\"cp-tag\">kms</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google--2\">google</a></span></li></ul>\n</div>\n</div>", [""]], ["ToneBot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/s22eUMBRF5k?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"ToneBot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/221/datas/gallery.jpg\"/>\n<p>\n<i>Analyze Option</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"ToneBot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/222/datas/gallery.jpg\"/>\n<p>\n<i>History Option</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>To create something new and exciting</p>\n<h2>What it does</h2>\n<p>Analyzes the tone of the chat messages using IBM Watson's Tone Analyzer API</p>\n<h2>How I built it</h2>\n<p>Using python, aws lambda and ibm watson </p>\n<h2>Challenges I ran into</h2>\n<p>Figuring out how AWS services interact with each other, how lambda works, serverless architecture\nResponding to slack properly and timely</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Creating a bot, which will be helpful for sales representatives who are on Slack</p>\n<h2>What I learned</h2>\n<p>NLP is very deep and complex, Serverless Architecture</p>\n<h2>What's next for ToneBot</h2>\n<p>Remove negative tone from chat and suggest a positive replacement.\nUsing time stamps to retrieve messages rather than count.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ibm-watson\">ibm-watson</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/priyankcommits/tone_bot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/priyankcommits/tone_bot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["HABBY", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/SYQ7Ha33KuU?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"HABBY \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/264/datas/gallery.jpg\"/>\n<p>\n<i>async daily scrum status channel</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"HABBY \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/265/datas/gallery.jpg\"/>\n<p>\n<i>HABBY reminding about check-in and time report</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Working in geographically dispersed team creates additional challenge. Daily scrums usually involve some online video / chat tool, need special / extra room with equipment, setting up and collecting all people there. That can add to standard 15 minutes even next quarter and can hinder organizing stand-up in the time convenient for the team,  especially when members don't start work at the same time. All that causes daily scrums often catch developers in the middle of their best concentration time in the morning, break what they work, switch context to stand-up and after - switch again and get up to speed with work. </p>\n<ul>\n<li>An hour of best time lost for development.\nThe way out could be asynchronous stand-ups. Dedicated channel on Slack is very well suited for this purpose.</li>\n</ul>\n<h2>What it does</h2>\n<p>HABBY is to facilitate daily check-in \u2013 as soon as somebody logs in, they should answer \"3 scrum questions\" on a dedicated status channel. And before logging of, say bye-bye to the team. \nAdditionally, that can serve also the purpose of time tracking, both personally (\"I need to leave early, will catch up tomorrow\" scenario) and for managers.</p>\n<h2>How I built it</h2>\n<p>Used Serverless framework.\nIntegrated Slack Events API for handling incoming messages.\nCron'ed call to Slack Web API for checking presence of users.\nRedis for persistence.</p>\n<h2>Challenges I ran into</h2>\n<ul>\n<li>Adopt with Serverless Architecture and \u00a0Serverless Framework\u00a0</li>\n<li>Configuring API Gateway for Slack App authorization (esp. redirection)</li>\n</ul>\n<h2>Accomplishments that I'm proud of</h2>\n<ul>\n<li>Slack integration</li>\n<li>Simple but usuful bot experience for user</li>\n</ul>\n<h2>What I learned</h2>\n<ul>\n<li>Serverless architecture</li>\n<li>Learnt new AWS Lambda, \u00a0API Gateway</li>\n<li>Pros&amp;Cons of AWS Services</li>\n</ul>\n<h2>What's next for HABBY</h2>\n<ul>\n<li>Using HABBY in our team and more features (BRB, holidays, responses to reminder about check-in, learning bye-bye and other phrases )</li>\n<li>Using experience for Alexa integration :)</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag\">slack-events-api</span></li><li><span class=\"cp-tag\">slack-web-api</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/redis\">redis</a></span></li><li><span class=\"cp-tag\">serverless-framework</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/mareklabuzeksmt/HABBY/blob/master/HabbyInstallationManual.pdf\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/mareklabuzeksmt/HABBY/blob/master/HabbyInstallationManual.pdf\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Concept and functional spec", "", "", "", ""]], ["Slack Retro Bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/GZ9i6ugfC5s?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Slack Retro Bot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/122/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I love the concept of the Agile Retrospective but it can be difficult to get everyone together. I built this bot so I could better collaborate with teams and I love the concept of serverless architecture.</p>\n<h2>What it does</h2>\n<p>It steps a group of users through a basic retrospective with voting support via native Slack emoji responses.</p>\n<h2>How I built it</h2>\n<p>It has a few components:</p>\n<ul>\n<li>A basic kappa build script for deploying and invoking against testing json</li>\n<li>A manual boto3 script for provisioning the DynamoDB, API Gateway, Lambdas and all the associated permissions (I would have used CloudFormation but I wanted to learn the internal guts of AWS)</li>\n</ul>\n<h2>Challenges I ran into</h2>\n<p>I originally chose SimpleDB as a data source and a synchronous callback system. This worked until things got a bit slower and I started bumping up against the limits of the 3 second cutoff time for Slack responses.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I'm proud that I managed to implement a manual infrastructure script as it now feels like I have a much better handle on API Gateway and IAM internals. At the last minute I ripped out SimpleDB and implemented DynamoDB and an SNS pub/sub queue for invoking my lambda!</p>\n<h2>What I learned</h2>\n<p>This was one of my first big foreys into the AWS world and I think I'm in love with serverless arch.</p>\n<h2>What's next for Slack Retro Bot</h2>\n<p>UX improvements, better finishing scripts, S3 bucket uploads of results!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-sns\">amazon-sns</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://ahmeni.net/retrobot\" rel=\"nofollow\" target=\"_blank\" title=\"http://ahmeni.net/retrobot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>ahmeni.net</span>\n</a></li>\n<li><a href=\"https://slack-lambda-retro.herokuapp.com\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack-lambda-retro.herokuapp.com\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack-lambda-retro.herokuapp.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["RSS/BOT", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/D1gCw5_OIno?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"RSS/BOT \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/123/datas/gallery.jpg\"/>\n<p>\n<i>Architecture Overview</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Motivation</h2>\n<p>We use Slack intensively within our team to share knowledge. We created a dedicated news channel to post relevant articles, but usually don't have time to read the all the stuff during working hours. It's also not so easy to keep track of all articles you've already read. RSSBot can help.</p>\n<h2>What it does</h2>\n<p>RSSBot organizes all shared links within a channel and generates a RSS feed which can be imported in any RSS reader. Now it's easier to read shared articles from Slack while on the go e.g. in the subway.</p>\n<h2>How I built it</h2>\n<p>The bot runs as micro service on AWS Lambda leveraging DynamoDB and SNS to decouple asynchronous tasks (e.g. to fetch additional metadata of the link). To fully automate deployment of the micro service in multiple stages I used CloudFormation and Serverless.com framework.</p>\n<h2>Challenges I ran into</h2>\n<p>The main challenge was to accomplish an automated deployment of the AWS infrastructure with serverless.com and pass dynamic references to the micro services within a multi-stage environment. </p>\n<h2>How to test the bot</h2>\n<p>The easiest way is with Slack's outgoing webhook:</p>\n<ul>\n<li>Open: <a href=\"https://my.slack.com/services/new/outgoing-webhook\" rel=\"nofollow\">https://my.slack.com/services/new/outgoing-webhook</a></li>\n<li>Leave trigger words empty</li>\n<li>Use the following URL in the URL(s) field: <a href=\"https://7b11on0k17.execute-api.eu-west-1.amazonaws.com/dev/hook/slack/out\" rel=\"nofollow\">https://7b11on0k17.execute-api.eu-west-1.amazonaws.com/dev/hook/slack/out</a></li>\n<li>You are ready!</li>\n</ul>\n<p>Alternative: host your own RSSBot</p>\n<ul>\n<li>Download the source code from git and follow the simple steps in README.md</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">serverless</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-sns\">amazon-sns</a></span></li><li><span class=\"cp-tag\">amazon-cloudformation</span></li><li><span class=\"cp-tag\">fullstack</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/oknoeno/rssbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/oknoeno/rssbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I developed the full stack using the serverless.com framework for deployment."]], ["Am\u00e9lie", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/v5HVE36tQ7Y?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Am\u00e9lie \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/401/659/datas/gallery.jpg\"/>\n<p>\n<i>Am\u00e9lie</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>1 in 5 people experience a mental health issue every year\n8 people die every day in Australia more than road deaths or cancer\n25% of 1M+ people calling support services are not answered</p>\n<h2>What it does</h2>\n<p>Amelie is an artificial intelligent chatbot that can help people discover how to improve their mental health; \nMental health providers can use Amelie to triage their call volume and identify people at risk.\nAmelie can also help check in on people who have been discharged but are still at risk.</p>\n<h2>How we built it</h2>\n<p>Developed conversational search capability to discover domain specific content.\nDeployed to serverless architecture leveraging AWS Lambda, DynamoDB, Elastic Search and S3\nLeverage 3rd party apis for NLP and real-time messaging</p>\n<h2>Challenges we ran into</h2>\n<p>Conversational AI is a challenge, and requires lots of data to build sophisticated models.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Slack integration for management and triage of calls.</p>\n<h2>What we learned</h2>\n<p>NLP is hard, and needs lots of data.</p>\n<h2>What's next for Amelie</h2>\n<p>Collect more data, so can build more intelligent platform.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/elasticsearch\">elasticsearch</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://amelie.ai\" rel=\"nofollow\" target=\"_blank\" title=\"https://amelie.ai\">\n<i class=\"ss-icon ss-link\"></i>\n<span>amelie.ai</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["pdbot - Serverless PagerDuty Slack Bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/4b2BvdHvl_c?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<p>My bot is called \u201cpdbot\u201d, short for Pager Duty SlackBot. I currently work in a devops role and we heavily utilize Slack and PagerDuty with a rotating on-call schedule. Often other people at work need to know who is currently on-call and how to get in touch with them. I investigated various PagerDuty and Slack integrations, but I couldn\u2019t find anything that solved these specific problems. So, I\u2019ve written this simple bot to do so. This bot allows you to query the current on-call person and create new Pager Duty events that will reach them, containing text that you send to the bot.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">rest</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/joshscurtis/pdbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/joshscurtis/pdbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Igor", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/QtNdC8LsWso?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Igor \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/029/datas/gallery.jpg\"/>\n<p>\n<i>AWS Status details</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Igor \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/030/datas/gallery.jpg\"/>\n<p>\n<i>Support for multiple languages</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Igor \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/032/datas/gallery.jpg\"/>\n<p>\n<i>Get the weather</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Igor \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/034/datas/gallery.jpg\"/>\n<p>\n<i>Ask for a random Tumblr</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>Igor</h1>\n<p>Igor is a Slack Slash command that acts like a bot. The code is written in Go and is designed to be run on AWS Lambda through a NodeJS wrapper. All commands are handled through plugins, making it extendable.</p>\n<h1>Available Plugins</h1>\n<ul>\n<li><a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-Help\" rel=\"nofollow\">Help</a>, explains Igor</li>\n<li><a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-Weather\" rel=\"nofollow\">Weather</a>, get the current weather and forecasts</li>\n<li><a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-(Random)-Tumblr\" rel=\"nofollow\">(Random) Tumblr</a> image, get a random image from a Tumblr blog</li>\n<li><a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-Status\" rel=\"nofollow\">Status</a>, get the current status of webservices like GitHub and Bitbucket</li>\n<li><a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-XKCD\" rel=\"nofollow\">XKCD</a>, get the latest (or a specific/random) XKCD comic</li>\n<li><a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-Remember\" rel=\"nofollow\">Remember</a>, save and display links to photos</li>\n</ul>\n<h1>Language support</h1>\n<p>Igor is built to understand multiple languages. The language files are stored in the language directory, and are yaml files. If you wish to add a language create a file to put in there following the structure of the existing files. If you don't wish to provide a translation for a specific plugin you can leave it out as it will gracefully fall back to the default language. The default language is defined in the configuration as <code>defaultlanguage: yourlanguage</code> and defaults to <code>english</code>.</p>\n<p>If you set the default language to a language that doesn't have all plugins implemented, it will be possible to make Igor unable to comply. This will make Igor sad and it might even crash. So this is not recommended.</p>\n<h1>KMS support</h1>\n<p>There is the option to encrypt the various tokens in you config file using KMS. This means you create a new KMS key (in the region you run Igor) or use the default one provided by AWS. Once you have access to a key you can encrypt your tokens easily using the AWS CLI:</p>\n<pre class=\"language-bash\"><code>aws kms encrypt --key-id alias/igorkey --plaintext YOURTOKEN\n</code></pre>\n<p>The resulting output then has a CiphertextBlob containing the encrypted value. You can then put this in the place of your plain text token values in the config file. Additionally you will need to mark the config as using KMS by adding the <code>kms: true</code> flag.</p>\n<p>Take note! You will have to encode all tokens in your configuration once you enable KMS. At the moment that means:</p>\n<ul>\n<li>token (your Slack token)</li>\n<li>weather:apitoken (your open weathermap token)</li>\n</ul>\n<p>The last thing you need to do is ensure that your Igor function has usage access to the key, by allowing the role to have that access.</p>\n<h1>DynamoDB support</h1>\n<p>The Remember plugin uses DynamoDB to store its data. You will need to create a table and give your Igor function access to it. See the <a href=\"https://github.com/ArjenSchwarz/igor/wiki/Plugin:-Remember\" rel=\"nofollow\">plugin's page</a> for more details.</p>\n<h1>Installation</h1>\n<p>The <a href=\"https://github.com/ArjenSchwarz/igor/wiki\" rel=\"nofollow\">Wiki</a> explains how the installation works, which can be handled by a provided script.</p>\n<h1>Development</h1>\n<p>To make plugin development easier, there is an example plugin available in the devtools directory (example.go.plugin).</p>\n<p>You can also test your commands locally using <code>bin/testcommand.sh</code>. This script will read your config.yml file and based on that it will generate a correctly formatted json string and provide that to the binary.</p>\n<p>For example:</p>\n<pre class=\"language-bash\"><code>$ bin/testcommand.sh \"introduce yourself\"\n{\"text\":\"I am Igor, reprethenting We-R-Igors.\",\"response_type\":\"in_channel\",\"attachments\":[{\"title\":\"A Spare Hand When Needed\",\"text\":\"We come from \u00dcberwald, but are alwayth where we are needed motht.\\nRun */igor help* to see which Igors are currently available.\",\"mrkdwn_in\":[\"text\"]}]}\n</code></pre>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/go\">go</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/shell\">shell</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/ArjenSchwarz/igor\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/ArjenSchwarz/igor\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["memories printman", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/SFWysZC2Eb8?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"memories printman \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/409/datas/gallery.jpg\"/>\n<p>\n<i>Logo </i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"memories printman \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/002/datas/gallery.jpg\"/>\n<p>\n<i>AWS Architecture  </i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I have worked in printing industry before and I saw how customer support do the same job to gather order info from customers by calls and emails. So, I got an Idea to let the chatbot handle the photobook creation process </p>\n<h2>What it does</h2>\n<p>It create a photobook form your images \nIt suppose to create a pdf \nIt can get the necessary info to deliver the</p>\n<h2>How we built it</h2>\n<p>We make use of open source libraries and AWS Lambda + AWS API gatway\nBot : claudia-bot-builder\nNLP : natural , nlp_compromise\nAWS : Lambda API gateway+ \nConnection : Request : </p>\n<h2>Challenges we ran into</h2>\n<ul>\n<li>making the chatbot friendly with NLP</li>\n<li>generating pdf  with lambda is complex : - alot of libraries require </li>\n</ul>\n<p>So we use an Html version of the </p>\n<h2>Accomplishments that we're proud of</h2>\n<ul>\n<li>making the boot understand differentiate between the normal talk and the order details<br/></li>\n<li>we make it in 15 days because we saw the announcement lately<br/></li>\n</ul>\n<h2>What we learned</h2>\n<ul>\n<li>Dealing with AWS Lambda and API Gateway </li>\n<li>Dealing with NLP with node js to understand the </li>\n</ul>\n<h2>What's next for memories printman</h2>\n<ul>\n<li>Connecte it with Magento to create a real order for your photobook</li>\n<li>Connected to pdf engine to create a print-ready version of the pdf<br/></li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/3B00D/memories-printman\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/3B00D/memories-printman\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["routebot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://player.vimeo.com/video/184866417?byline=0&amp;portrait=0&amp;title=0#t=\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"routebot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/010/datas/gallery.jpg\"/>\n<p>\n<i>exmple : route from London to Wales</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>routebot</h1>\n<p>routebot is a serverless slak bot build using AWS Lambda and API Gateway.\n It is a bot which provides route between two places, which lets you request the route details between two places with a command \n<code>route from &lt;origin&gt; to &lt;destination&gt;</code> which internally uses google directions service.</p>\n<p>The Route details which include Duration, Distance and Driving instructions will be posted into your Slack channel.</p>\n<h2>Usage</h2>\n<p><code>route from &lt;origin&gt; to &lt;destination&gt;</code></p>\n<p>The trigger word for this bot has been configured as \"route\" in Slack Custom Integration, so when you type route in Slack the bot gets triggered.</p>\n<p>If you do not provide the command as mentioned above, it will post the usage command (route from  to ) into your Slack channel.</p>\n<p>If the route is not found, it will post the message (Route not found, Please provide clear locations) into your Slack channel.</p>\n<h2>Examples</h2>\n<h3>Below is the example for command \"route from Lonon to Wales\"</h3>\n<p><img alt=\"alt tag\" data-canonical-url=\"./imgs/route_from_londo_to_wales\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--SJweauJU--/v1/./imgs/route_from_londo_to_wales\"/></p>\n<h3>Below is the example when when route is not found</h3>\n<p>endrapunaveen [5:15 PM] \n  route from test to test123</p>\n<p>routebot BOT [5:19 PM]<br/>\n  Route not found, Please provide clear locations</p>\n<h1>Installation and Setup</h1>\n<ol>\n<li>clone this project using <code>git clone https://github.com/endrapunaveen/routebot.git</code></li>\n<li>change the dir using <code>cd routebot</code></li>\n<li>execute <code>npm install</code> to install all the dependent node modules mentioned in package.json</li>\n<li>Zip all the files and directories available in routebot like \"node_modules\", \"index.js\", \"package.json\" into routebot.zip</li>\n<li>Create your Lambda function that will process all Slack Requests and upload the above created zip (routebot.zip)</li>\n<li>Create an API Gateway API</li>\n<li>Create a method of type: POST</li>\n<li>Select Integration Type: Lambda</li>\n<li>Select the region in which you created your Lambda function</li>\n<li>Select the Lambda Function you created</li>\n<li>Click \"Integration Request\"</li>\n<li>At the bottom of this Page select \"Add mapping Template\"</li>\n<li>For content type please specify: \"application/x-www-form-urlencoded\"</li>\n<li>Insert the template code below into the text field for the template. This code converts a URL Encoded form post into JSON for your Lambda function to parse</li>\n<li>Deploy your API</li>\n<li>In Slack, Go to Apps and Integrations</li>\n<li>Click Build in the top right</li>\n<li>Select Make a Custom Integration</li>\n<li>Select Outgoing Webhooks</li>\n<li>Pick trigger word \"route\" for the Bot!</li>\n<li>In URL, put the URL created by your API Gateway Deployment</li>\n</ol>\n<h4>Template code for Integration Request:</h4>\n<pre class=\"language-nolang\"><code>## convert HTML POST data or HTTP GET query string to JSON\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&amp;\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&amp;\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&amp;\", \"\").length())\n\n## if there are no \"&amp;\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&amp;\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&amp;\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() &gt; 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n## next we set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach( $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n  #set($kvTokenised = $kvPair.split(\"=\"))\n \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised[1].length() &gt; 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n#end\n}\n</code></pre>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/endrapunaveen/routebot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/endrapunaveen/routebot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["knobot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/qw0reRmMn-k?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"knobot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/000/datas/gallery.jpg\"/>\n<p>\n<i>Knobot can add knowledge, find it, and look for experts!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p><a href=\"https://youtu.be/qw0reRmMn-k\" rel=\"nofollow\"><img alt=\"ScreenShot\" data-canonical-url=\"http://figure.ai/media/say-hello.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--mP0xa0Iz--/http://figure.ai/media/say-hello.png\"/></a></p>\n<h1>Knobot</h1>\n<h3>Knobot is a serverless slackbot built with one purpose, to bring together your teams expertise and knowledge, right where you work - in Slack!</h3>\n<h4><a href=\"https://youtu.be/qw0reRmMn-k\" rel=\"nofollow\">Watch the video</a></h4>\n<p>Knobot powers your collective knowledge - capturing, finding and sharing valuable information and putting your people in touch with the expert they need.</p>\n<ul>\n<li>Keep your nuggets of gold. Capture information surfaced in team conversations and add it to Knobot.</li>\n<li>Simply create knowledge and add it directly from Slack.</li>\n<li>Democratise valuable information. No specialist knowledge-base, wiki, or integration is required.</li>\n<li>Find the experts in your organisation. Mention their skills in Knobot, promote their contribution and give kudos.</li>\n<li>Bring Knobot to your customer channels to them directly to knowledge and expertise</li>\n</ul>\n<h4>Architecture behind Knobot</h4>\n<ol>\n<li>The serverless 1.0rc-1 framework is used to manage the dev/prod staging to AWS Lambda.</li>\n<li>AWS Elastic Search powers the team wide knowledge storage and retrieval.</li>\n<li>NLP Compromise is used for natural language parsing of requests.</li>\n</ol>\n<h4>How to build &amp; run</h4>\n<ol>\n<li>Install <a href=\"https://github.com/serverless/serverless\" rel=\"nofollow\">serverless 1.0rc1 framework</a></li>\n<li>Configure serverless with the appropriate AWS credentials <a href=\"https://github.com/serverless/serverless/blob/master/docs/02-providers/aws/01-setup.md\" rel=\"nofollow\">(more here)</a></li>\n<li>Create an Elastic Search service in AWS.</li>\n<li>Pull the 'knobot' source</li>\n<li>Create a <a href=\"https://api.slack.com/slack-apps\" rel=\"nofollow\">Slack App</a> (with a BOT, and the appropriate Event API permissions)</li>\n<li>You'll need to update the 'knobot-utils.js' file to include the Slack App client details.</li>\n<li>Also update the Elastic Search endpoint in 'knobot-utils.js'</li>\n<li>Run 'npm install' and 'serverless deploy' from the knobot-lambda/ directory</li>\n<li>You're now up and running. Take note of the 'auth' and 'eventendpoint' urls</li>\n<li>Head back to Slack, and update/verify the 'auth' and 'eventendpoint' urls in your App</li>\n<li>Now, create a 'Add To Slack' button.</li>\n<li>Click on 'Add to Slack', and install knobot to your team.</li>\n</ol>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">serverless</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/sunpazed/knobot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/sunpazed/knobot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://knobot.figure.ai\" rel=\"nofollow\" target=\"_blank\" title=\"http://knobot.figure.ai\">\n<i class=\"ss-icon ss-link\"></i>\n<span>knobot.figure.ai</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Anfon", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/1dUlRjMzzHs?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Anfon \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/992/datas/gallery.jpg\"/>\n<p>\n<i>Anfon - the email bot for Slack</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Anfon \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/006/datas/gallery.jpg\"/>\n<p>\n<i>it's really this simple to connect your personal email account to the Anfon bot and begin sending email directly from Slack!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Although we wish we could communicate with everyone in our lives via Slack, the reality is we often still need to use old-school email. I wanted to make a bot that would essentially be an email client living in Slack to allow emailing directly using a personal email account without switching to another app. </p>\n<h2>What it does</h2>\n<p>After authorizing the bot to manage emails from you gmail account, simply send a DM to @anfon specifying the recipient, the subject and the email body -  and v\u00f3ila!</p>\n<h2>How I built it</h2>\n<p>Using node.js and AWS services incuding API Gateway, Lambda, and DynamoDB. Makes use of the new Slack Events API, as well as the Gmail API.</p>\n<h2>Challenges I ran into</h2>\n<p>Having never used API Gateway, Lambda or DynamoDB before now, there was a ton to learn in a short period of time. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I accomplished exactly what I set out to create in about 2 weeks in my spare time- all while using technologies I never touched before. </p>\n<h2>What I learned</h2>\n<p>A ton about various AWS services and the general AWS ecosystem.</p>\n<h2>What's next for Anfon</h2>\n<p>Plenty more to do! e.g. - Allowing sending email attachments by uploading files to Slack; subcribing to email threads and being notified of replies to your emails.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag\">dynamodb</span></li><li><span class=\"cp-tag\">slack-api</span></li><li><span class=\"cp-tag\">gmail-api</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://slack.com/oauth/authorize?scope=bot,commands&amp;client_id=2959573176.81713754597&amp;redirect_uri=https://vejkmdramj.execute-api.us-west-2.amazonaws.com/development/slack-oauth\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack.com/oauth/authorize?scope=bot,commands&amp;client_id=2959573176.81713754597&amp;redirect_uri=https://vejkmdramj.execute-api.us-west-2.amazonaws.com/development/slack-oauth\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["carpoolbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/NnkWTaOU8XQ?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/068/datas/gallery.jpg\"/>\n<p>\n<i>Add New Route</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/070/datas/gallery.jpg\"/>\n<p>\n<i>approve request</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/071/datas/gallery.jpg\"/>\n<p>\n<i>approved request</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/072/datas/gallery.jpg\"/>\n<p>\n<i>bot user gets added</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/073/datas/gallery.jpg\"/>\n<p>\n<i>edit request</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/074/datas/gallery.jpg\"/>\n<p>\n<i>my approvals</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 7\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/075/datas/gallery.jpg\"/>\n<p>\n<i>search routes</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"carpoolbot \u2013 screenshot 8\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/417/076/datas/gallery.jpg\"/>\n<p>\n<i>view requests</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>Whats this bot is all about ?</p>\n<p>Its carpooling bot\nDeveloped to help slack team members share ride.\nWe believe carpooling is a great initiative to,</p>\n<ul>\n<li>Reduce Traffic on roads</li>\n<li>Reduce pollution impact on environment</li>\n<li>Have a stress free ride sometimes ! \uf04a</li>\n</ul>\n<p>How it works ?</p>\n<p>You need to have a slack team !\nAdd our carpooling app to your slack team by using our \u2018Add to Slack Button\u2019\nA Bot user called \u2018carpool\u2019 will get added\nStart chatting with \u2018carpool\u2019 to add your ride or look for the ride !\nJust relax and our bot will take you through the process</p>\n<p>Features\nIts server-less !\nBuilt using,</p>\n<ul>\n<li>AWS Lambda</li>\n<li>AWS API Gateway</li>\n<li>GoogleMaps APIs</li>\n<li>Slack APIs</li>\n<li>Wit.ai (For NLP)</li>\n</ul>\n<p>Functionalities\nLooking for Carpool buddies to share your ride ? \u2013 Add route\nLooking for Carpool ? Search route\nFound route you want to ride along ? Register yourself !\nNot happy with the route ? Unregister\nEdit / Delete routes you have added\nBot will search best routes based on your inputs \nYou will also be given Google Maps URL which will open  google maps and you can see the entire route, before you make your choice\nIf you own a route, you will get a chance to \u2018Approve\u2019 the request made by someone to ride along</p>\n<p>How to Test\nLog in to your slack team\nOpen \u2018add-to-slack.html\u2019 from github repository\nClick on \u2018Add To Slack\u2019 button\nAccept the permissions\nReply will download no-error (containing \u2018null\u2019 as string) and \u2018Carpool\u2019 bot user will be added to your team\nStart using it ! \nSay \u2018help\u2019 to bot  to know which phrases our bot is most familiar with ! ) </p>\n<p>Some phrases our bot is familiar with\u2026\n\u2018Looking for carpool buddies\u2019 \u2013 to add the route\n\u2018Looking for carpool\u2019 \u2013 to search routes\n\u2018Show my requests\u2019\n\u2018Show my approvals\u2019\n\u2018help\u2019</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag\">aws-api-gateway</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-maps\">google-maps</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-directions\">google-directions</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-distance-matrix\">google-distance-matrix</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wit-ai\">wit.ai</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["Brushtail - the politeness bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/kGUKxi8YVTo?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<p><img alt=\"Brushtail - the politeness bot\" data-canonical-url=\"http://drive.google.com/uc?export=view&amp;id=0B449hyJ6tGcCU01DSVZ1RG13R2c\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--X6oHzxka--/http://drive.google.com/uc%3Fexport%3Dview%26id%3D0B449hyJ6tGcCU01DSVZ1RG13R2c\"/></p>\n<h2>Inspiration</h2>\n<p>Great teamwork is important to us. We wanted to build something to make that process not just more efficient, but enjoyable, by identifying trends in communication before they become problems, and rewarding positive behaviour.</p>\n<p>It can sometime be hard to gauge tone in a online conversation, and it is also hard for moderators to step in to calm the conversation, often becoming the brunt of the butt-hurt in a channel. Delegating this to a bot allows the participants to be less emotional to moderation and to get on with it.</p>\n<h2>What it does</h2>\n<p>Brushtail is a Slack bot designed to track messages made in a channel, monitor sentiment, and intelligently remind users to <em>relax</em>.</p>\n<h2>How we built it</h2>\n<p>We use Slack's events API to feed into a DynamoDB table via a Lambda, and then use the event stream from the table to trigger a query in a natural language processor to analyse the sentiment of messages. The DynamoDB record is then updated, and onModify event stream triggers follow on actions, including reacting to the current message, as well as updating statistics in a aggregate table, which in turn triggers a Lambda onModify to moderate the channel if the overall tone of the channel gets unpleasant.</p>\n<p><img alt=\"AWS Architecture\" data-canonical-url=\"http://drive.google.com/uc?export=view&amp;id=0B449hyJ6tGcCYXRUamRkTTd6Z2c\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--CafTAk0D--/http://drive.google.com/uc%3Fexport%3Dview%26id%3D0B449hyJ6tGcCYXRUamRkTTd6Z2c\"/></p>\n<h2>What's next for Brushtail</h2>\n<p>We want to refine Brushtail's moderation based on some \"real world\" experience in our work Slack team, and also some teams used by social groups, to determine the best time for the bot to \"step in\", and when to keep out of it.</p>\n<p>The natural language processor provides richer analysis of sentence structure, so we want to expose this further via bot commands to allow people to find out more about how their tone can be interpreted by others. </p>\n<p>Finally we want to expand the bot's moderation role to be more active and be able to softban overly abusive participants after warnings. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">serverless</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag\">amazon-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/natural-language-processing\">natural-language-processing</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/brushtailbot/politebot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/brushtailbot/politebot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I instigated it.", "You\u2019re in a desert walking along in the sand when all of the sudden you look down, and you see a tortoise, it\u2019s crawling toward you. You reach down, you flip the tortoise over on its back. The tortoise lays on its back, its belly baking in the hot sun, beating its legs trying to turn itself over, but it can\u2019t, not without your help. But you\u2019re not helping. Why is that?", "I provided moral support and scope creep (and looked over a lot of shoulders).", "", ""]], ["ElizaBot By FluentRetail", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/UMEqeN2CgDc?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"ElizaBot By FluentRetail \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/885/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>With years of experience introducing and improving omni-channel order fulfilment strategies to enterprise grade retailers, the Fluent Retail team is well aware of the many  gaps and pain points faced by customers after completing their orders online. </p>\n<p>While retailers focus on improving customer experience on their ecommerce channels, most of their efforts stop at checkout and order confirmation. Customer order updates after that point are not generally well communicated. Thus customers are often kept in the dark, they either have to wait or go an extra step and call customer service with long waits to know about fulfilment status and expected arrival times.</p>\n<p>Even though some companies have interactive methods like live chats etc, it\u2019s no different to waiting on a call centre queue until your turn arrives. With increasingly busy lifestyles, customer don\u2019t have neither the patience nor the luxury of being on hold with too often very frustrating outcome, not getting more information than what they already have.</p>\n<p>Eliza bot is intended to narrow this gap by facilitating interactive information via a chat channel that customers can subscribe to, and are able to directly ask status update on their order as well as automatically get fulfilment &amp; delivery updates as their order progresses through the lifecycle.</p>\n<p>Key values to customer:</p>\n<p>Ability to ask about order status to Eliza BOT who will instantly provides current status and other tracking information. If customer opted for collection/ pickup in store, ELIZA can also give store opening hours and other key information about the collection process.\nReceive notification as order progresses through and interact with further options</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">cloudformation</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n</div>", [""]], ["Claudia-AIML-Bot-2", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/pHr32XXrxpI?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h1>Claudia AIML Bot</h1>\n<p>A node.js app using Claudia. Allows users to chat with a bot on facebook. Edit <code>responses/bot.aiml</code> to change responses.</p>\n<p>Based on my <a href=\"https://github.com/kirkins/Claudia-AIML-Bot\" rel=\"nofollow\">first version of the bot</a> but added facebook ui, emotion module using Microsoft cognitive api, logging using dynamoDb, and the ability to play rock, paper, scissors.</p>\n<p><a href=\"https://www.youtube.com/watch?v=pHr32XXrxpI\" rel=\"nofollow\"><img alt=\"YouTubeVideo\" data-canonical-url=\"http://blog.graniteapps.co/content/images/2016/09/Screenshot-from-2016-09-28-23-39-52.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--OaZtT3xY--/http://blog.graniteapps.co/content/images/2016/09/Screenshot-from-2016-09-28-23-39-52.png\"/></a></p>\n<p>After cloning:</p>\n<pre class=\"language-nolang\"><code>npm install claudia -g\nnpm install\nclaudia create --region us-east-1 --api-module bot --configure-fb-bot\n</code></pre>\n<h1>Config for database logging</h1>\n<p>To get logging with dynamoDb working you need to create a table for users and a table for messages. After you've made the tables add the names to the 'config/config.js' file.</p>\n<p>You'll also need to enable the lambda function to access your DyndamoDB instance. You can do this in the 'identity &amp; access management' section of the AWS console.  </p>\n<h1>Config for emotion detection</h1>\n<p>The emotion command causes the bot to use <a href=\"https://www.microsoft.com/cognitive-services/en-us/emotion-api\" rel=\"nofollow\">Microsoft's Cogntitive Emotion API</a> with the user's profile picture. To get this working you need to get an api key and add it to the 'config/config.js' file.</p>\n<p>More on using Claudia: <a href=\"https://aws.amazon.com/blogs/compute/create-and-deploy-a-chat-bot-to-aws-lambda-in-five-minutes/\" rel=\"nofollow\">https://aws.amazon.com/blogs/compute/create-and-deploy-a-chat-bot-to-aws-lambda-in-five-minutes/</a></p>\n<p>Claudia <a href=\"https://github.com/claudiajs/claudia-bot-builder\" rel=\"nofollow\">https://github.com/claudiajs/claudia-bot-builder</a></p>\n<p>What is AIML: <a href=\"http://www.alicebot.org/aiml.html\" rel=\"nofollow\">http://www.alicebot.org/aiml.html</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/kirkins/Claudia-AIML-Bot-2\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/kirkins/Claudia-AIML-Bot-2\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Reginald", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/OGDyD7C34Ss?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Reginald \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/804/datas/gallery.jpg\"/>\n<p>\n<i>System Architecture</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Reginald \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/818/datas/gallery.jpg\"/>\n<p>\n<i>Sample Usage (Private)</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Reginald \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/820/datas/gallery.jpg\"/>\n<p>\n<i>Sample Usage (Public)</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We want to give users insight into how they are perceived by others in the chat community. This knowledge allows users to adjust their online behavior before relational problems arise. We created Reginald to ensure Slack communities remain fun, healthy, and functioning. It is our hope that Reginald aids in building better and stronger relationships in chat communities all over the world.</p>\n<h2>What it does</h2>\n<p>Reginald analyzes Slack chat history to provide users with an overview of how their in-chat behavior is perceived by other users. Metrics returned include participation, positivity, negativity, and conceit. The metrics are calculated using only the last 1000 posts in the current channel. This means a user's scores will be different in each channel and will dynamically change over time.</p>\n<h2>How we built it</h2>\n<ul>\n<li>Reginald is built using Node.js on AWS Lambda.</li>\n<li>We designed Reginald with a microservices architecture in mind. There are six microservice Lambda functions in total - one for each metric (positivity, negativity, participation, conceit), one for the \"gateway\", and one to handle OAuth.</li>\n<li>Lambda functions that need to be external are served using AWS API Gateway. </li>\n<li>AWS DynamoDB is used for persistence. </li>\n<li>The <a href=\"https://serverless.com/\" rel=\"nofollow\">Serverless</a> framework is used to automate the creation of AWS resources.</li>\n<li>The <a href=\"https://www.npmjs.com/package/sentiment\" rel=\"nofollow\">Sentiment</a> library aids in calculating metrics.</li>\n</ul>\n<h2>Challenges we ran into</h2>\n<ul>\n<li>We ran into issues with AWS Lambda's \"cold\" start time (<a href=\"http://stackoverflow.com/a/34216756\" rel=\"nofollow\">Link</a> for reference). Slack enforces a hard 3 second timeout for responses to slash commands. Reginald responds well within that timeout when the Lambda functions are \"hot\" (average time is ~700ms), but if the Lambda functions are \"cold\" the response could exceed the timeout. To overcome this issue we created a separate Lambda function whose purpose is to ping the main service functions to keep them \"hot\".</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are proud of all of the functionality and performance we were able to achieve with Reginald v1.0.</p>\n<h2>What's next for Reginald</h2>\n<ul>\n<li>Reginald has been submitted and is currently under review to be added to the <a href=\"https://slack.com/apps\" rel=\"nofollow\">Slack App Directory</a></li>\n<li>Dynamic responses using natural language processing</li>\n<li>Different metric options</li>\n<li>More accurate metric algorithms</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/asmith60/slackbot-reginald\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/asmith60/slackbot-reginald\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Engineered and programmed the concept and our 4 primary algorithms. ", "I worked on the gateway function and OAuth process"]], ["NSFW detector for Slack using AWS Lambda", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Automatically blocking porn on slack communication channels helps organizations improve productivity, be compliant with organization policies and helps keeps the workplace safe.</p>\n<h2>What it does</h2>\n<p>This Slack app from vRate automatically detects and blocks NSFW content in images uploaded by users and keeps channels safe and protected.  </p>\n</div>\n</div>", [""]], ["Lunchio", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/FNEAs3f3rx0?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Every day, our team of 10 developers, marketers and product folks head out into the city to get lunch. We\u2019re a close team, and that means sticking together and all going to the same restaurant. Given the various personalities and palates we find ourselves debating, arguing and fighting over where to get lunch. It\u2019s a process, like clockwork, that begins around 11:30am and can last upwards of 20 minutes.  Everyone has their quirks \u2013 John doesn\u2019t like a particular place, Colby has issues with another, and because there are nearly 10 of us that go out to lunch each day \u2013 finding the common denominator becomes a difficult and lengthy process. </p>\n<h2>What it does</h2>\n<p>Lunchio simplifies this process by identifying and recommending the most favorited restaurant among luchio users getting lunch that day. Simply add your favorite places for lunch to your profile, as well as the places you\u2019ll never go, and lunchio does the rest. Start a lunch request by inviting your teammates and friends using slack command: /lunchio invite @user, and once all teammates have accepted, lunchio finds and recommends the place everyone will love.</p>\n<h2>How we built it</h2>\n<p>Lunchio is written in javascript and has its logic divided into a number of commands that are independent and have clearly defined roles. The commands carry channel and user identifiers through the lunch picking process to give its decisions context. To keep things as stateless as possible, the lambda function interacts with a dynamo db schema that was designed to be simple as well as scalable to support later features. The database holds user preferences such as favorite cuisines and restaurants, as well as user specific ban lists. </p>\n<h2>Challenges we ran into</h2>\n<p>First and foremost, Slack was blocked by our internet security team. As an insurance company we\u2019re pretty locked down and getting it unblocked for an afterhours, unfunded project, was not effortless.\nAdditionally, like many projects we\u2019re faced with, feature creep was front and center. We have trouble deciding on a place to go for lunch so locking down our core product was a challenge we had to work through. Ultimately, solving the fundamental problem of identifying the restaurant guided our decision making.\nFinally, a large piece of the inspiration for lunchio was to offer an experience that was as easy for the user as possible, to contrast with the painful daily negotiations. A big part of that was incorporating language processing into the process as much as possible to save users from having to memorize unwieldy commands.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>This was an un-sponsored, unfunded project that had to be done after work hours. We\u2019re proud to have committed the time and energy as a team during nights and weekends to learn, code and launch lunchio. Most of all, lunchio is something we\u2019ll now use every day to decide where we go to lunch</p>\n<h2>What we learned</h2>\n<p>For starters, how to manage a project from end-to-end.  We also learned that starting with the idea first, and then trying to solve for the technical limitations can prove challenging. Next time, we\u2019ll approach from the bottom up (understand tech first) then use the tech to solve the business challenge</p>\n<h2>What's next for Lunch.io</h2>\n<p>Weather can play a role in where we go to lunch. Pouring rain? We want to go close. Is it freezing out? We want to go even closer and probably have a hot meal. Integrating current weather conditions into lunchio\u2019s recommendation engine is a must have for version 1.1. Additionally, the ability to integrate with iCal or Outlook calendar is another must have. Lunchio will not only recommend the restaurant, but will also find the optimal time to go, and send everyone a calendar invite. Lastly, on Friday\u2019s or before holidays, we enjoy taking a longer lunch and maybe even sitting down to eat. Lunchio will have the ability to account for these times when our enthusiasm to dine is higher and recommend appropriately. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/shkbfzl/hs-lunchbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/shkbfzl/hs-lunchbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", "", "", ""]], ["Alfredbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/UjFVMFDDwZc?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Alfredbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/769/datas/gallery.jpg\"/>\n<p>\n<i>Architectural Diagram</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Ever since the launch of slack, devOps are so 2015, this is the era of ChatOps! </p>\n<p>What best way to enable slack users to leverage the sheer power of AWS than to bring the CLI to their favourite platform of communication?</p>\n<h2>What it does</h2>\n<p>Alfredbot brings the full power of AWS CLI to slack. You can configure granular permissions by associating channels/groups/usergroups with different roles from your AWS account.</p>\n<h2>How we built it</h2>\n<p>Alfredbot is split into 4 lambda functions, segregating responsibilities and limiting access to information as follows:</p>\n<p><strong>Outsider</strong> - gets triggered as the callback hook from installing Alfredbot to slack, parsing the code queryparam in API gateway. Using the code and client id/secret an oAuth token is generated, KMS encrypted and stored in dynamoDB.</p>\n<p><strong>Eagle</strong> - responsible for configuring the mapping between channels/groups/usergroups and AWS roles, only available for slack administrators. The information is saved in dynamoDB.</p>\n<p><strong>Thaddeus</strong> - after you're done configuring the mappings, invoke /alfred-sync start to synchronize the users belonging to previously configured channels/groups/usergroups and store them in memcached. </p>\n<p><strong>Alfred</strong> - entrypoint for your /alfred-invoke , retrieves the role associated with the caller from memcached, assumes it and tries to execute the aws command.</p>\n<p>The entire project is open source and can be found at <a href=\"https://github.com/gergo-debreczeni/alfredbot\" rel=\"nofollow\">https://github.com/gergo-debreczeni/alfredbot</a> .\nFeel free to have a look yourself and contribute if you want to see something added.</p>\n<h2>Challenges we ran into</h2>\n<p>Porting AWS CLI to lambda was a challenge, luckily under the hood it's a python package and with some clever engineering we managed to get it working from lambda.</p>\n<p>Unfortunately certain aws commands even from terminal can take 2-3 seconds, with slacks default timeout of 3 seconds for a response for a slash command our main goal was performance, hence caching the invoker-role mapping and not determining it dynamically.</p>\n<p>One thing we still suffer from are lambda 'cold' calls, but once Alfrebot will be popular that won't be a problem anymore!</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Configuring API gateway and lambda to be used as slack redirect hook for installing the app was pretty ingenious if you ask me, everything is truly serverless. </p>\n<p>Pretty proud of getting the CLI on lambda.</p>\n<h2>What we learned</h2>\n<p>A lot, luckily there were some pretty awesome projects out there to make our lives easier lambkin/slacker/pynamodb/pymemcache, big shoutout to the maintainers!</p>\n<p>Logs are your best friend when debugging API Gateway and lambda.</p>\n<h2>What's next for Alfredbot</h2>\n<p>What we really want for alfredbot is full shell syntax support which is easy to do with Popen(shell=True) but that is a security hole in the application so we'll have to be more clever about it.</p>\n<p>Multi-account support.</p>\n<p>Aliases for frequently used commands.</p>\n<p>Standalone installation for organizations that want to manage Alfredbot on their own. This is almost done.</p>\n<p>Feel free to drop your suggestions on the github project!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://www.alfredbot.io\" rel=\"nofollow\" target=\"_blank\" title=\"https://www.alfredbot.io\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.alfredbot.io</span>\n</a></li>\n<li><a href=\"https://github.com/gergo-debreczeni/alfredbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/gergo-debreczeni/alfredbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["PokedexBot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/H95l1pu8CkY?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"PokedexBot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/786/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>PokedexBot</h1>\n<p>Pokedex bot can be used to quickly lookup pokemon statistics via Facebook messanger.</p>\n<p><a href=\"https://www.youtube.com/watch?v=H95l1pu8CkY\" rel=\"nofollow\"><img alt=\"Video of chat\" data-canonical-url=\"https://blog.graniteapps.co/content/images/2016/09/Screenshot-from-2016-09-27-21-15-34.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--PSdptxYb--/https://blog.graniteapps.co/content/images/2016/09/Screenshot-from-2016-09-27-21-15-34.png\"/></a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/kirkins/PokedexBot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/kirkins/PokedexBot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["The NFL Nerd", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/sFJ5LKp78s8?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"The NFL Nerd \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/564/datas/gallery.jpg\"/>\n<p>\n<i>saying hi</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The NFL Nerd \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/563/datas/gallery.jpg\"/>\n<p>\n<i>stat queries</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The NFL Nerd \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/562/datas/gallery.jpg\"/>\n<p>\n<i>all time queries</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Wouldn't it be great to quickly get answers about players stats, team stats, and general stats for the NFL?</h2>\n<p>If you missed a game, wouldn't it be nice to just ask a bot for specific player or team stats? Wouldn't it be nice if the bot was smart enough to answer detailed questions too, like successful 4th down plays or team rushing percentages inside the redzone? The NFL Nerd was built to provides answers to these questions and more.</p>\n<h2>Simply ask the NFL Nerd about a player, team, or football stat and you'll get responses.</h2>\n<p>The NFL Nerd can give you career stats on players or teams, or week by week stats. The NFL Nerd can also provide leader list if no player or team is provided and just a stat is offered.</p>\n<h2>How It Works</h2>\n<p>The NFL Nerd uses an AWS API Gateway to accept POST requests from Slack. The requests are forwarded to an AWS Lambda bot function. The bot function uses nlp libraries and string similarity logic to parse requests and map them to a query for Sportradar's proprietary stats analysis too. The resulting stats data is then mapped into a formatted Slack message inside the Lambda function.</p>\n<h2>Challenges</h2>\n<p>Parsing bot requests and mapping to an existing query interface was challenging. Extracting player names and teams, then separating them from the stat and week or season was also challenging.</p>\n<h2>What's Next</h2>\n<p>The NFL Nerd is planning a public release, as well as the ability to answer streaks, comparisons, and more complex stat questions.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/natural-language-processing\">natural-language-processing</a></span></li></ul>\n</div>\n</div>", [""]], ["Redshift Overlord Chatbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/n7FMtZEDV54?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Many 47 Lining customers have a fleet of Redshift clusters and Data Pipeline analytics jobs, but they want to minimize the expense and maximize the utility without great effort or a large staff to manage the infrastructure. Some clusters are utilized 24/7 but many are have part time utilization patterns such as dev and test clusters.  Significant cost savings can be achieved by managing the uptime of these clusters.</p>\n<h2>What it does</h2>\n<p>Redshift Overlord (ROVL) manages the Redshift clusters by accumulating votes from the team.  If someone votes that the cluster be available, it starts the cluster if it is down.  There are also automated votes to bring up the cluster at the start of the work day and shut it down at the ends - presuming there are no votes to keep it running.  It can also receive notices from customer-account hosted SNS topics should CloudWatch events or alarms trigger.</p>\n<h2>How I built it</h2>\n<p>We used the serverless framework to manage several projects consisting of many Python files to implement a handful of AWS Lambda functions constituting the chatbot portion of the Overlord.  We also implemented a number of Lambda functions in NodeJS which trigger on a schedule to manage the status of the cluster as well as gather custom metrics from CloudWatch.</p>\n<h2>Challenges I ran into</h2>\n<p>The Redshift clusters run in the customers' accounts. But the Overlord will be a 47Lining managed service.  Creating the proper IAM roles and permissions for cross-account access is difficult.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>There are many unit tests as well as integration tests to facilitate ground-up testing of the code.</p>\n<h2>What I learned</h2>\n<p>Slack has good integration points providing a nice interface for ChatOps-type functionality.</p>\n<h2>What's next for Redshift Overlord</h2>\n<p>Team 47Lining will be pitching ROVL to our customers for further development and continued integration into their business processes.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">serverless</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-cloudwatch\">amazon-cloudwatch</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-redshift\">amazon-redshift</a></span></li><li><span class=\"cp-tag\">aws-datapipeline</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bash\">bash</a></span></li><li><span class=\"cp-tag\">aws-sdk</span></li><li><span class=\"cp-tag\">aws-apigateway</span></li><li><span class=\"cp-tag\">aws-kms</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">amazon-cloudformation</span></li><li><span class=\"cp-tag\">regex</span></li></ul>\n</div>\n</div>", ["I worked on the chatbot integration, parsing the incoming messages from the Slack room, creating the proper actions to send to back-end Lambdas.", ""]], ["coughlinSlack-master", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/KOF5UX7m-iw?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"coughlinSlack-master \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/727/datas/gallery.jpg\"/>\n<p>\n<i>query New Relic Insights</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"coughlinSlack-master \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/728/datas/gallery.jpg\"/>\n<p>\n<i>get the status of your servers</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>coughlinSlack</h1>\n<p>Sample app to ask for demotron data in NR slack. It uses with <a href=\"https://www.npmjs.com/package/slack-terminalize\" rel=\"nofollow\">slack-terminalize</a> with a basic serverStatus command and a basic insights query command</p>\n<h1>Setup</h1>\n<ul>\n<li>Run <code>npm install</code> to install the dependencies</li>\n<li>Paste the <code>xoxb-token</code> of your bot integration in <code>init</code> function inside <code>index.js</code> file. </li>\n<li>Run <code>node .</code> to start the app. Now the bot should be listening to the slack team you integrated it with</li>\n<li>Invite the bot to desired channels with <code>/invite @&lt;your-bot-name&gt;</code> and try the sample commands</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/mcough2/coughlinSlack-master\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/mcough2/coughlinSlack-master\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["nabot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/GxhkXi4_n-s?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"nabot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/714/datas/gallery.jpg\"/>\n<p>\n<i>raspberry pi + camera</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"nabot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/717/datas/gallery.jpg\"/>\n<p>\n<i>call nabot</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>My friend loves her pet so she can not leave her pet.that's why we made the Nabot.</p>\n<h2>What it does</h2>\n<p>We can see my pets any time any where.</p>\n<h2>How we built it</h2>\n<p>\uff11\uff0eSlask's API connected to Amazon Gatewat\n\uff12\uff0eAmazon Lambda method colled from Amazon IoT\n\uff13\uff0eAmazon IoT send to RaspberryPi \n\uff14\u3001RaspberryPi uploads to Slack some pictures.</p>\n<h2>Challenges we ran into</h2>\n<ul>\n<li>Amazon's sarvice and Slack's API</li>\n<li>Union the team</li>\n<li>Making video</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<p>We think this is the first one in the world.</p>\n<h2>What we learned</h2>\n<p>Appear some idea with AWS easily\nSlack has so many interesting prosducts.</p>\n<h2>What's next for nabot</h2>\n<p>we also want use with video as well.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">amazon-iot</span></li><li><span class=\"cp-tag\">amazon-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li><li><span class=\"cp-tag\">slack-api</span></li><li><span class=\"cp-tag\">usb-camera</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/youngmo/nabot-ras\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/youngmo/nabot-ras\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"https://github.com/dislash/nabot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/dislash/nabot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Rebecca", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/bHgROsdMY68?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Rebecca \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/692/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Even on best UI designs it takes a lot of click to set your filters and get the search go! Rebecca is here to help you search a house just by describing it (via voice on applicable platforms)</p>\n<h2>What it does</h2>\n<p>Rebecca can help you find property (now is connected to our Malaysia API) as simple as talking to your friend. She is a smooth talker and does not let you feel talking to a emotionless bot! She can talk to you about anything; even telling a joke or talk about Obama!! </p>\n<h2>How we built it</h2>\n<p>We used AIML for the static chit chat and machine learning via API.AI interface for more complicated conversations. The extracted information will later sent to Lambda function which based on the Intent can respond with chit-chat, house listing search or even weather forecast!!</p>\n<h2>Challenges we ran into</h2>\n<p>The AIML itself is a challenge as it require proper setup and scripting to get a human-like response. The machine learning part is also challenging when it comes to providing the training sets as wrong info will teach wrong model!</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Rebecca is literally the first Real Estate Bot in South East Asia. Rebecca is far far more intelligent than any Real Estate Bot. Rebecca AIML scripts are almost as perfect when it comes to casual conversation.</p>\n<h2>What we learned</h2>\n<p>Serverless computing rocks! No worry about scalability or performance.</p>\n<h2>What's next for Rebecca</h2>\n<p>Deep Learning. Going to improve the NLP as it is the key factor in user acceptance.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/api-ai\">api.ai</a></span></li><li><span class=\"cp-tag\">apigateway</span></li><li><span class=\"cp-tag\">lambda</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://slack.com/oauth/authorize?scope=bot&amp;client_id=83128296000.83525009681\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack.com/oauth/authorize?scope=bot&amp;client_id=83128296000.83525009681\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack.com</span>\n</a></li>\n<li><a href=\"https://rebeccabot.slack.com/signup\" rel=\"nofollow\" target=\"_blank\" title=\"https://rebeccabot.slack.com/signup\">\n<i class=\"ss-icon ss-link\"></i>\n<span>rebeccabot.slack.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Image-Search-Slack-Bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/uadod2VqLNM?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h1>AWS_Lambda_ChatBot</h1>\n<h2>Description</h2>\n<p>This code is the Image search bot for slack.\nImage is support to understand the unknown contents.</p>\n<p>This code made for the below contest.</p>\n<p><a href=\"https://awschatbot.devpost.com/\" rel=\"nofollow\">https://awschatbot.devpost.com/</a></p>\n<h3>Install</h3>\n<h4>Enviroments Setting</h4>\n<p>If you easy to create the instance , you install the terraform</p>\n<pre class=\"language-nolang\"><code>https://www.terraform.io/intro/getting-started/install.html\n</code></pre>\n<p>If you easy to set up the enviroments, you install the ansible</p>\n<pre class=\"language-nolang\"><code>http://docs.ansible.com/ansible/intro_installation.html\n</code></pre>\n<p>You install the MySQL</p>\n<p><a href=\"https://www.tutorialspoint.com/mysql/mysql-installation.htm\" rel=\"nofollow\">https://www.tutorialspoint.com/mysql/mysql-installation.htm</a></p>\n<p>You install the Vagrant</p>\n<p><a href=\"https://www.vagrantup.com/docs/installation/\" rel=\"nofollow\">https://www.vagrantup.com/docs/installation/</a></p>\n<p>If you make the data set fastest, you install the parallel</p>\n<p><a href=\"https://www.gnu.org/software/parallel/\" rel=\"nofollow\">https://www.gnu.org/software/parallel/</a></p>\n<h4>Python Enviroments Setting</h4>\n<p>Python Versions below</p>\n<pre class=\"language-nolang\"><code>Python 3.5.0\n</code></pre>\n<p>Python Library install</p>\n<pre class=\"language-nolang\"><code>pip install requirements.txt\n</code></pre>\n<p>MySQL python wrapper install</p>\n<p>GEt the source code latest versions\n     <a href=\"http://dev.mysql.com/downloads/connector/python/\" rel=\"nofollow\">http://dev.mysql.com/downloads/connector/python/</a></p>\n<p>Install the mysql for python</p>\n<pre class=\"language-nolang\"><code>    cd {your} download directory\n    tar xzf mysql-connector-python-VER.tar.gz\n    cd mysql-connector-python-VER\n    sudo python setup.py install\n</code></pre>\n<h4>Prepare the Data</h4>\n<p>Prepare the Wikipedia data.</p>\n<p>It is possible to get the abstract data and image data below site.</p>\n<p><a href=\"https://archive.org/download/enwiki-20080312\" rel=\"nofollow\">WikiPedia</a><br/></p>\n<p>Abstract Data is below</p>\n<pre class=\"language-nolang\"><code>enwiki-20080312-abstract.xml\n</code></pre>\n<p>Image data is below</p>\n<pre class=\"language-nolang\"><code>enwiki-20080312-imagelinks.sql\n</code></pre>\n<p>You use the above the sql for make the wikipedia image database.\nBut the above the sql doesn't work for syntax error.\nYou have to remove the \"TYPE=InnoDB;\"</p>\n<pre class=\"language-nolang\"><code>1: create database enwiki\n2: use enwiki\n2: source enwiki-20080312-imagelinks.sql\n</code></pre>\n<p>Create folder for the data</p>\n<pre class=\"language-nolang\"><code>mkdir -p {your git clone folder}/Data/wiki_image/\n</code></pre>\n<p>You set the abstract data above folder</p>\n<pre class=\"language-nolang\"><code>mv enwiki-20080312-abstract.xml {your git clone folder}/Data/wiki_image/\n</code></pre>\n<p>You exetuce the below command\nIt take a long time.</p>\n<pre class=\"language-nolang\"><code>python execute_wiki_pedia_xml_to_json.py -xml enwiki-20080312-abstract.xml -img True\n</code></pre>\n<p>If you already install the parallel command, you execute the below command.\nBecause the below code is faster than above.\nIt also take a long time.</p>\n<pre class=\"language-nolang\"><code>parallel --linebuffer -j {40-100(you adjustment)} :::: jobs.txt\n</code></pre>\n<p>\"jobs.txt\" is the below</p>\n<pre class=\"language-nolang\"><code>python execute_wiki_pedia_xml_to_json.py -xml enwiki-20080312-abstract.xml -img True\n</code></pre>\n<h3>Usage</h3>\n<h4>Local Setting</h4>\n<p>If you already prepare the json data set, you move the json data the below folder</p>\n<pre class=\"language-nolang\"><code>mkdir -p {your git clone folder}/docker/data/wiki_image\nmv {your git clone folder}/Data/wiki_image/*.json {your git clone folder}/docker/data/wiki_image\n</code></pre>\n<p>You conpress the data</p>\n<pre class=\"language-nolang\"><code>gzip {your git clone folder}/docker/data/wiki_image/*.json\n</code></pre>\n<p>You have to set the ip address</p>\n<pre class=\"language-nolang\"><code>  config.vm.network \"private_network\", ip: \"192.168.33.xx\"\n</code></pre>\n<p>You run the vagrant</p>\n<pre class=\"language-nolang\"><code>vagrant up\n</code></pre>\n<p>Docker install process below</p>\n<p><a href=\"https://docs.docker.com/engine/installation/linux/ubuntulinux/\" rel=\"nofollow\">https://docs.docker.com/engine/installation/linux/ubuntulinux/</a></p>\n<p>If you use the setting the ansible you execute the below command</p>\n<pre class=\"language-nolang\"><code>cd {your git clone folder}/ansible_setting\nansible-playbook -i vagrant_host vagrant_lambda_docker.yml\n</code></pre>\n<p>Build the docker image</p>\n<pre class=\"language-nolang\"><code>cd /home/vagrant/AWS_Lambda_Chatbot/docker\nmake test-elasticsearch-english\n</code></pre>\n<p>Escape the docker container</p>\n<pre class=\"language-nolang\"><code>exit\n</code></pre>\n<p>Tag the docker image\nBecause it is easy to understand the container mean</p>\n<pre class=\"language-nolang\"><code>docker tag {docker elasticsearch image} elasticsearch_english\n</code></pre>\n<p>You start the elasticsearch container and regist data</p>\n<pre class=\"language-nolang\"><code>cd {your git clone folder}/Question_Answer\nsh elastic_start_english.sh [PIPE_NUMBER] [PARALLEL_NUMBER] [IMAGE_FLAG (True or False)] [ELS_IMAGE_NAME]\nexample)\nsh elastic_start_english.sh 1 5 True elasticsearch_english\n</code></pre>\n<p>You have to push the container your docker hub</p>\n<pre class=\"language-nolang\"><code>docker login\ndocker tag elasticsearch_english:latest {your docker repository name}:{tag name}\ndocker push {your docker repository name}:{tag name}\n</code></pre>\n<h4>Instance Setting</h4>\n<p>You create the instance\nAmazon Machine Image (AMI): Ubuntu\nChoose an Instance Type:t2.micro\nSecurity Groups:you have to open the 9200 port for the elasticsearch</p>\n<p><a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html\" rel=\"nofollow\">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html</a></p>\n<p>If you use the terraform, you execute the below command</p>\n<pre class=\"language-nolang\"><code>cd {your git clone folder}/terraform\nterraform plan\nterraform apply\n</code></pre>\n<p>Docker enviroment setting</p>\n<p><a href=\"https://docs.docker.com/engine/installation/linux/ubuntulinux/\" rel=\"nofollow\">https://docs.docker.com/engine/installation/linux/ubuntulinux/</a></p>\n<p>If you use the setting the ansible you execute the below command\nyou edit the ip address your instance <code>aws_lambda_chatbot_host</code></p>\n<pre class=\"language-nolang\"><code>cd {your git clone folder}/ansible_setting\nansible-playbook -i aws_lambda_chatbot_host aws_lambda_chatbot.yml\n</code></pre>\n<p>Access the instance</p>\n<pre class=\"language-nolang\"><code>ssh -i {your key} ubuntu@{your ip address}\n</code></pre>\n<p>You get the docker image</p>\n<pre class=\"language-nolang\"><code>docker login\ndocker pull {your docker repository name}:{tag name}\n</code></pre>\n<p>You get the elasticsearch start command</p>\n<pre class=\"language-nolang\"><code>git clone https://github.com/SnowMasaya/AWS_Lambda_ChatBot.git\n</code></pre>\n<p>You execute the below command\nIt is confirm the elasticsearch container is runnning</p>\n<pre class=\"language-nolang\"><code>cd {your git clone folder}/Question_Answer\nsh elastic_start_english.sh [PIPE_NUMBER] [PARALLEL_NUMBER] [IMAGE_FLAG (True or False)] [ELS_IMAGE_NAME]\nexample)\nsh elastic_start_english.sh 1 5 True elasticsearch_english\n</code></pre>\n<h3>Lambda Setting</h3>\n<p>If you use the Lambda for slack bot, you read the below link.\nI explain the how to use the lambda function for slack bot.</p>\n<p><a href=\"http://qiita.com/GushiSnow/private/0f69cab874aa8ea4a859\" rel=\"nofollow\">http://qiita.com/GushiSnow/private/0f69cab874aa8ea4a859</a></p>\n<h3>Code Directory Structure</h3>\n<pre class=\"language-nolang\"><code>AWS Lambda Chat Bot Hackthon\n  - Question_Answer/\u3000\u3000\u3000\u3000... Question and Answer code\n  - slack/\u3000\u3000\u3000\u3000\u3000        ... Lambda function code for slack bot\n  - docker/\u3000\u3000\u3000\u3000         ... Setting the container\n  - ansible_setting/\u3000\u3000\u3000\u3000... Setting the environment code\n  - terraform/\u3000\u3000\u3000\u3000      ... Create the instance\n</code></pre>\n<h3>Licence</h3>\n<pre class=\"language-nolang\"><code>The MIT License (MIT)\n\nCopyright (c) 2016 Yumi Hamazono\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>\n<h3>Author</h3>\n<p><a href=\"https://github.com/SnowMasaya\" rel=\"nofollow\">SnowMasaya</a></p>\n<h3>References</h3>\n<blockquote>\n<p><a href=\"https://awschatbot.devpost.com/\" rel=\"nofollow\">AWS_Lambda_ChatBot</a><br/>\n<a href=\"https://archive.org/download/enwiki-20080312\" rel=\"nofollow\">WikiPedia</a><br/>\n<a href=\"https://www.terraform.io/intro/getting-started/install.html\" rel=\"nofollow\">Install Terraform</a><br/>\n<a href=\"http://docs.ansible.com/ansible/intro_installation.html\" rel=\"nofollow\">Ansible Installation</a><br/>\n<a href=\"https://www.tutorialspoint.com/mysql/mysql-installation.htm\" rel=\"nofollow\">MySQL Installation</a><br/>\n<a href=\"https://www.vagrantup.com/docs/installation/\" rel=\"nofollow\">Installing Vagrant</a><br/>\n<a href=\"http://dev.mysql.com/downloads/connector/python/\" rel=\"nofollow\">Download Connector/Python</a><br/>\n<a href=\"https://docs.docker.com/engine/installation/linux/ubuntulinux/\" rel=\"nofollow\">Docker Ubuntu Install</a></p>\n</blockquote>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/elasticsearch\">elasticsearch</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/SnowMasaya/AWS_Lambda_ChatBot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/SnowMasaya/AWS_Lambda_ChatBot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["spacebot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/8Tiui0eYzPE?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"spacebot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/079/datas/gallery.jpg\"/>\n<p>\n<i>The North and South of Jupiter</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"spacebot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/080/datas/gallery.jpg\"/>\n<p>\n<i>Photos of Mars from the MAST camera aborad Curiosity</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"spacebot \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/081/datas/gallery.jpg\"/>\n<p>\n<i>MyCn18: An Hourglass Nebula</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>What is SpaceBot - The Slack Bot for Space</h1>\n<p><a href=\"https://david-dm.org/mikelax/spacebot\" rel=\"nofollow\"><img alt=\"David\" data-canonical-url=\"https://img.shields.io/david/mikelax/spacebot.svg?maxAge=2592000\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--zszqsIDf--/https://img.shields.io/david/mikelax/spacebot.svg%3FmaxAge%3D2592000\"/></a>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"license\" data-canonical-url=\"https://img.shields.io/badge/license-Apache--2-blue.svg?maxAge=2592000\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--QxpayMLq--/https://img.shields.io/badge/license-Apache--2-blue.svg%3FmaxAge%3D2592000\"/></a></p>\n<p>Spacebot is a Slack bot that you can interact with to view images and information about space.\nIt makes use of information from NASA including their ever popular <a href=\"http://apod.nasa.gov/apod/astropix.html\" rel=\"nofollow\">Astronomy Picture of the Day</a> and <a href=\"http://mars.nasa.gov/\" rel=\"nofollow\">mars rovers</a> data.</p>\n<p>spacebot adds a new <code>/spacebot</code> slash command to your slack channels to allow you to easily see new and interesting images about space, astronomy, mars, and more. See the usage section below for details on the lists of available commands. </p>\n<p>NASA currently has two rovers that are exploring the surface of Mars, <em>Curiosity</em> and <em>Opportunity</em>. Opportunity was launched in 2003, while Curiosity was launched in 2011. <em>Spirit</em> was also launched as the second rover of the pair in 2003 but became disabled and ultimately decommissioned in 2011. </p>\n<p>Please contact me or open an issue if there is a command or data you would like to see added.</p>\n<h1>Install</h1>\n<p>Click the button below to add spacebot to your slack channel and get started.</p>\n<p><a href=\"https://slack.com/oauth/authorize?scope=commands&amp;client_id=8804364867.74269805537\" rel=\"nofollow\"><img alt=\"Add to Slack\" data-canonical-url=\"https://platform.slack-edge.com/img/add_to_slack.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--395OMcUy--/https://platform.slack-edge.com/img/add_to_slack.png\"/></a></p>\n<h1>Usage</h1>\n<p>Please <a href=\"http://slashspacebot.com/\" rel=\"nofollow\">see the instructions page</a> that lists all the commands available.</p>\n<p><em>Sample command</em> - Run the following command to see images from the Opportunity rover atop the <a href=\"http://mars.nasa.gov/multimedia/images/?ImageID=7789\" rel=\"nofollow\">highest peak it has climbed</a> to date:  <code>/spacebot rovers photos opportunity navcam 4332</code></p>\n<h1>Technology Overview</h1>\n<p>Spacebot is set up and run with a <a href=\"http://thenewstack.io/tag/serverless-computing/\" rel=\"nofollow\">serverless tech stack</a>.\nThis project is built upon AWS Lambda using the aptly named <a href=\"https://github.com/serverless/serverless\" rel=\"nofollow\">serverless</a> framework for function management.</p>\n<h1>License</h1>\n<p><a href=\"LICENSE\" rel=\"nofollow\">Apache License 2.0</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">amazon-lambda</span></li><li><span class=\"cp-tag\">serverless</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://slashspacebot.com/?utm_source=devpost&amp;utm_medium=project&amp;utm_campaign=devpost\" rel=\"nofollow\" target=\"_blank\" title=\"http://slashspacebot.com/?utm_source=devpost&amp;utm_medium=project&amp;utm_campaign=devpost\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slashspacebot.com</span>\n</a></li>\n<li><a href=\"https://github.com/mikelax/spacebot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/mikelax/spacebot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["This is a solo project, I implemented the backend using the serverless framework. "]], ["awsBot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://player.vimeo.com/video/183916537?byline=0&amp;portrait=0&amp;title=0#t=\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We run multiple production workloads on AWS. As such almost always we have the AWS console and the CLI tools running in the background. Though using a combination of the console and the CLI tools you can do a lot, we still have a number of custom programs that we manually run. Our team is spread across the globe so we also use slack a lot. and love it. We have used off the shelf slack bots for various reminders and notification, so I was curious if we could bring the power of AWS automation to Slack. The idea was to be able to do significant portion of our AWS related work right from within slack. The hackathon acted as the perfect catalyst. </p>\n<h2>What it does</h2>\n<p>The awsBot takes instructions from a authorized slack channel and carries out common AWS tasks that you would typically do using the console or using AWS command line tools. Once the user is logged into Slack to their channel , they do not need to log in again. It uses the slack token combined with AWS IAM , roles to ensure security and access. Currently the bot can do a variety of common task with EC2 and S3 like for example you can start and stop instances. The bot can also quickly list the status of your instances in a particular region. Something we use quite often. Similarly for S3 it can list out buckets and the contents of a bucket.</p>\n<p>The bot can also take backups at an instance level and list out all available snapshots for an instance. Using cloud formation, the can create resources for you on AWS. The bot also provides live feedback as the status of your resources change in AWS, like when new resources are being deployed or when instances are being turned off, all without leaving Slack. </p>\n<h2>How I built it</h2>\n<p>The bot is based on a serverless architecture and uses AWS Lambda as the backbone eliminating the need to provision servers. The lambda functions are exposed using custom APIs built using AWS API gateway. Finally the APIs are integrated to Slack via custom integrations. The actual logic for the bot was written in Python using the boto3 SDK for AWS. To implement security I have leveraged AWS KMS to encrypt the Slack tokens and URLs. This will ensure that the bot only responds to commands from authorized slack channels.  Listing of the technologies behind the bot.</p>\n<ul>\n<li>AWS Lambda</li>\n<li>AWS API Gateway</li>\n<li>AWS KMS</li>\n<li>AWS Cloudformation</li>\n<li>Python with boto3</li>\n<li>Slack custom integrations</li>\n</ul>\n<h2>Challenges I ran into</h2>\n<p>Though serverless computing has been around for a while. It is not something that I have used extensively or have experience. As such it did take a little time to get used to the serverless computing architecture, but once there it was a lot of fun. We have already identified a few use cases within our team where servers computing would be a good fit.</p>\n<p>Security was one of the other primary challenges I had when I initially got this idea. Even before I had written the first line of code for the bot, I knew I needed to implement some of kind encryption along with roles. We have used client and server side encryption in the past, but to use it with a serverless architecture I needed something that could scale with deployment and not having to worry about managing the encryption and decryption process or manage keys. Thankfully AWS KMS fit right in. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>It's been just a couple of days since the bot was created and we have already deployed within two slack channels with two different teams. The initial response has been very encouraging with the bot serving over 2K requests and there have not been any issues with managing concurrent user requests as well. Though the bot currently only supports limited functions in EC2 and S3, it does it really well and in an efficient manner.</p>\n<h2>What I learned</h2>\n<p>The first and foremost, working and developing for serverless compute, AWS Lambda in particular. I also picked up how to build different types custom interrogations with slack.</p>\n<h2>What's next for awsBot</h2>\n<p>Expanding to cover other AWS services like RedShift and RDS, mainly because that is one of the other areas where we do a lot of work. I also plan to implement natural language processing.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li></ul>\n</div>\n</div>", [""]], ["slikipedia", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://player.vimeo.com/video/184892009?byline=0&amp;portrait=0&amp;title=0#t=\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"slikipedia \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/369/datas/gallery.jpg\"/>\n<p>\n<i>Flow - Successful query</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"slikipedia \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/827/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"slikipedia \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/828/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"slikipedia \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/829/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>slikipedia - a serverless slackbot powered by AWS</h1>\n<p>By harnessing the powers of AWS you can operate a serverless slackbot.  This bot is built using:</p>\n<ul>\n<li>Amazon API Gateway</li>\n<li>Amazon Lambda (two seperate functions)</li>\n<li>Amazon SNS</li>\n</ul>\n<p>Now you\u2019re thinking, why use two Lambda functions and SNS this could all be done in one function.  This is true but you will run into issues with timeouts in Slack.  There is a 3 second timeout that can be beat sometimes but not always.  We want a reliable bot that doesn't return timeout errors.  The first Amazon Lambda function validates there is a term to search for and responds to the user immediately that the query is being processed.  It then publishes a message to Amazon SNS to handoff the user\u2019s search.  This message is forwarded to the worker lambda function for processing as detailed in the Code flows below.</p>\n<h2>Setup</h2>\n<p><em>You will need an Amazon AWS and Slack account.</em></p>\n<h3>AWS</h3>\n<ul>\n<li>[ ] Create an API Gateway API\n\n<ul>\n<li>[ ] Create a method of type: POST</li>\n<li>[ ] Select Integration Type: Lambda</li>\n<li>[ ] Select the region in which you created your Lambda function</li>\n<li>[ ] Select the Lambda Function you created</li>\n<li>[ ] Click \"Integration Request\"</li>\n<li>[ ] At the bottom of this Page select \"Add mapping Template\"</li>\n<li>[ ] For content type please specify: \"application/x-www-form-urlencoded\"</li>\n<li>[ ] Insert the template code below into the text field for the template. This code converts a URL Encoded form post into JSON for your Lambda function to parse</li>\n<li>[ ] Deploy your API\n`<code>\n{ \"body\": $input.json($) }\n</code></li>\n</ul></li>\n<li>[ ] Create SNS topic\n\n<ul>\n<li>[ ] Give the topic a name and a display name</li>\n<li>[ ] Record ARN </li>\n</ul></li>\n<li>[ ] Create the first Lambda function that will process the Slack Requests(lambda-slack-concierge)\n\n<ul>\n<li>[ ] Select Create a Lambda function</li>\n<li>[ ] Choose Skip on select blueprint</li>\n<li>[ ] Choose API the API gateway as the trigger</li>\n<li>[ ] Add a name and description, choose python as the runtime</li>\n<li>[ ] Paste the content of lambda_function.py from the lambda-slack-concierge folder</li>\n<li>[ ] Change the sns_arn and ENCRYPTED_EXPECTED_TOKEN</li>\n</ul></li>\n<li>[ ] Create the second Lamda function that will work the SNS message and process the query(lambda-slack-worker)\n\n<ul>\n<li>[ ] Select Create a Lambda function</li>\n<li>[ ] Choose Skip on select blueprint</li>\n<li>[ ] Choose API the API gateway as the trigger</li>\n<li>[ ] Add a name and description, choose python as the runtime</li>\n<li>[ ] Change Code entry type to 'Upload a .ZIP File'</li>\n<li>[ ] Zip up the contents of the lambda-slack-worker folder and upload</li>\n</ul></li>\n</ul>\n<h3>Slack</h3>\n<ul>\n<li>[ ] Log into Slack then go to <a href=\"https://TEAMNAME.slack.com/apps/build\" rel=\"nofollow\">https://TEAMNAME.slack.com/apps/build</a></li>\n<li>[ ] Select Make a Custom Integration</li>\n<li>[ ] Select Slash Commands</li>\n<li>[ ] Add your slash command</li>\n<li>[ ] CLick Add Slash Command Intergation</li>\n<li>[ ] Add your AWS API Gateway URL to the URL field</li>\n<li>[ ] Keep method as POST</li>\n<li>[ ] Record your token</li>\n<li>[ ] Use the rest of the settings to customize the command(icon, description, help text..)</li>\n<li>[ ] Click Save Integration</li>\n</ul>\n<h2>Code flows</h2>\n<h3>Successful bot query</h3>\n<p><img alt=\"successful\" data-canonical-url=\"http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/369/datas/gallery.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--0eMBNcxB--/http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/369/datas/gallery.jpg\"/></p>\n<ol>\n<li>User uses slack command and a search term in Slack (/wiki iphone) which gets sent to Amazon API Gateway</li>\n<li>AWS API Gateway accepts the request and sends it to the Amazon Lambda concierge function</li>\n<li>The Amazon Lambda function does two things:\n\n<ul>\n<li>The function returns a message that the request is being serviced (\"ok, looking up iphone..\")</li>\n<li>Sends the search request to Amazon SNS</li>\n</ul></li>\n<li>Amazon SNS sends the message to the linked Amazon Lambda worker function</li>\n<li>Amazon Lambda worker function queries wikipedia for the search term</li>\n<li>The results are sent back to the worker function from Wikipedia</li>\n<li>Results are formatted and return to the slack user</li>\n</ol>\n<h3>Bot cannot find Wikipedia match</h3>\n<p><img alt=\"failed\" data-canonical-url=\"http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/827/datas/gallery.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--3Y4Vu8F3--/http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/827/datas/gallery.jpg\"/></p>\n<ol>\n<li>User uses slack command and a search term in Slack (/wiki g9is2ef ) which gets sent to Amazon API Gateway</li>\n<li>AWS API Gateway accepts the request and sends it to the Amazon Lambda concierge function</li>\n<li>The Amazon Lambda function does two things:\n\n<ul>\n<li>The function returns a message that the request is being serviced (\"ok, looking up g9is2ef..\")</li>\n<li>Sends the search request to Amazon SNS</li>\n</ul></li>\n<li>Amazon SNS sends the message to the linked Amazon Lambda worker function</li>\n<li>Amazon Lambda worker function queries wikipedia for the search term</li>\n<li>Wikipedia returns a failed lookup</li>\n<li>Message is sent back to user that the term cannot be found and offers a link to Google for the search term (Sorry, g9is2ef could not be found. Search Google for 'g9is2ef') </li>\n</ol>\n<h3>Search term too vaugue</h3>\n<p><img alt=\"vauge\" data-canonical-url=\"http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/829/datas/gallery.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--1yzV5Kln--/http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/829/datas/gallery.jpg\"/></p>\n<ol>\n<li>User uses slack command and a search term in Slack (/wiki tesla) which gets sent to Amazon API Gateway</li>\n<li>AWS API Gateway accepts the request and sends it to the Amazon Lambda concierge function</li>\n<li>The Amazon Lambda function does two things:\n\n<ul>\n<li>The function returns a message that the request is being serviced (\"ok, looking up tesla..\")</li>\n<li>Sends the search request to Amazon SNS</li>\n</ul></li>\n<li>Amazon SNS sends the message to the linked Amazon Lambda worker function</li>\n<li>Amazon Lambda worker function queries wikipedia for the search term</li>\n<li>Wikipedia returns up to eight suggested search terms based on the original vauge term </li>\n<li>Message is formatted and returned to user with the possible searhc options</li>\n</ol>\n<h3>Empty search</h3>\n<p><img alt=\"empty\" data-canonical-url=\"http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/828/datas/gallery.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--GCQBsXWH--/http://challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/828/datas/gallery.jpg\"/></p>\n<ol>\n<li>User uses slack command but doesn't add a search term (/wiki ), blank request gets sent to Amazon API Gateway</li>\n<li>AWS API Gateway accepts the request and sends it to the Amazon Lambda concierge function</li>\n<li>The Amazon Lambda function does two things:\n\n<ul>\n<li>The function validates the empty search and returns \"Great, now try to search for something.\" to the user </li>\n</ul></li>\n</ol>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/mcclanahan/slikipedia\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/mcclanahan/slikipedia\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["SiteChecker Slackbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/aKYoTsYbVAc?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"SiteChecker Slackbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/415/504/datas/gallery.jpg\"/>\n<p>\n<i>Architecture diagram</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"SiteChecker Slackbot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/415/505/datas/gallery.jpg\"/>\n<p>\n<i>Sample interaction with SiteChecker bot</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p><img alt=\"Icon\" data-canonical-url=\"https://raw.github.com/shinesolutions/sitechecker-slackbot/master/icon.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--KYmIGXH3--/https://raw.github.com/shinesolutions/sitechecker-slackbot/master/icon.png\"/></p>\n<p><a href=\"http://travis-ci.org/shinesolutions/sitechecker-slackbot\" rel=\"nofollow\"><img alt=\"Build Status\" data-canonical-url=\"https://img.shields.io/travis/shinesolutions/sitechecker-slackbot.svg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--EjFSBjBc--/https://img.shields.io/travis/shinesolutions/sitechecker-slackbot.svg\"/></a></p>\n<h2>SiteChecker Slackbot</h2>\n<p>SiteChecker is a <a href=\"http://martinfowler.com/articles/serverless.html\" rel=\"nofollow\">serverless</a> <a href=\"https://www.wired.com/2015/08/slack-overrun-bots-friendly-wonderful-bots/\" rel=\"nofollow\">Slack bot</a> for checking whether a website can be reached from multiple locations on the planet.</p>\n<p>For example, Twitter has been <a href=\"https://en.wikipedia.org/wiki/Censorship_of_Twitter\" rel=\"nofollow\">censored multiple times in various countries</a>. So even though a website is available from your country, it might not be from another country. You can ask SiteChecker bot <strong>\"sitechecker: Is twitter.com up?\"</strong></p>\n<p><a href=\"https://raw.github.com/shinesolutions/sitechecker-slackbot/master/docs/sample_interaction.jpg\" rel=\"nofollow\"><img alt=\"Sample Interaction Screenshot\" data-canonical-url=\"https://raw.github.com/shinesolutions/sitechecker-slackbot/master/docs/sample_interaction.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--mLn98Qof--/https://raw.github.com/shinesolutions/sitechecker-slackbot/master/docs/sample_interaction.jpg\"/></a></p>\n<p>The locations where the checking is performed from are based on the available <a href=\"http://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region\" rel=\"nofollow\">AWS Lambda regions</a>. SiteChecker currently only supports 8 regions, but the list will grow and it's easy to add a new region to SiteChecker infrastructure.</p>\n<h2>Architecture</h2>\n<p>SiteChecker has two components, a bot that's configured on Slack, and a piece of infrastructure on <a href=\"https://aws.amazon.com/\" rel=\"nofollow\">AWS</a>.</p>\n<p>The bot is a Slack <a href=\"https://api.slack.com/outgoing-webhooks\" rel=\"nofollow\">outgoing webhook</a> custom integration.</p>\n<p>The infrastructure on AWS is implemented with master worker pattern. The master Lambda function receives POST requests from the Slack bot via an API Gateway, it parses the message using a simple natural language processing <a href=\"https://www.npmjs.com/package/speakeasy-nlp\" rel=\"nofollow\">speakeasy-nlp</a> package in order to understand the message from Slack user and to identify the website to be checked. The master Lambda function then distributes the tasks for checking that website to worker Lambda functions across multiple AWS regions.</p>\n<p>Even though SiteChecker's current feature is limited to checking website availability, the architecture is suitable for any other cross-region checks. E.g. tracerouting from multiple cities, measuring response time from multiple cities.</p>\n<p><a href=\"https://raw.github.com/shinesolutions/sitechecker-slackbot/master/docs/architecture.jpg\" rel=\"nofollow\"><img alt=\"Architecture Diagram\" data-canonical-url=\"https://raw.github.com/shinesolutions/sitechecker-slackbot/master/docs/architecture.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--mBYup3OP--/https://raw.github.com/shinesolutions/sitechecker-slackbot/master/docs/architecture.jpg\"/></a></p>\n<h2>Installation</h2>\n<p>There are two parts to install, the bot on Slack, and the infrastructure on AWS.</p>\n<p>Let's install the bot first by creating a Slack outgoing webhook custom integration.</p>\n<ol>\n<li>Go to your Slack account's custom integrations page at <code>https://account.slack.com/apps/manage/custom-integrations</code> .</li>\n<li>The page will show the available custom integrations. Click on <strong>Outgoing WebHooks</strong> link.</li>\n<li>Click <strong>Add Configuration</strong> button.</li>\n<li>Click <strong>Add Outgoing WebHooks integration</strong> button.</li>\n<li>Fill in the integration settings:\n\n<ul>\n<li><strong>Channel</strong>: select the channel where you want the bot to be available from.</li>\n<li><strong>Trigger Word(s)</strong>: specify words to trigger the bot, e.g. <strong>sitechecker:</strong></li>\n<li><strong>URL(s)</strong>: leave this empty for now, we'll go back to this option after the infrastructure is built.</li>\n<li><strong>Token</strong>: Slack will generate the token for you, this token will be configured in master Lambda function.</li>\n<li><strong>Descriptive Label</strong>: description for this custom integration, e.g. <strong>SiteChecker Outgoing WebHook</strong></li>\n<li><strong>Customize Name</strong>: the name of your bot, e.g. <strong>SiteChecker</strong></li>\n<li><strong>Customize Icon</strong>: upload SiteChecker <a href=\"https://raw.githubusercontent.com/shinesolutions/sitechecker-slackbot/master/icon.png\" rel=\"nofollow\">radar icon</a></li>\n</ul></li>\n<li>Click <strong>Save Settings</strong> button.</li>\n</ol>\n<p>Next, the second part is to create the infrastructure on AWS.</p>\n<ol>\n<li><a href=\"https://nodejs.org/en/download/package-manager/\" rel=\"nofollow\">Install node.js</a> .</li>\n<li>Set up <a href=\"https://serverless.com/framework/docs/providers/aws/setup/\" rel=\"nofollow\">AWS credential</a>, to be used by <a href=\"https://serverless.com/\" rel=\"nofollow\">Serverless framework</a>.</li>\n<li>Clone the repository: <code>git clone https://github.com/shinesolutions/sitechecker-slackbot</code> .</li>\n<li>Configure the Slack token from the outgoing webhook custom integration settings in <code>master/conf/config.json</code> . Add the token to <code>allowedTokens</code> array property.</li>\n<li>Install tools and dependencies: <code>make tools deps</code> .</li>\n<li>Build the worker Lambda functions: <code>make deploy-workers</code> .</li>\n<li>Build the master Lambda function and API Gateway: <code>make deploy-master</code> . The output of this command will show a POST endpoint, e.g. <code>https://id.execute-api.us-east-1.amazonaws.com/prod/handle</code></li>\n<li>Return to the Slack Outgoing WebHook custom integration settings page, and copy paste the POST endpoint from the command output to <strong>URL(s)</strong> setting, then click <strong>Save Settings</strong> button.</li>\n</ol>\n<h2>Usage</h2>\n<ol>\n<li>Join the Slack channel configured in the bot setting.</li>\n<li>Start asking SiteChecker bot <strong>\"sitechecker: Is twitter.com up?\"</strong>, <strong>\"sitechecker: Is facebook.com down?\"</strong> .</li>\n</ol>\n<h2>Configuration</h2>\n<p>SiteChecker Slack bot master and worker Lambda functions can be configured in <a href=\"https://github.com/shinesolutions/sitechecker-slackbot/blob/master/master/conf/config.json\" rel=\"nofollow\">master/conf/config.json</a> and <a href=\"https://github.com/shinesolutions/sitechecker-slackbot/blob/master/worker/conf/config.json\" rel=\"nofollow\">worker/conf/config.json</a> files respectively.</p>\n<p>Master configuration:</p>\n<table class=\"responsive\"><thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>allowedTokens</td>\n<td>An array of allowed Slack tokens. If any is specified, then only incoming requests with that token are accepted. If left empty, then all incoming requests are accepted.</td>\n</tr>\n<tr>\n<td>regions</td>\n<td>An array of objects with region name and description.</td>\n</tr>\n</tbody></table>\n<p>Worker configuration:</p>\n<table class=\"responsive\"><thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>method</td>\n<td>HTTP method to be used for checking website availability.</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>timeout in milliseconds for the HTTP request sent for checking the website.</td>\n</tr>\n</tbody></table>\n<h2>Development</h2>\n<p>Install <a href=\"https://serverless.com/\" rel=\"nofollow\">Serverless</a> framework and other tools:</p>\n<pre class=\"language-nolang\"><code>make tools\n</code></pre>\n<p>Download library dependencies:</p>\n<pre class=\"language-nolang\"><code>make deps\n</code></pre>\n<p>Build the infrastructure with default prod stage:</p>\n<pre class=\"language-nolang\"><code>make deploy\n</code></pre>\n<p>Remove the infrastructure with default prod stage:</p>\n<pre class=\"language-nolang\"><code>make remove\n</code></pre>\n<p>Specify custom stage:</p>\n<pre class=\"language-nolang\"><code>STAGE=dev make deps deploy remove\n</code></pre>\n<h2>Colophon</h2>\n<p>SiteChecker radar icon made by <a href=\"http://www.flaticon.com/authors/trinh-ho\" rel=\"nofollow\">Trinh Ho</a> from <a href=\"http://www.flaticon.com\" rel=\"nofollow\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" rel=\"nofollow\">CC 3.0 BY</a>.</p>\n<p><a href=\"https://www.youtube.com/watch?v=aKYoTsYbVAc\" rel=\"nofollow\">Demo video</a> background music <a href=\"https://soundcloud.com/jamesmacdj/my-love-rework-james-mac-vall\" rel=\"nofollow\">My Love (Rework) by James Mac &amp; VALL</a>.</p>\n<p>This project is a submission to <a href=\"https://awschatbot.devpost.com/\" rel=\"nofollow\">AWS Serverless Chatbot Hackathon 2016</a> - with self-imposed 24-hour total time limit scattered across several days/nights.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">serverless</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/natural-language-processing\">natural-language-processing</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/shinesolutions/sitechecker-slackbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/shinesolutions/sitechecker-slackbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Discount Hero", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/xEKEf5ZUeU8?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Discount Hero \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/049/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>What it does</h2>\n<p>Discount Hero is a messenger bot that helps users to seek out offers, discounts and savings from their favourite brands. We index 1000's of offers and respond to user searches in a simple, low bandwidth, messaging environment. Users can subscribe for Offer Notifications from their preferred brands.</p>\n<h2>How we built it</h2>\n<p>AWS lambda functions and API gateway to develop Micro Services that interface with Microsoft Bot Framework and Wit.ai for Natural Language Understanding. Data is stored in an AWS RDS Mysql database.</p>\n<h2>Challenges we ran into</h2>\n<p>Developing in such an early ecosystem was full of challenges ranging from lack of documentation, early beta products that were updated with breaking changes meaning we had to refactor code several times. We also had to learn and understand a completely new way of interacting with the end users via a pure text interface.</p>\n<h2>What's next for Discount Hero</h2>\n<p>We plan to launch across multiple messenger platforms and countries introducing more Offer notification features.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mysql\">mysql</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wit-ai\">wit.ai</a></span></li><li><span class=\"cp-tag\">microsoft-bot-framework</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/asp-net\">asp.net</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://discounthero.chat\" rel=\"nofollow\" target=\"_blank\" title=\"http://discounthero.chat\">\n<i class=\"ss-icon ss-link\"></i>\n<span>discounthero.chat</span>\n</a></li>\n<li><a href=\"https://slack.com/oauth/authorize?scope=incoming-webhook,bot&amp;client_id=31781202192.55176658530&amp;redirect_uri=https%3a%2f%2fslack.botframework.com%2fHome%2fauth&amp;state=DiscountHero\" rel=\"nofollow\" target=\"_blank\" title=\"https://slack.com/oauth/authorize?scope=incoming-webhook,bot&amp;client_id=31781202192.55176658530&amp;redirect_uri=https%3a%2f%2fslack.botframework.com%2fHome%2fauth&amp;state=DiscountHero\">\n<i class=\"ss-icon ss-link\"></i>\n<span>slack.com</span>\n</a></li>\n<li><a href=\"https://www.facebook.com/discounthero99\" rel=\"nofollow\" target=\"_blank\" title=\"https://www.facebook.com/discounthero99\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.facebook.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["Chaos Slackbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/288CbOxoiOo?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Chaos Slackbot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/415/514/datas/gallery.jpg\"/>\n<p>\n<i>Architecture diagram</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Chaos Slackbot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/152/datas/gallery.jpg\"/>\n<p>\n<i>Sample messages analysed by Chaos bot</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p><img alt=\"Icon\" data-canonical-url=\"https://raw.github.com/shinesolutions/chaos-slackbot/master/icon.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--ZbmcL7ZY--/https://raw.github.com/shinesolutions/chaos-slackbot/master/icon.png\"/></p>\n<p><a href=\"http://travis-ci.org/shinesolutions/chaos-slackbot\" rel=\"nofollow\"><img alt=\"Build Status\" data-canonical-url=\"https://img.shields.io/travis/shinesolutions/chaos-slackbot.svg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--sPkt8lOl--/https://img.shields.io/travis/shinesolutions/chaos-slackbot.svg\"/></a></p>\n<h2>Chaos Slackbot</h2>\n<p>Chaos is a <a href=\"http://martinfowler.com/articles/serverless.html\" rel=\"nofollow\">serverless</a> <a href=\"https://www.wired.com/2015/08/slack-overrun-bots-friendly-wonderful-bots/\" rel=\"nofollow\">Slack bot</a> for randomly terminating EC2 instance from <a href=\"http://docs.aws.amazon.com/autoscaling/latest/userguide/AutoScalingGroup.html\" rel=\"nofollow\">Auto Scaling Groups</a> whitelist.</p>\n<p>It's inspired by <a href=\"https://github.com/Netflix/SimianArmy/wiki/Chaos-Monkey\" rel=\"nofollow\">Chaos Monkey</a>, but the randomness is determined by what the chatters are talking about on a Slack channel. The bot wouldn't know up front what the humans will be saying and when they will say it, that's natural randomness we're taking advantage of.</p>\n<p>Here's an example of a conversation between Bruce Wayne and Tony Stark on a Slack channel, which messages are analysed by Chaos bot, and are used to determine whether to terminate a random EC2 instance.</p>\n<p><a href=\"https://raw.github.com/shinesolutions/chaos-slackbot/master/docs/sample_interaction.jpg\" rel=\"nofollow\"><img alt=\"Sample Interaction Screenshot\" data-canonical-url=\"https://raw.github.com/shinesolutions/chaos-slackbot/master/docs/sample_interaction.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--8U1QEe7z--/https://raw.github.com/shinesolutions/chaos-slackbot/master/docs/sample_interaction.jpg\"/></a></p>\n<h2>Architecture</h2>\n<p>Chaos has two components, a bot that's configured on Slack, and a piece of infrastructure on <a href=\"https://aws.amazon.com/\" rel=\"nofollow\">AWS</a>.</p>\n<p>The bot is a Slack <a href=\"https://api.slack.com/outgoing-webhooks\" rel=\"nofollow\">outgoing webhook</a> custom integration.</p>\n<p>The infrastructure on AWS is a Lambda function that receives POST requests from the Slack bot via an API Gateway, it parses the messages using a simple natural language processing <a href=\"https://www.npmjs.com/package/speakeasy-nlp\" rel=\"nofollow\">speakeasy-nlp</a> package, those messages will then be used to determine whether to terminate a random EC2 instance from the specified Auto Scaling Groups.</p>\n<p>Chaos currently supports a mode called <code>sentiment</code>, which processes the messages based on positive/negative sentiment using speakeasy-nlp. It is easy to introduce new modes in the future for other processing algorithm(s).</p>\n<p><a href=\"https://raw.github.com/shinesolutions/chaos-slackbot/master/docs/architecture.jpg\" rel=\"nofollow\"><img alt=\"Architecture Diagram\" data-canonical-url=\"https://raw.github.com/shinesolutions/chaos-slackbot/master/docs/architecture.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--Z2ot9hUY--/https://raw.github.com/shinesolutions/chaos-slackbot/master/docs/architecture.jpg\"/></a></p>\n<h2>Installation</h2>\n<p>There are two parts to install, the bot on Slack, and the infrastructure on AWS.</p>\n<p>Let's install the bot first by creating a Slack outgoing webhook custom integration.</p>\n<ol>\n<li>Go to your Slack account's custom integrations page at <code>https://account.slack.com/apps/manage/custom-integrations</code> .</li>\n<li>The page will show the available custom integrations. Click on <strong>Outgoing WebHooks</strong> link.</li>\n<li>Click <strong>Add Configuration</strong> button.</li>\n<li>Click <strong>Add Outgoing WebHooks integration</strong> button.</li>\n<li>Fill in the integration settings:\n\n<ul>\n<li><strong>Channel</strong>: select the channel where you want the bot to be running on, pick a channel with many users, e.g. #general</li>\n<li><strong>Trigger Word(s)</strong>: leave this empty because we want to consume all messages</li>\n<li><strong>URL(s)</strong>: leave this empty for now, we'll go back to this option after the infrastructure is built.</li>\n<li><strong>Token</strong>: Slack will generate the token for you, this token will be configured in Lambda function.</li>\n<li><strong>Descriptive Label</strong>: description for this custom integration, e.g. <strong>Chaos Outgoing WebHook</strong></li>\n<li><strong>Customize Name</strong>: the name of your bot, e.g. <strong>Chaos</strong></li>\n<li><strong>Customize Icon</strong>: upload Chaos <a href=\"https://raw.githubusercontent.com/shinesolutions/chaos-slackbot/master/icon.png\" rel=\"nofollow\">astro monkey icon</a></li>\n</ul></li>\n<li>Click <strong>Save Settings</strong> button.</li>\n</ol>\n<p>Next, the second part is to create the infrastructure on AWS.</p>\n<ol>\n<li><a href=\"https://nodejs.org/en/download/package-manager/\" rel=\"nofollow\">Install node.js</a> .</li>\n<li>Set up <a href=\"https://serverless.com/framework/docs/providers/aws/setup/\" rel=\"nofollow\">AWS credential</a>, to be used by <a href=\"https://serverless.com/\" rel=\"nofollow\">Serverless framework</a>.</li>\n<li>Clone the repository: <code>git clone https://github.com/shinesolutions/chaos-slackbot</code> .</li>\n<li>Configure the Slack token from the outgoing webhook custom integration settings in <code>conf/config.json</code> . Add the token to <code>allowedTokens</code> array property.</li>\n<li>Configure the Auto Scaling Group names in <code>conf/config.json</code> to <code>autoScalingGroupNames</code> array property. (TODO: move this to SimpleDB so this can be programatically configured outside of Chaos Slackbot)</li>\n<li>Install tools and dependencies: <code>make tools deps</code> .</li>\n<li>Build the Lambda function and API Gateway: <code>make deploy</code> . The output of this command will show a POST endpoint, e.g. <code>https://id.execute-api.us-east-1.amazonaws.com/prod/handle</code></li>\n<li>Return to the Slack Outgoing WebHook custom integration settings page, and copy paste the POST endpoint from the command output to <strong>URL(s)</strong> setting, then click <strong>Save Settings</strong> button.</li>\n</ol>\n<h2>Usage</h2>\n<ol>\n<li>Have the users join the Slack channel configured in the bot setting, e.g. #general .</li>\n<li>Chaos bot will start consuming the messages from that channel, and when the algorithm hits, it will terminate a random EC2 instance.</li>\n</ol>\n<h2>Configuration</h2>\n<p>Chaos Slack bot Lambda function can be configured in <a href=\"https://github.com/shinesolutions/sitechecker-slackbot/blob/master/conf/config.json\" rel=\"nofollow\">conf/config.json</a> .</p>\n<table class=\"responsive\"><thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>allowedTokens</td>\n<td>An array of allowed Slack tokens. If any is specified, then only incoming requests with that token are accepted. If left empty, then all incoming requests are accepted.</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>Chaos mode to determine message processing rule, currently only supports <code>sentiment</code> .</td>\n</tr>\n<tr>\n<td>ignoredUserNames</td>\n<td>An array of Slack usernames to be ignored, at the very least you want to ignore <code>slackbot</code> .</td>\n</tr>\n<tr>\n<td>controlledStartHour</td>\n<td>Start hour of the day when Chaos bot is allowed to terminate EC2 instance. Valid value: 0 to 24.</td>\n</tr>\n<tr>\n<td>controlledEndHour</td>\n<td>End hour of the day when Chaos bot is no longer allowed to terminate EC2 instance. Valid value: 0 to 24.</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>Timezone for controlledStartHour and controlledEndHour. Use <a href=\"http://momentjs.com/timezone/\" rel=\"nofollow\">Moment Timezone</a> to find valid timezone values.</td>\n</tr>\n<tr>\n<td>terminationLimit</td>\n<td>The number of message hits before Chaos terminates a random EC2 instance. The specified mode determines how a message hit is calculated.</td>\n</tr>\n<tr>\n<td>autoScalingGroupNames</td>\n<td>An array of whitelisted Auto Scaling Group names. EC2 instances that belong to these Auto Scaling Groups are candidates for termination.</td>\n</tr>\n<tr>\n<td>simpleDBDomainName</td>\n<td>The name of SimpleDB database domain.</td>\n</tr>\n</tbody></table>\n<h2>Development</h2>\n<p>Install <a href=\"https://serverless.com/\" rel=\"nofollow\">Serverless</a> framework and other tools:</p>\n<pre class=\"language-nolang\"><code>make tools\n</code></pre>\n<p>Download library dependencies:</p>\n<pre class=\"language-nolang\"><code>make deps\n</code></pre>\n<p>Build the infrastructure with default prod stage:</p>\n<pre class=\"language-nolang\"><code>make deploy\n</code></pre>\n<p>Remove the infrastructure with default prod stage:</p>\n<pre class=\"language-nolang\"><code>make remove\n</code></pre>\n<p>Specify custom stage:</p>\n<pre class=\"language-nolang\"><code>STAGE=dev make deps deploy remove\n</code></pre>\n<h2>Colophon</h2>\n<p>Chaos Slackbot astro monkey icon made by <a href=\"http://www.flaticon.com/authors/madebyoliver\" rel=\"nofollow\">Madebyoliver</a> from <a href=\"http://www.flaticon.com\" rel=\"nofollow\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" rel=\"nofollow\">CC 3.0 BY</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=q5w5VX4tAD4\" rel=\"nofollow\">Demo video</a> background music <a href=\"https://www.youtube.com/watch?v=q5w5VX4tAD4\" rel=\"nofollow\">Epic and Dark Electronic Music - Welcome to Chaos (Copyright and Royalty Free) by Ross Bugden</a>.</p>\n<p>This project is a submission to <a href=\"https://awschatbot.devpost.com/\" rel=\"nofollow\">AWS Serverless Chatbot Hackathon 2016</a> - with self-imposed 24-hour total time limit scattered across several days/nights.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">serverless</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/natural-language-processing\">natural-language-processing</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/shinesolutions/chaos-slackbot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/shinesolutions/chaos-slackbot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Virtual Human", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/ZvrNIM83M08?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I built a bot for my company but people didn't really use it much because it had limitations to how many question it can respond to.</p>\n<h2>What it does</h2>\n<p>It helps developers or bot owners, train their bots</p>\n<h2>How I built it</h2>\n<p>The application is built using Nodejs</p>\n<h2>Challenges I ran into</h2>\n<ul>\n<li>Getting slack-data using the claudiajs bot builder library. I had to modify it and publish it under a new npm package (claudia-bot-builder-fork)</li>\n</ul>\n<h2>Accomplishments that I'm proud of</h2>\n<ul>\n<li>Being able to connect Facebook messenger and slack</li>\n<li>Being able to serve an entire site from aws lambda</li>\n</ul>\n<h2>What I learned</h2>\n<ul>\n<li>How to properly use IAM user credentials</li>\n<li>Claudiajs deployment tool</li>\n<li>How to store and retrieve information from Dynamodb.</li>\n</ul>\n<h2>What's next for Human assisted bot</h2>\n<ul>\n<li>Build a live chat widget that will be partially robotic and partially human</li>\n</ul>\n<h2>problem</h2>\n<p>Chat bots don\u2019t always know the right answer to give to users.\nHowever, they are good at learning, i.e. if you provided them with the answer to the asked question, they will always respond correctly to the users.</p>\n<h2>solution</h2>\n<p>So, we are creating a system called Human assisted bot.</p>\n<p>A Bot monitoring tool that will capture user questions to the bot and send them to a slack channel. Any time, the bot does not have an answer, it will ping a human in slack and then the human will provide the answer to the bot. In turn, the bot will respond to the user.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://zt27udr0uf.execute-api.us-east-1.amazonaws.com/latest/slack-home\" rel=\"nofollow\" target=\"_blank\" title=\"https://zt27udr0uf.execute-api.us-east-1.amazonaws.com/latest/slack-home\">\n<i class=\"ss-icon ss-link\"></i>\n<span>zt27udr0uf.execute-api.us-east-1.amazonaws.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the system that sends and receive QA pair to and from slack.", "I Created Human Assist AI messenger bot and work on integrating the system to store  the answer in Knowledge base  ."]], ["slackcat", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/2u1oC6SUzCM?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"slackcat \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/209/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"slackcat \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/210/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"slackcat \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/211/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Part funny prank, part useful tool. I ran across the http.cat website and I wanted something that would easily show you http codes in a fun, clever way within our Slack team.</p>\n<h2>What it does</h2>\n<p>Monitors Slack messages for anything that looks like and HTTP status code. It then replies with the image URL from the http.cat website which will be inlined by Slack.</p>\n<h2>How I built it</h2>\n<p>It was originally built using Spark as a microservice running on Heroku (easily extensible to any other similar platform). I adapted it to run on AWS Lambda, which was a very simple exercise.</p>\n<h2>Challenges I ran into</h2>\n<p>Being a very simple service, there were not too many challenges. Adding the AWS API Endpoint was a little tricky, but I figured that out by following the examples.</p>\n<p>There were some challenges writing the parser as it had to handle things like numbers over 1000 with commas (e.g., \" I raised $300,404\" shouldn't get a response, while \"Got an http 502, and crashed the app\" should). For these things I wrote tests with JUnit to ensure the parser worked as expected.</p>\n<h2>What I learned</h2>\n<p>I learned how simple it is to build microservices. I went through the whole process of configuring a Maven build, with JUnit tests executing on every build and automated deployment when pushing to GitHub.</p>\n<h2>What's next for slackcat</h2>\n<p>It would be great to have the ability to search for an unknown code. For sample, using a slash command in Slack, you could do something like \"/slackcat not found\" and it would reply with \"<a href=\"http://http.cat/404\" rel=\"nofollow\">http://http.cat/404</a>\".</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/colemarkham/slackcat/tree/lamba\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/colemarkham/slackcat/tree/lamba\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["wukong-lambda", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/6dwpmYdcbCE?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"wukong-lambda \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/405/804/datas/gallery.jpg\"/>\n<p>\n<i>wukong-lambda</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>wukong-lambda</h1>\n<p>This is a bot service named wukong and running in AWS Lambda. After a little technical investigation, we decided to use Python than NodeJS as the Lambda funtion runtime.</p>\n<p>Slack room is at <a href=\"https://huaguomountain.slack.com\" rel=\"nofollow\">https://huaguomountain.slack.com</a>.</p>\n<h2>Reference:</h2>\n<ul>\n<li>The AWS competition information can be found at <a href=\"http://awschatbot.devpost.com/\" rel=\"nofollow\">http://awschatbot.devpost.com/</a></li>\n<li>AWS Serverless Chatbot Sample <a href=\"https://github.com/awslabs/aws-serverless-chatbot-sample\" rel=\"nofollow\">https://github.com/awslabs/aws-serverless-chatbot-sample</a></li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/cafeliker/wukong-lambda\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/cafeliker/wukong-lambda\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I initialized this project and planed to try Lambda with slack bot. Performed the technical investigation and invited Ludwig and Jun joined our team.", "", ""]], ["Repo Info", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/JgQGHOEIM14?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Repo Info \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/037/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Repo Info \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/038/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Repo Info \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/414/039/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I wanted to play around with Amazon Lambda, Slack, and the libraries.io API. This was an excellent chance to combine all 3.</p>\n<h2>What it does</h2>\n<p>Health Check for Github Libraries - Identify strengths and weaknesses of public Github libraries without leaving Slack.\nPulls information about any Public Github library linked in Slack from the Github API / Libraries.io API, and posts an overview of the data in </p>\n<h2>How I built it</h2>\n<p>I started by typing into the Lambda console directly in the browser, and got a basic slack bot working, but soon needed to include npm libraries, and wanted better version control. Claudia.js provides all these things so I adapted the code to run in that framework (although not using the claudia-bot-builder library as it didn't seem to support the Slack Events API).</p>\n<p>The bot itself runs on AWS Lambda, the OAuth authentication works using API Gateway &amp; redirects, the tokens are stored in DynamoDB and even the website is a static website hosted on S3, so there are no EC2 servers required at all for any step of the process!</p>\n<h2>Challenges I ran into</h2>\n<p>Slack has a lot of documentation (which is good), but there are so many different APIs and methods of integrating that it took me a long time to figure out exactly which flow &amp; APIs were needed to get the flow I wanted.</p>\n<p>It was difficult to get Lambda to respond to Slack's message within their 3 second deadline, and continue processing. In the end, I work around this limitation by calling a second lambda function from the first function so that the first function could return immediately, and the second function could continue to process in the background. (<a href=\"https://claudiajs.com/tutorials/slack-delayed-responses.html\" rel=\"nofollow\">https://claudiajs.com/tutorials/slack-delayed-responses.html</a>)</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>There are lots of tests (at least for the testable parts!)</p>\n<h2>What I learned</h2>\n<p>How to use AWS Lambda &amp; integrate into Slack.</p>\n<h2>What's next for Repo Info</h2>\n<p>There's a lot of features I'd like to add:</p>\n<ul>\n<li>Package managers this repo is release on (eg. \"available on npm, bower\")</li>\n<li>Release Frequency</li>\n<li>Number of regular contributors (Bus count)</li>\n<li>Number of Transitive dependencies (how big is the dependency tree?)</li>\n<li>Issues / Pull requests closed / opened recently</li>\n<li>Transitive licensing issues?</li>\n<li>Github badges / shields: eg. Travis' \"Build passing\" or the \"Dependencies up-to-date\" etc. Just scrape the readme for these?</li>\n<li>Security issues? Known bad versions of dependencies? nodesecurity</li>\n<li>Avg. time to fix when a vulnerability becomes known?</li>\n<li>Score each area and colour it red/green in the Slack window with formatting</li>\n<li>Code-Climate score?</li>\n<li>Overall health rating? Some function of the above fields.</li>\n<li>A graph of health-ratings? A bad \"red\" dependency colours the tree that depends on it?</li>\n<li>\"Star on Github\" button</li>\n<li>Test coverage (integrate with travis?)</li>\n<li>Change colour of attachment sidebar by sending \"color: #ff0000\" in chat.postMessage. Red / orange / green for repo health.</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag\">s3</span></li><li><span class=\"cp-tag\">claudia</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/github\">github</a></span></li><li><span class=\"cp-tag\">libraries.io</span></li><li><span class=\"cp-tag\">serverless</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://gitrepo.info\" rel=\"nofollow\" target=\"_blank\" title=\"https://gitrepo.info\">\n<i class=\"ss-icon ss-link\"></i>\n<span>gitrepo.info</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Nimbus", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/_QbtT73qq3M?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Nimbus \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/413/915/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We use multiple cloud providers, where machines are scattered across many data centers and regions. We were looking for a way to ask simple questions about our cloud machines.</p>\n<h2>What it does</h2>\n<p>Interact with cloud providers to receive info about servers inventory </p>\n<h2>How we built it</h2>\n<p>We use python for the code, all configuration is stored in dynamodb and is encrypted by using Amazon kms</p>\n<h2>What's next for Nimbus</h2>\n<p>More functionality and move from read only to read/write functionality  </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/rounds/nimbus\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/rounds/nimbus\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Did PRs and Python advice.", "", ""]], ["BusyBeeBot (A Slack App)", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/hQX7sWmD124?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Why I entered the Hackathon</h2>\n<p>I was recently certified as an Amazon Web Services, Certified Solutions Arthitect (Associate), and began working on the Certified Developer certification. In addition, I began learning AWS Lambda since the certifications do not currently cover AWS Lambda.  So, when I saw this hackathon, I thought it was a great way to get \"real-life\" hands-on practice with AWS Lambda and DynamoDB.  </p>\n<h2>Inspiration for BusyBeeBot</h2>\n<p>Slack is used by a lot of organizations.  Most of these organizations have busy individuals, who we will affectionally call \"busy bees\".  It is easy to be so involved in the work that we sometimes don't take notice of how we feel.  If we're feeling good, it's nice to realize that. If we're feeling not-so-good, it's nice to try to fix that.  BusyBeeBot asks, inspires, and tracks.</p>\n<h2>What BusyBeeBot does</h2>\n<p>BusyBeeBot is a Slack App that asks users how they\u2019re feeling and, if needed, provides motivational quotes based on their responses.  BusyBeeBot will remind users daily to check-in, but users may choose to answer the questions at a later time, or multiple times a day if desired.  Responses are stored, allowing users to generate a report on demand.</p>\n<h2>How I built BusyBeeBot</h2>\n<ul>\n<li>Code is written in Java 8.</li>\n<li>Code uses Maven for dependencies and building jars.</li>\n<li>Slack commands call endpoints provided by AWS API Gateway which then routes the \"Integration Request\" to the appropriate AWS Lambda function.</li>\n<li>Code is deployed as AWS Lambda functions.  There are 6 functions in total for:\n\n<ul>\n<li>handling authentication</li>\n<li>handling events sent from the Events API</li>\n<li>handling the /checkin slash command</li>\n<li>handling the /beereport slash command (generates a report)</li>\n<li>handling interactive messages (the actual questions with the \"yes/no\" buttons)</li>\n<li>checking the users to see who should get a reminder and sending a reminder through Slack (please note that this is a scheduled job and doesn't need to interact with API Gateway)</li>\n</ul></li>\n<li>AWS DynamoDB is used for all persistence of raw data (e.g. Slack credentials, user responses, tracking of reminders sent, etc.)</li>\n<li>There is a Slack app which includes \n\n<ul>\n<li>a bot user named BusyBeeBot</li>\n<li>a few relevant slash commands (/checkin and /beereport)</li>\n<li>incoming webhooks</li>\n<li>use of the Events API</li>\n<li>use of the Web API</li>\n</ul></li>\n<li>AWS S3 is used to store the installation web page, and user reports in CSV format.</li>\n<li>AWS Route53 is used to register a domain name and point to the web page hosted in AWS S3.</li>\n<li>AWS CloudWatch is used heavily indirectly by these services, and was used a lot for checking logs and performance.</li>\n</ul>\n<h2>Challenges I ran into</h2>\n<p>I'll preface this by saying that I used to be a strong Java developer but am a little rusty now. So my goals with this project were to \n    (a) refresh my Java skills and use Java 8 \n    (b) do a real-life example using AWS Lambda and DynamoDB as I prepare for the AWS Certified Developer Associate exam \n    (c) develop something fun or useful.</p>\n<p>The challenges I ran into were:</p>\n<ul>\n<li>Hands on experience with Java 8 - I haven't coded in Java in years and then it was Java 5.  I frequently reverted to Groovy on Grails conventions while coding the Java. Thankfully, the IDE will warn you pretty quickly.</li>\n<li>A lot of the AWS Lambda examples were not in Java. I don't know Node.js or Python. Though I will likely learn them someday, I didn't have enough time right now, plus Java was my goal.  There weren't even any AWS Lambda blueprints in Java. So coding this wasn't as fast as I'd hoped. But the next one should be faster. :-)</li>\n<li>API Gateway can be tricky to use. I was pre-warned but I experienced it for myself.</li>\n<li>Slack provides a lot of good documentation, but their API is very inconsistent.  Sometimes it's a GET, sometimes it's a POST, sometimes the JSON is in the body, sometimes the JSON is an encoded string sent as one payload string, sometimes you can override the channel but other times you cannot, etc. etc.  However, I found the Slack support team to be extremely helpful when I had issues or questions.</li>\n<li>The Slack portions took much longer than I anticipated for the reasons stated above.</li>\n<li>AWS Lambda cold-start issues.  This is by far the biggest challenge.  I had read about the cold-start issues, and they can be pretty bad.  At times I saw executions times of over 12 seconds (but once the code was running, the execution times were typically in the microseconds).  The worse part about this is that Slack has a 3-second timeout, and that cannot be changed.  While a 3-second timeout is not a bad thing, it led to very confusing/frustrating issues while using the app.  Sometimes you'll get a Slack message saying \"Darn\" (but then the real app message would come shortly thereafter).  Sometimes you'd see duplicate posts from the app because Slack retries on failure. Sometimes there were other confusing things that happened.  I have tried numerous things to solve this issue, and I'm not sure it wont happen.  I considered not submitting due to this issue, but decided to submit anyway.  Should you see a timeout issue, please give it a second or two, and the response should still show.</li>\n</ul>\n<h2>Accomplishments that I'm proud of</h2>\n<ul>\n<li>I actually had so many issues at the beginning trying to get an end-to-end example working, but didn't give up.<br/></li>\n<li>I found some showstoppers within the last 3 days of the hackathon, and though I was starting a new job and fighting a cold, I had to rewrite a good portion of the code.</li>\n<li>One of my testers said \"BusyBeeBot makes me feel better about not feeling good\".</li>\n</ul>\n<h2>What I learned</h2>\n<ul>\n<li>A whole lot about Slack APIs.</li>\n<li>Nitty gritty details of AWS Lambda, API Gateway, DynamoDB, etc.</li>\n<li>That though AWS Lambda seems like it should be about microservices, as long as cold-start issues remain, I'll use as few Lambda functions as possible so that there are fewer functions that can run cold (I'd actually rewrite my code now for that but ran out of time).</li>\n</ul>\n<h2>What's next for BusyBeeBot</h2>\n<ul>\n<li>Once timeout issues are confirmed to be resolved, I will submit this to the Slack app directory.</li>\n<li>I want to integrate Natural Language Processing, for the experience.</li>\n<li>My existing users and I have discussed some enhancements, such as letting the user pick their notification time, using a quotes API to get more quotes, and more.</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag\">amazon-api-gateway</span></li><li><span class=\"cp-tag\">slack-apis</span></li><li><span class=\"cp-tag\">route53</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">s3</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/maven\">maven</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-cloudwatch\">amazon-cloudwatch</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://www.techbees.me\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.techbees.me\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.techbees.me</span>\n</a></li>\n<li><a href=\"https://github.com/TechBeesBee/BusyBeeCheckin\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/TechBeesBee/BusyBeeCheckin\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["DorA Bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/q0MZbyyaD7Q?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I was inspired to make the DorA bot because I saw an email that said \"Build a serverless AWS bot for slack.\" And I'm all like, \"Yes, that sounds fun.\"</p>\n<h2>What it does</h2>\n<p>The DorA bot does a simple search against wikipedia and pulls out the wikitext birth_date and death_date fields. Then it horribly parses that information into good information to send back.  All of this without comments in the code to slow it down.</p>\n<h2>How I built it</h2>\n<p>Mostly I just threw my cat at my keyboard and deleted the things that did not make sense.  Also, followed the tutorial on github, that helped a lot.</p>\n<h2>Challenges I ran into</h2>\n<p>People on wikipedia aren't great on keeping consistent with their data.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>It actually works, I mean, wow, who would of thought that.</p>\n<h2>What I learned</h2>\n<p>The oldest person alive as of this writing is 116.</p>\n<h2>What's next for DorA Bot</h2>\n<p>Not much, other than winning awards and this competition.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag\">aws-api-gateway</span></li><li><span class=\"cp-tag\">blood-&amp;-sweat</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/tiedyedguy/aws-serverless-chatbot-sample\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/tiedyedguy/aws-serverless-chatbot-sample\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["ballgametoday", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://player.vimeo.com/video/183028833?byline=0&amp;portrait=0&amp;title=0#t=\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"ballgametoday \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/086/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We moved to a new office near the San Francisco AT&amp;T ballpark. People often want to know whether there's a ball game on.</p>\n<h2>What it does</h2>\n<p>You give it a city (e.g. /ballgametoday san francisco) and it will post to slack whether or not there's a ball game. If so, the time and which team</p>\n<h2>How I built it</h2>\n<p>With AWS lambda, the <a href=\"http://gametonight.in\" rel=\"nofollow\">gametonightin/json</a> feed, and a <a href=\"https://blog.ouseful.info/2016/03/11/implementing-slash-commands-using-amazon-lambda-functions-getting-started/\" rel=\"nofollow\">blog post about writing Slack web hooks with AWS lambda</a></p>\n<h2>Challenges I ran into</h2>\n<p>The lambda falls asleep when it hasn't been used for a while. I still haven't solved this problem!</p>\n<h2>Accomplishments that I'm proud of</h2>\n<h2>What I learned</h2>\n<h2>What's next for ballgametoday</h2>\n<p>Asynchronous, so that even if it falls asleep it will respond and not time out on the slack endpoint.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">gametonight.in</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://2he3yqk0tl.execute-api.us-west-2.amazonaws.com/prod\" rel=\"nofollow\" target=\"_blank\" title=\"https://2he3yqk0tl.execute-api.us-west-2.amazonaws.com/prod\">\n<i class=\"ss-icon ss-link\"></i>\n<span>2he3yqk0tl.execute-api.us-west-2.amazonaws.com</span>\n</a></li>\n<li><a href=\"https://gist.github.com/glenrobertson/03597fadf0eb20c2c4d45c1130393d66\" rel=\"nofollow\" target=\"_blank\" title=\"https://gist.github.com/glenrobertson/03597fadf0eb20c2c4d45c1130393d66\">\n<i class=\"ss-icon ss-link\"></i>\n<span>gist.github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["PagerDuty OnCall Slack bot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/pe7DnMnulUA?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"PagerDuty OnCall Slack bot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/058/datas/gallery.jpg\"/>\n<p>\n<i>/oncall now</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PagerDuty OnCall Slack bot \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/059/datas/gallery.jpg\"/>\n<p>\n<i>/oncall at</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We live in Slack and we rely on PagerDuty to run our support. PagerDuty already has great Slack integration for receiving alerts and resolving them. However we often want to know who is the person rostered on for support right now when we need help, or who will be rostered on for support for a future event. So we built this Slack integration.</p>\n<h2>What it does</h2>\n<p>For the simplest use case, it will list which people are on call in PagerDuty right now for each escalation policy and level, along with the time that their shift will end, expressed in the time zone of the Slack user who requested the information.</p>\n<p>It can also list the people on call for a given date and time in the future.</p>\n<h2>How I built it</h2>\n<p>It is simply node.js using the <code>request</code> node module to call the PagerDuty API and <code>moment-timezone</code> to translate schedules for the Slack user's timezone. <code>serverless</code> is used to deploy the code to AWS Lambda.</p>\n<h2>Challenges I ran into</h2>\n<p>Using AWS KMS to decrypt API tokens when the Lambda function first starts is often too slow for the Slack 3-second timeout.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>It works!</p>\n<h2>What I learned</h2>\n<p>To use Slack delayed responses and perform tasks that take longer than 3-seconds involves calling another Lambda function to perform the extra work so the first function call can return within the limit.</p>\n<h2>What's next for PagerDuty OnCall Slack bot</h2>\n<p>Allowing users to request the PagerDuty schedule for only specific escalation policies or levels.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">aws-lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag\">serverless</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/section-io/pagerduty-oncall-slack-bot\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/section-io/pagerduty-oncall-slack-bot\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["sokobot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/kT9M-tY-ruI?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"sokobot \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/449/114/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I play Sokoban since 1984.\nI want to make Sokoban product.\nWhen I look this contest, I decide to make sokobot.</p>\n<h2>What it does</h2>\n<p>sokobot tell you NEW Sokoban info.\nInfo is Sokoban stage and minimum steps.</p>\n<p>Sokoban reboot(?) from 2015.\nSokoban Touch release by iOS and Android.</p>\n<p>NOW Sokoban is Refresh!!</p>\n<h2>How I built it</h2>\n<p>I already made kintone Product.\nAnd, I already made Lambda Product.\nBUT, I don't know slack.</p>\n<p>I feel easy, slack to API Gateway.</p>\n<p>sokobot console is made by kintone.</p>\n<h2>Challenges I ran into</h2>\n<p>.. slack conect to API Gateway</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I have received the data from the development company of Sokoban</p>\n<h2>What I learned</h2>\n<p>.. API Gateway connect to Lambda. This console page is many change, so I re-learned...</p>\n<h2>What's next for sokobot</h2>\n<p>Now I plannning \"sokoban solver\".\nThis solver solved many stage.\n...and suggenstion to sokoban beginner.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">kintone</span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag\">api-gateway</span></li></ul>\n</div>\n</div>", [""]], ["CMD.Parser", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/VU5AoDQvN6Q?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"CMD.Parser \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/416/824/datas/gallery.jpg\"/>\n<p>\n<i>CMD. Parser</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>CMD. Parser</h1>\n<p>The Slack Bot that parses bash commands off terminal screenshots.</p>\n<p>Have you ever received a screenshot of a small and unreadable terminal? Have you\nhad to open it, zoom and attempt to decipher what they typed in their rainbow\ncoloured terminal?</p>\n<p><img alt=\"alt tag\" data-canonical-url=\"http://cdn.osxdaily.com/wp-content/uploads/2013/02/better-terminal-ui.jpg\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--JAIgx_hm--/http://cdn.osxdaily.com/wp-content/uploads/2013/02/better-terminal-ui.jpg\"/></p>\n<p>CMD. Parser is here to save you, your patience and your eyes...</p>\n<p>CMD. Parser will analyze the screenshot and return only the information you care about... the commands.</p>\n<h2>Installation</h2>\n<ol>\n<li>Login to Slack <a href=\"https://slack.com/\" rel=\"nofollow\">https://slack.com/</a></li>\n<li>Press the gear icon at the top of the page</li>\n<li>Select 'add app or integreation'</li>\n<li>Select 'manage' in the top right corner</li>\n<li>Select 'custom integrations'</li>\n<li>Add outgoing webhook</li>\n<li>Set trigger word to 'cmd'</li>\n<li>Add the following urls to the url box:\n<a href=\"https://qufrvi3nyi.execute-api.us-west-2.amazonaws.com/dev/\" rel=\"nofollow\">https://qufrvi3nyi.execute-api.us-west-2.amazonaws.com/dev/</a>\n<a href=\"https://52xkgnh3ej.execute-api.us-west-2.amazonaws.com/test\" rel=\"nofollow\">https://52xkgnh3ej.execute-api.us-west-2.amazonaws.com/test</a></li>\n<li>Press save</li>\n</ol>\n<h2>Usage</h2>\n<p>Using a the simple command 'cmd' in your favourite slack channel and then a valid url. Ensure the file is accessable to the public internet</p>\n<p>For a demo of comd. parser being used please check out the submission video\n<a href=\"https://www.youtube.com/watch?v=VU5AoDQvN6Q\" rel=\"nofollow\">https://www.youtube.com/watch?v=VU5AoDQvN6Q</a></p>\n<h2>Example Commands</h2>\n<ul>\n<li>cmd <a href=\"https://raw.githubusercontent.com/Gknoblau/CMD.Parser/master/Example1.png\" rel=\"nofollow\">https://raw.githubusercontent.com/Gknoblau/CMD.Parser/master/Example1.png</a></li>\n<li>cmd <a href=\"https://raw.githubusercontent.com/Gknoblau/CMD.Parser/master/Example2.png\" rel=\"nofollow\">https://raw.githubusercontent.com/Gknoblau/CMD.Parser/master/Example2.png</a></li>\n<li>cmd <a href=\"https://raw.githubusercontent.com/Gknoblau/CMD.Parser/master/Example3.png\" rel=\"nofollow\">https://raw.githubusercontent.com/Gknoblau/CMD.Parser/master/Example3.png</a></li>\n</ul>\n<h2>What is CMD.Parser?</h2>\n<ul>\n<li>Role: To make IT professionals\u2019 lives easier by parsing commands from a terminal screenshot</li>\n<li>Uses Tesseract Optical Character Recognition engine to accurately parse various types of terminals commands</li>\n<li>Returns just the commands from the screenshot</li>\n<li>Input-&gt; valid image url</li>\n<li>Output-&gt; commands</li>\n</ul>\n<h2>Why Would I use CMD.Parser?</h2>\n<ul>\n<li>IT professions consistently get terminal screenshots from colleagues </li>\n<li>They are often small and difficult to read</li>\n<li>You are unable to copy and paste commands used in the screenshot.</li>\n<li>CMD. Parser solves these problem by returning the commands you need to use in your own terminal</li>\n</ul>\n<h2>Applications</h2>\n<ul>\n<li>Parsing commands off hard to read terminals</li>\n<li>Large screenshots with &gt; 5 commands</li>\n<li>Getting commands to create scripts</li>\n<li>Terminal beginners</li>\n</ul>\n<h2>How Does CMD.Parser Do It?</h2>\n<ul>\n<li>Use Slack\u2019s Outgoing Webhook, AWS Lambda processes the request</li>\n<li>Image URL is validated</li>\n<li>Image is resized using OpenCV</li>\n<li>OCR (Tesseract) is used to get text from image</li>\n<li>String splice only the command after the \u2018&gt;\u2019 or \u2018$\u2019 character</li>\n<li>Return the commands via Slacks Incoming Webhook</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/Gknoblau/CMD.Parser\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Gknoblau/CMD.Parser\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["MeMoGIF", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/_-_7Epn-3rQ?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"MeMoGIF \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/406/342/datas/gallery.jpg\"/>\n<p>\n<i>Angry</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMoGIF \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/406/343/datas/gallery.jpg\"/>\n<p>\n<i>Scared</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMoGIF \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/406/344/datas/gallery.jpg\"/>\n<p>\n<i>Yes</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMoGIF \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/406/345/datas/gallery.jpg\"/>\n<p>\n<i>Laughing</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMoGIF \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/406/346/datas/gallery.jpg\"/>\n<p>\n<i>No</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MeMoGIF \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/406/347/datas/gallery.jpg\"/>\n<p>\n<i>Crying</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>A Brief Introduction</h2>\n<p>Stickers and GIF animations are so popular and widely used the daily messenger. Creating personalised animation and sticker set is something nice to have. MeMoGIF is a chat-bot which can generate personalised and 3D GIF animations/stickers for you. This can be done fully automatically in a few seconds. All it needs from you is to upload a single 2D face portrait on our hard-drive, or take a selfie of yourself on the phone, or simply paste the URL of an internet image. You can use them in the messenger conversation or share them with friends. Technically, MeMoGIF uses some computer vision approaches to automatically reconstruct a 3D face model of you from the 2D image, and then use it to render 3D animations in different themes. The App is mostly developed in Node.js and implemented  using AWS Lambda functions. MeMoGIF is originally released as a public Facebook Messenger chatbot and now it has been re-designed into a Slackbot.</p>\n<p>Have fun!</p>\n<h2>How to Install the App.</h2>\n<p>MeMoGIF is now in the Slack App Directory. To install it, go to <a href=\"http://www.memogif.com/slack_installation.html\" rel=\"nofollow\">http://www.memogif.com/slack_installation.html</a>, and click the \"Add to Slack\" button to integrate the App into your Slack team</p>\n<h2>How to use</h2>\n<p>Once installed, a bot user will be added your Slack team (normally of a default user name e.g. @memogif-chatbot). Then any user in the Slack team can simply create a direct-message with the bot user and say \"Hi\" to start, and the bot will interact with him/her. To get helps for the usage of commands etc, just type \"help\" in the conversation.</p>\n<p>(NB: The bot always appears to be \"Away\", but it will always respond to you whenever you chat with it.)</p>\n<h3>Slash Commands:</h3>\n<p>/<strong>broadcast</strong> [#channel-name]: Broadcast and advertise MeMoGIF in the public channel #channel-name</p>\n<p>/<strong>memogif</strong> [theme]: Post the personalised GIF animation of specified theme (e.g. angry) in the current channel.  Currently you can choose from 6 themes: Angry, Laughing, Scare, Yes, No, and Crying.</p>\n<h2>What's next for MeMoGIF</h2>\n<p>More themes and new features will be coming up soon!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag\">lambda</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://www.memogif.com/slack_installation.html\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.memogif.com/slack_installation.html\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.memogif.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["For this project, I worked from the very back-end (i.e. implementing the 3D reconstruction algorithm and rendering animations) to the very front-end on this project (i.e. handling Slack APIs and implementing the user flow of the bot). As a computer vision scientist, the back-end is less troublesome to me. However, it was a lot of learning and practice with AWS lambda functions, node.js, and a lot of about front-end development during the course. Quite a sharp learning curve and frustrating process, but indeed fruitful."]], ["SlackBot Doge", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/E-CUM0yz-pc?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"SlackBot Doge \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/405/499/datas/gallery.jpg\"/>\n<p>\n<i>Slackbot Doge Lives</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"SlackBot Doge \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/405/500/datas/gallery.jpg\"/>\n<p>\n<i>Hell Naww Meme</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"SlackBot Doge \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/405/501/datas/gallery.jpg\"/>\n<p>\n<i>Servers are down on a Friday</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"SlackBot Doge \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/405/502/datas/gallery.jpg\"/>\n<p>\n<i>File size to big!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I use Slack at work and I love memes. I thought to myself, what would happen if I combine those two ? <strong>Slackbot Doge was born</strong>.</p>\n<h2>What it does</h2>\n<p>Slackbot Doge is a serverless meme bot for Slack. It is fully customizable. All the memes are located in the memes directory and adding additional memes to Slackbot Doge is as simple as adding new images to that directory. SlackBot Dodge is also API agnostic, meaning it doesn't depend on any 3rd API vendor to create memes. </p>\n<h2>How I built it</h2>\n<p>It took some coding and ingenuity to comeout with the final product. SlackBot Doge was built using the\nfollowing Amazon Web Services : </p>\n<ul>\n<li>AWS Lambda</li>\n<li>AWS API Gateway</li>\n<li>AWS S3 Bucket</li>\n</ul>\n<h2>Challenges I ran into</h2>\n<p>Permission issues in Lambda. Lambda has  strict permissions in its fule system which created some hiccups during development but I managed to get through it. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I'm very happy the way SlackBot Doge turned out. It is a fully functional serverless meme bot for slack.  </p>\n<h2>What I learned</h2>\n<p>I learned how to create a serverless bot for Slack. </p>\n<h2>What's next for Slackbot Doge</h2>\n<p>I'm planning to expand SlackBot Doge functionality and meme selection. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/slack\">slack</a></span></li><li><span class=\"cp-tag\">slackbot</span></li><li><span class=\"cp-tag\">lambda</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/ListingPowerTools/slackbot-doge-serverless\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/ListingPowerTools/slackbot-doge-serverless\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["slashmovie", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/2BnAhK8Gk6o?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"slashmovie \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/400/716/datas/gallery.jpg\"/>\n<p>\n<i>Example Output</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>Slashmovie</h1>\n<p>Use a Slack slash command to find movie information!</p>\n<p><img alt=\"slashmovie\" data-canonical-url=\"http://i.imgur.com/4U836Yo.gif\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--rNEVN7Wp--/http://i.imgur.com/4U836Yo.gif\"/></p>\n<p>Slashmovie is a project that leverages <a href=\"https://claudiajs.com/\" rel=\"nofollow\">claudiaJS</a> and <a href=\"https://github.com/claudiajs/claudia-bot-builder\" rel=\"nofollow\">claudia-bot-builder</a> to build and deploy to AWS Lambda and AWS API Gateway for a cheap / low-cost hosting solution.</p>\n<h2>Prereqs</h2>\n<p>If you would like to deploy this yourself, you will need the following:</p>\n<ul>\n<li>A valid AWS account, with credentials that allow for AWS Lambda, AWS API Gateway and s3 access.</li>\n<li>The Movie Database API key (see-below)</li>\n<li>Slack slash command token</li>\n<li>GNU Make</li>\n<li>jq</li>\n<li>npm</li>\n</ul>\n<h2>TMDB API Key</h2>\n<p>In order to deploy, you will need a <a href=\"https://www.themoviedb.org/\" rel=\"nofollow\">The Movie DB</a> API key for looking up movie poster art. Along with TMDB, this project uses the free <a href=\"http://omdbapi.com/\" rel=\"nofollow\">Open Movie DB</a> for general movie info lookup (no key required).</p>\n<p>To set your TMDB key:</p>\n<pre class=\"language-nolang\"><code>$ export TMDB_API_KEY=aflkj02e2elfkmsd092lk\n</code></pre>\n<p>or use it as a parameter when using <code>make</code>:</p>\n<pre class=\"language-nolang\"><code>$ make create TMDB_API_KEY=aflkj02e2elfkmsd092lk\n</code></pre>\n<h2>Deployment</h2>\n<p>To create the initial deploy:</p>\n<pre class=\"language-nolang\"><code>$ make create\n</code></pre>\n<p>To update project with your own Slack API token:</p>\n<pre class=\"language-nolang\"><code>$ make update-slack\n</code></pre>\n<p>To redeploy:</p>\n<pre class=\"language-nolang\"><code>$ make update\n</code></pre>\n<p>To destroy all associated AWS resources (be careful!)</p>\n<pre class=\"language-nolang\"><code>$ make destroy\n</code></pre>\n<h2>Testing</h2>\n<p>I've included a few 'smoke' tests to make sure things work with mocked out API responses, but testing in AWS Lambda is currently hard. This project uses the AVA test runner along with XO for linting.</p>\n<pre class=\"language-nolang\"><code>$ npm run test\n</code></pre>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/makefile\">makefile</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/chiefy/slashmovie\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/chiefy/slashmovie\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]]]