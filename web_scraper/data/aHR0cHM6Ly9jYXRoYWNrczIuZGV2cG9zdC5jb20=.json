[["Impossible Moon Game", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Harder games such as Flappy Bird and The Impossible Game</p>\n<h2>What it does</h2>\n<p>Executes a Game</p>\n<h2>How I built it</h2>\n<p>Watching tutorials on pygame and basic python</p>\n<h2>Challenges I ran into</h2>\n<p>Getting the pygame package and right version of python together. It took 2 hours to realize I needed python x86 instead of x64 in order to use pygame</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Setting up well formatted code and using computations in order to make the game better</p>\n<h2>What I learned</h2>\n<p>A simple game can be hard to make and requires many functions</p>\n<h2>What's next for Impossible Moon Game</h2>\n<p>Improve the graphics and spawning of obstacles. Maybe add other forms of obstacles instead of plain old squares and maybe have platforming also.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/edwin12321/MoonGame\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/edwin12321/MoonGame\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["KeyMaster", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"KeyMaster \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/841/datas/gallery.jpg\"/>\n<p>\n<i>Example session</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I am working on a physical security start up and all the available software for master keying systems is either bad, costs hundreds of dollars, or usually both, and there are no working open source solutions available.</p>\n<h2>What it does</h2>\n<p>KeyMaster takes information about the type of locks the user wishes to use, and what type of Master Keying system the user wants, and then outputs a list of lock specifications and key bittings in a form that could probably be sent to the lock manufacturer. KeyMaster also guarantees that no issued key will open a lock within its master other than the ones it is intended to open.</p>\n<h2>What I learned</h2>\n<p>This problem turned out to be a lot harder than I was expecting, and, I learned a lot about good design in master keying systems, and also about how to solve problems with potentially huge solution spaces.</p>\n<h2>What's next for KeyMaster</h2>\n<ul>\n<li>Allow for an arbitrary number of levels rather than the current maximum of three</li>\n<li>Make a GUI that provides a graphical representation of both the key and pin stacks</li>\n<li>More consistent minimization of the number of phantom keys</li>\n<li>Some locks have a limit on how many identical cuts can happen in a row, KeyMaster currently doesn't understand this</li>\n<li>Expand the no-cross-keying guarantee to the entire system rather than just within the master group</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">haskell</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://gitlab.mccarty.io/nmccarty/KeyMaster/tree/master/binaries\" rel=\"nofollow\" target=\"_blank\" title=\"https://gitlab.mccarty.io/nmccarty/KeyMaster/tree/master/binaries\">\n<i class=\"ss-icon ss-link\"></i>\n<span>gitlab.mccarty.io</span>\n</a></li>\n<li><a href=\"https://gitlab.mccarty.io/nmccarty/KeyMaster\" rel=\"nofollow\" target=\"_blank\" title=\"https://gitlab.mccarty.io/nmccarty/KeyMaster\">\n<i class=\"ss-icon ss-link\"></i>\n<span>gitlab.mccarty.io</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["MindSet", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/726/datas/gallery.jpg\"/>\n<p>\n<i>The MindSet</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/682/datas/gallery.jpg\"/>\n<p>\n<i>MindMaze, a 3D Puzzle Demo</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/845/datas/gallery.jpg\"/>\n<p>\n<i>MindOut, a Breakout Demo</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/935/datas/gallery.jpg\"/>\n<p>\n<i>MindInvaders, a Space Invaders Demo</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/681/datas/gallery.jpg\"/>\n<p>\n<i>MindMaze Demo</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/936/datas/gallery.jpg\"/>\n<p>\n<i>MindInvaders Demo</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 7\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/693/datas/gallery.jpg\"/>\n<p>\n<i>Right Side of the MindSet</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MindSet \u2013 screenshot 8\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/694/datas/gallery.jpg\"/>\n<p>\n<i>Left Side of the MindSet</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>This project came to me while I was designing a game several years ago.  I was designing an environment that I wanted to dynamically update based upon the user in the physical world.  Once I thought about adding support for EEG input, I saw an entire world of opportunity.</p>\n<h2>What it does</h2>\n<p>Any game made in Game Maker could be easily designed to implement EEG readings into a focus variable, which can morph the environment.</p>\n<h4>MindMaze</h4>\n<p>This demo allows you to explore a 3D maze that appears as you get close.  The more focused you are on the game, the more of the maze that becomes visible to you.  </p>\n<h4>MindOut</h4>\n<p>This demo is a take on the classic Atari game \"Breakout.\" The paddle grows and shrinks based on the player's focus. </p>\n<h4>MindInvaders</h4>\n<p>This demo is a take on the classic arcade hit, \"Space Invaders.\" The player is allowed more shots at a time when their focus is high</p>\n<h2>How I built it</h2>\n<p>This demo is built in Game Maker: Studio.  The graphics are all controlled by GML's D3D functions.  The EEG headset is made from an arduino and Mind Flex headset.  This headset relies on a NeuroSky board to collect the data, and the arduino collects it from the board, and decides what to do.</p>\n<h2>Challenges I ran into</h2>\n<p>My initial headset had a short in one of the earpieces, so I replaced it.  During this shift, the code I had been working on for my Arduino was lost, and I had to re-write the control for the headset.</p>\n<h2>What's next for MindSet</h2>\n<p>The next step would be to migrate this project to a more professional headset, and to provide more examples that make use of the MindSet.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/gamemaker\">gamemaker</a></span></li><li><span class=\"cp-tag\">mindflex</span></li><li><span class=\"cp-tag\">eeg</span></li></ul>\n</div>\n</div>", [""]], ["MyoMy", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/uwsraRcX-fU?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"MyoMy \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/010/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MyoMy \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/011/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MyoMy \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/012/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to use the Myo Gesture Recognizing Armband for a video game. </p>\n<h2>What it does</h2>\n<p>Using the Myo, your mouse is now replaced by your arm. You can pan the world by dragging your arm off the camera in any direction. You can switch guns by waving your hand in and out. You can fire either gun by clenching your fist. One gun is a flamethrower and the other is a laser rifle. </p>\n<p>Meanwhile, spawning AI are following you and upon impact they explode. Make them collide with your children of your gun instead.</p>\n<h2>How we built it</h2>\n<p>Unity, Myo SDK, Soylent.</p>\n<h2>Challenges we ran into</h2>\n<p>It was too awesome. </p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Getting the Myo to work in the ways we wanted was the most gratifying part. Having people play our game and not want to stop was the most convincing to us that this game is actually playable.</p>\n<h2>What we learned</h2>\n<p>Hardware hacks are the real MVP.</p>\n<h2>What's next for MyoMy</h2>\n<p>Save up $200 to buy a Myo armband and make it even better. Add a Menu, different worlds, a better leveling system, a GUI, different kinds of bots, etc.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unity\">unity</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/myo\">myo</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li><li><span class=\"cp-tag\">soylent</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/reecealanboyd/MyoMy\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/reecealanboyd/MyoMy\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Created the AI for the game. Taught them to intelligently walk around obstacles when pursuing the players. Provided multiple particle effects depending on how they exploded. ", "Implemented the Myo into the the standard Unity FPS controller.  Added two firing options into the gun.  Inspiration to teammates.", "I worked on building the world and area that the game takes place in. Also worked on the animations for the moving obstacles. Emotional support. "]], ["SearchIT", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/u3wF6nHZZvA?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"SearchIT \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/373/810/datas/gallery.jpg\"/>\n<p>\n<i>Simply select a website</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I found myself frustrated after regularly typing to search the same thing across multiple websites.</p>\n<h2>What it does</h2>\n<p>This chrome extension allows you to search what you just searched on numerous other websites.</p>\n<h2>How I built it</h2>\n<p>I built this using Javascript, HTML, CSS, and the Google Chrome API.</p>\n<h2>Challenges I ran into</h2>\n<p>Achieving the precise look that I was going for by using CSS turned out to be more of a challenge than anticipated. However, it dwarfed in comparison to using the asynchronous functions that were required to interact with the Chrome browser.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I'm very pleased with how polished it ended up and how useful it is already turning out to be.</p>\n<h2>What I learned</h2>\n<p>In short, Javascript. Prior to this project, I had little to no knowledge of Javascript.</p>\n<h2>What's next for SearchIT</h2>\n<p>New features are to be added as their necessity becomes clear.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/IanBurgan/cathacks2016\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/IanBurgan/cathacks2016\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I made the entire thing with some help from everyone who provided advice. Thanks"]], ["CatHacks Arcade", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration: To learn three new languages in a very fun way</h2>\n<h2>What it does: A Website that allows the user to play some retro Javascript games</h2>\n<h2>How we built it: Using html,Css and Javascript, created three games from the ground up.</h2>\n<h2>Challenges we ran into: Three completely new languages to each of us, so it took time to learn the syntax</h2>\n<h2>Accomplishments that we're proud of: Completely finished our Flappy Bird game</h2>\n<h2>What we learned: Very familiar with the general and basic aspects of HTML, CSS and Javascript</h2>\n<h2>What's next for CatHacks Arcade: The next step is make sure all the games are created correctly and function right.</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/domain\">domain</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/GSmelt/charcade\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/GSmelt/charcade\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["CrowdSketch", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"CrowdSketch \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/150/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Github for artists! Coders have several platforms to collaborate on projects, but life's a bit more complicated for those who are artistically inclined. We decided to build a web application that artists could use just like coders use Github.</p>\n<h2>What it does</h2>\n<p>Our web application allows users to collaborate online in order to draw beautiful images together in various lobbies. The user can have private paintings which they can share with other select users. They can then collaborate with them to finish beautiful images. </p>\n<h2>How we built it</h2>\n<p>We used node.js, express and socket.io to create a web application that allows concurrent editing of canvasses by multiple artists. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/socket-io\">socket.io</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/express-js\">express.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/Sanjidhalim/CrowdSketch\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Sanjidhalim/CrowdSketch\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://ec2-52-90-83-176.compute-1.amazonaws.com:3000/\" rel=\"nofollow\" target=\"_blank\" title=\"http://ec2-52-90-83-176.compute-1.amazonaws.com:3000/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>ec2-52-90-83-176.compute-1.amazonaws.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["smsStockReport", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h1>smsStockReport</h1>\n<p>This is a project I did for Cathacks 2016 at the University of Kentucky.\nIt's a python script that pulls client info from a .txt file and then\ngoes to Google finance to get information about the client's stock.\nThen an email is sent to the client containing this information in a simple text format.  </p>\n<p>This is a python3 project, so that needs to be kept in mind when running the script.  </p>\n<p>Format for .txt file:<br/>\n-DON'T DELETE the first line that is already in the file starting with a '#'<br/>\n-use the following format for the rest of the lines...<br/>\n  (client name)<br/>\n  (client email)<br/>\n  (client stocks) separated by only a comma (ex. ADT,GOOG,CSCO )<br/>\n  ~repeat for however many clients you have~  </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/recklesspanda/smsStockReport\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/recklesspanda/smsStockReport\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Findr", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Findr \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/194/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>Findr</h1>\n<p>One of the most frustrating parts of indexing through a page searching for keywords is that images and non-text based words will not show up in the search. We sought to fix this by leveraging the Clarifai API alongside Microsoft's Project Oxford OCR API to pull keywords describing all images in a given web page to allow them to be searchable as part of the extension.</p>\n<p>The Findr Chrome Extension (and almost FireFox plugin) takes the natural process of using Cntrl + F and makes images searchable.</p>\n<h2>Challenges</h2>\n<p>JS</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/clarifai\">clarifai</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/chrome\">chrome</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/microsoft-project-oxford\">microsoft-project-oxford</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ajax\">ajax</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/firefox\">firefox</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bootstrap\">bootstrap</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/hstall2529/Findr\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/hstall2529/Findr\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["Phones Down", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Phones Down \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/110/datas/gallery.jpg\"/>\n<p>\n<i>Grey Logo</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>This project was inspired by the unicef tap water project. Unicef has a website where they will donate a day of clean water for every five minutes a person would stay off of their cell phone. A growing issues in middle and high schools are mobile phones. Students do not pay attention and teachers cannot stop it, even if they try harsh punishments.</p>\n<h2>What it does</h2>\n<p>Phones Down measures phone movement from sensors built in to most smartphones, and reports it back to a teacher portal where teachers can reward those who have not been on their phone. This benefits students and teachers because teachers no longer have to police the classroom for phones, and students because it can be an opportunity for extra credit and force them to pay more attention resulting in higher grades. </p>\n<h2>How I built it</h2>\n<p>Their are two parts, the mobile app and the teacher website. The mobile app is made using hybrid; running websites as a native application. It was made using the Ionic Framework. The teacher portal is angular, bootstrap, and some material design CSS. The backend is Parse. </p>\n<h2>Challenges I ran into</h2>\n<p>Using Parse as the backend provided some challenges because it does some very odd stuff sometimes and it is very hard to troubleshoot what is wrong with the application so it usually ends up just trying random things out until it works. Also getting both the web portal and the mobile interface to sync and talk to each other using the same data scheme was challenging. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Finishing the project :)\nGetting both the mobile app and the site to an acceptable state.\nGetting a little bit of sleep.\nAn application that will work and have an impact in education.</p>\n<h2>What I learned</h2>\n<p>Keep it simple! I tried to make it really complicated at first and it blew up in my face.\nHow fun hackathons are.\nThe importance of commenting code for later....</p>\n<h2>What's next for Phones Down</h2>\n<p>Trying it out in the real world! Talking to teachers to pilot test it and evolve it further with items like training and documentation. This can change education.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ionic\">ionic</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/angular-js\">angular.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/parse\">parse</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/DrakeWitt/phones-down-app\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/DrakeWitt/phones-down-app\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"https://github.com/DrakeWitt/phones-down-web\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/DrakeWitt/phones-down-web\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://drakewitt.github.io/phones-down-web/\" rel=\"nofollow\" target=\"_blank\" title=\"http://drakewitt.github.io/phones-down-web/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>drakewitt.github.io</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["RecipEZ", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"RecipEZ \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/120/datas/gallery.jpg\"/>\n<p>\n<i>Featured screen in iOS App</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"RecipEZ \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/121/datas/gallery.jpg\"/>\n<p>\n<i>Detail View in iOS App</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"RecipEZ \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/122/datas/gallery.jpg\"/>\n<p>\n<i>Menu Screen for Pebble Smartwatch</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"RecipEZ \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/152/datas/gallery.jpg\"/>\n<p>\n<i>Concept through Sketch 3 of iOS Frontend</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to create something new using the Pebble watch and some new SDK's. We also wanted to delve into the Wolfram api's to create something new and useful.</p>\n<h2>What it does</h2>\n<p>View all sorts of recipes on your iPhone and send one off to your Pebble smartwatch. While cooking, there is no need to return to your iPhone, simply flick your wrist to view the next step in the recipe!</p>\n<h2>How we built it</h2>\n<p>Split into tasks, we individually handled the creation of a server, communication with the Pebble smartwatch, data model, and frontend design. We used WolframAlpha's API to get nutritional information about ingredients included in recipes. We used Mashape's API in order to obtain recipes and ingredients. We created our own backend server to handle caching with Wolfram Alpha's API in order to diminish the number of API requests served. Finally, we used CloudPebble to host and test our Pebble app, and firebase to help link the Pebble App with the iOS version.</p>\n<h2>Challenges we ran into</h2>\n<ul>\n<li>Interacting with the WolframAlpha API</li>\n<li>Connecting pebble watch to iPhone</li>\n<li>Asynchronous requests to endpoints</li>\n<li>Caching</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<ul>\n<li>iPhone design</li>\n<li>Wrist motion gesture recognition</li>\n<li>Cross-platform communication</li>\n</ul>\n<h2>What we learned</h2>\n<ul>\n<li>Pebble SDK</li>\n<li>Wolfram SDK</li>\n<li>Sketch 3</li>\n<li>Firebase</li>\n</ul>\n<h2>What's next for RecipEZ</h2>\n<ul>\n<li>Polish and submit to App store</li>\n<li>Apple Watch companion</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/iphone-sdk\">iphone-sdk</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wolfram-technologies\">wolfram-technologies</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/schrismartin/cathacks2016-ios\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/schrismartin/cathacks2016-ios\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I wrote the web server that makes requests to the Wolfram Alpha API for nutrition information. We had to have the server because the Wolfram Alpha API does not allow client-side requests.", "", "", ""]], ["Catagatchi", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<p>Our project is titled \u201cCatagotchi.\u201d This game was developed as a Windows Form in Visual Studio using the C# language. This project merges the popular children\u2019s toy Tamagotchi with many common University of Kentucky characters and topics to create a hybrid that all of Big Blue Nation can enjoy! This game follows a very similar set-up and features game play quite similar to the original Tamagotchi toy. </p>\n<p>A major difference in our rendition on the concept comes in the time frame and format of the game. While the original games would be played over the span of weeks or months, our game is meant to be played from start to finish within 15 minutes without any major cuts from the original game model. Our game also provides the user with more information than the original game did, while simplifying the overall layout of buttons for the game, including the addition of color.</p>\n<p>We hope you enjoy our University of Kentucky themed \u201cCatagotchi\"!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li><li><span class=\"cp-tag\">windows-forms</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/gripshos/catagatchi\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/gripshos/catagatchi\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I created the pixel art for the game, including the eggs, cats, blobs, and logos,", ""]], ["TODOgify", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Theres tons of other to-do lists and few of them are minimalistic enough to integrate into your day</p>\n<h2>What it does</h2>\n<p>It lets you create a to-do list and update it easily.  For important tasks, it lets you set priority and pushes the most important thing to your home screen via notification.</p>\n<h2>How we built it</h2>\n<p>We used Android Studio which implements JAVA and XML</p>\n<h2>Challenges we ran into</h2>\n<p>Our own inexperience and several focusing issues as we added and changed the list</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Notifications, priority sorting, and one-touch clearing</p>\n<h2>What we learned</h2>\n<p>Development is hard and where you put functions makes a huge difference in the ease of implementation</p>\n<h2>What's next for TODOgify</h2>\n<p>Probably allowing for more user customization in terms of themes and secondary sorting, perhaps time based processes</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android-studio\">android-studio</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/thunderseethe/TODOgify\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/thunderseethe/TODOgify\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Predictive Model for Kaggle.com Challenge with Wolfram", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/mv2livgycLc?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Predictive Model for Kaggle.com Challenge with Wolfram \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/189/datas/gallery.jpg\"/>\n<p>\n<i>A simpler language classifier that we built as a warm-up to Wolfram!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Alex has been taking an online machine learning course lately and I wanted to learn the Wolfram Language and use the cloud platform. So we took the opportunity to take this Kaggle challenge and build a classification model on the Wolfram Cloud.</p>\n<h2>What it does</h2>\n<ol>\n<li>Uploaded ~1000 rows of sample data to the Wolfram DataDrop platform.</li>\n<li>Pulls in the data points and splits them into training (70%) and testing (30%) sets.</li>\n<li>Builds a classification model from the training data using the the Wolfram Classify functionality.</li>\n<li>Runs the classification model on the testing data.</li>\n<li>Calculates the percentage correctly predicted, generally ~70%, and renders a bar chart showing the percentages.</li>\n</ol>\n<h2>How we built it</h2>\n<ol>\n<li>Set up a DataDrop Databin to store the data.</li>\n<li>Parse data with python and post it to the Databin.</li>\n<li>Pulls in the data builds the classification model and verifies correctness all on the Wolfram platform.</li>\n</ol>\n<h2>Challenges we ran into</h2>\n<ol>\n<li>Getting all the data onto Wolfram Cloud</li>\n<li>Learning Mathematica/Wolfram Language</li>\n</ol>\n<h2>Accomplishments that we're proud of</h2>\n<ol>\n<li>Increasing familiarity and intuition for the Wolfram Language.</li>\n<li>Completing first Kaggle challenge.</li>\n</ol>\n<h2>What we learned</h2>\n<ol>\n<li>Wolfram Language - none of us knew it at the start of the weekend.</li>\n</ol>\n<h2>What's next for Kaggle Data Challenge \"SF Crime\" with Wolfram Cloud</h2>\n<ol>\n<li>Running the algorithm on the official challenge data and submitting the code to kaggle.</li>\n</ol>\n<h2>Try it out!</h2>\n<p>Here is the Wolfram notebook file: <a href=\"https://drive.google.com/file/d/0Bz1QgL1Xej6UU2kySnVrbEFxUWM/view?usp=sharing\" rel=\"nofollow\">https://drive.google.com/file/d/0Bz1QgL1Xej6UU2kySnVrbEFxUWM/view?usp=sharing</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wolfram-technologies\">wolfram-technologies</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">csv</span></li><li><span class=\"cp-tag\">databin</span></li></ul>\n</div>\n</div>", ["I wrote the Python code to upload our data to the Wolfram Datadrop cloud platform and wrote the Wolfram Language code to massage the data and run it through the Wolfram Classify function.", "", "", ""]], ["Gunner Runner", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Gunner Runner \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/128/datas/gallery.jpg\"/>\n<p>\n<i>Ending of the game</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Gunner Runner \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/130/datas/gallery.jpg\"/>\n<p>\n<i>The gameplay</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Gunner Runner \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/137/datas/gallery.jpg\"/>\n<p>\n<i>The gameplay</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The inspiration to this game came as i was playing Pac -Man. I was curious about how programs used path finding. I researched path finding algorithm and found A*. Through tutorial and a lot of help from you tube we created the algorithm.Even though program was a little buggy, it did what it was supposed to  and came up with a game that implemented this algorithm.</p>\n<h2>What it does</h2>\n<p>The game is just meant to be played for fun but most importantly it implements the A* pathfinder algorithm</p>\n<h2>How I built it</h2>\n<p>I used python as the programming language and used the Pygame libruary to build the GUI.</p>\n<h2>Challenges I ran into</h2>\n<p>We ran into multiple roadblocks. The structure of the program created unexpected and puzzling bugs. I tried to implement the 'time' documentation of pygame but i was not able to. The original plan was to create a zombie game but due to difficulties regarding map structure and sprite complication we ended up making a weird superman game </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>i am proud that we, in a short time we dealt with the creative process of making a game and we made it playable and hopefully fun.</p>\n<h2>What I learned</h2>\n<p>I am now much more confident about dealing with calsses and arrays since there were a lot of those in the program.</p>\n<h2>What's next for Gunner Runner</h2>\n<p>This is the end of Gunner Runner. We used Gunner Runner as a stepping stone in being more exposed to programming and dealing with time constraints.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">a*-pathfinder-algorithm</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/pygame\">pygame</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://onedrive.live.com/?id=root&amp;cid=0CF26696D242CD61\" rel=\"nofollow\" target=\"_blank\" title=\"https://onedrive.live.com/?id=root&amp;cid=0CF26696D242CD61\">\n<i class=\"ss-icon ss-link\"></i>\n<span>onedrive.live.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["WhatsNext?", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/GV5D8hQ9msM?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"WhatsNext? \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/139/datas/gallery.jpg\"/>\n<p>\n<i>App Logo</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to extend the social experience of a party to the music as well. In addition, none of us had ever designed an iOS app before, so we wanted to look into a very popular development environment.</p>\n<h2>What it does</h2>\n<p>Allows the user to create a playlist (must be named \"Playlist\" because we were having difficulties implementing Core Data in the app). The user is then able to play the playlist in a music player that we created.</p>\n<p>Must run on a physical iOS device, not the simulator</p>\n<h2>How I built it</h2>\n<p>Using the iOS MediaPlayer Framework in swift.</p>\n<h2>Challenges I ran into</h2>\n<p>Wanted to use spotify API; most of it was in Objective C and deprecated and not maintained. Had difficulties storing the playlist data. Difficulties with auto layout and UI concepts.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>We are very proud that we had basically 0 experience with iOS at the beginning of the hackathon and we laid the groundworks for a potential great app.</p>\n<p>In addition, we designed a server backend using FireBase that collected data, however we were not able to tie that to the UI.</p>\n<h2>What I learned</h2>\n<p>Nothing is as easy as you think it will be in the planning phase.</p>\n<h2>What's next for WhatsNext?</h2>\n<p>Figuring out how to implement Core Data and tie in the FireBase into the app.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ios\">ios</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/swift\">swift</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/firebase\">firebase</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/cocoapods\">cocoapods</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/xcode\">xcode</a></span></li></ul>\n</div>\n</div>", ["I primarily worked to get communication between devices and the Firebase. This feature is not implemented but is a core idea of how the app should work", "I mostly worked on the back end. I mostly focused on the logic for song ordering and sorting the song through the Playlist class in swift. This feature was not implemented but is important to the design of the playlist system. ", ""]], ["Robo-Car-Fight-Game-Thing (RCFGT)", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Having played games like _ scriptbuilder _, where users are set free in a sandbox and write scripts to create and define their universe, and games like _ Robo-Rally _, where users use pre-programmed controls to plan a Robot's movements in advance and guess how the enemy chose to react, I figured I'd combine the two.</p>\n<h2>What it does</h2>\n<p>Takes two Script files as input (I was using .txt but theoretically other file types supported), and creates the Car-Bot defined in the opening of the file. Different pieces of Robots are defined, each with their own perks. Examples of these perks are access to extra sensory functions, increased speed, advanced weaponry, and more memory for storage. The Script defines what pieces are used in the Car-bot, making it customisable. </p>\n<p>The game displays the Car-bots and begins interpreting the script's commands for the bot's movements. Car-bots are limited by the amount of memory they have access to, their speed, and the number of senses they are allowed per round.</p>\n<h2>How I built it</h2>\n<p>Everything is in C++. I built it with the help of Energy Drinks and stackexchange.</p>\n<h2>Challenges I ran into</h2>\n<p>Building an interpreter is hard. Checking for all the possible bugs the user could put in a script and making sure items are interpreted and run correctly proved to be a much larger challenge than I had initially thought.</p>\n<p>I also ran into trouble finding a suitable GUI that integrates well with C++. For now, the program uses the CLI, but I hope to move it to a cleaner output in the future.</p>\n<p>Github hates me and won't let me upload.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Over 1000 lines of code and many hours were dropped into this project. Navigating the maze of creating a working interpreter is something I am very proud of</p>\n<h2>What I learned</h2>\n<p>I learned a lot about the pro's and cons of different GUIs. I learned how to resize the CLI during run-time, and I did so much string manipulation I could teach a class.</p>\n<h2>What's next for Robo-Car-Fight-Game-Thing (RCFGT)</h2>\n<p>So... I didn't finish. I'd estimate it at 75% of the way to being playable. Next up for it would be finishing the interpreter's ability to eval arithmetic in the proper order (It currently commits the exact opposite of order of operations). I need to fix 5 known semantic bugs. I need to balance movement speed. I need to sleep. I need to add the 12 other Car Pieces I had planned. I need to find a GUI that works well with this project. I hope to eventually get it on the web so players can play against each other's AI from across the world, and encourage the next generation and the current generation to share my love of programming.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li></ul>\n</div>\n</div>", [""]], ["Cat Hack", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>It started as a silly idea after we discovered the 71 image database of cats native to Wolfram that we make a program to \"browse\" the cats, that's where the idea of sorting them by fur color came from.</p>\n<h2>What it does</h2>\n<p>In practice, it sorts a database of 71 cats by their fur color according to their RGB element, in theory it could sort any database of images according to RGB provided the image is focused on the subject.</p>\n<h2>How I built it</h2>\n<p>At first was the issue of how to determine the color of each cat, thankfully the DominantColor function solved this problem for the most part, because all photos had the cats front and center, I took DominantColor within the center 38 pixels (This was the spot I found which eliminated interference from the background in all photos) to determine the color of the cat's fur. After that I struggled forever with the nestles, which I understood nothing of and were the reason I had such difficulty manipulating the RGB data from the colors early on. It was maybe 10 hours of trying any solution that came to mind and googling before I found a way to isolate the RGB. Unfortunately it required me to separate the RGB from the image, and even after succesfully sorting all the colors by RGB without their images, I found it very difficult to attach the images again with a solution that felt universal and honest.\nAfter throwing myself at it Saturday night I gave up on the idea of a formula and decided to instead manually sort the pictures, which disappointed me greatly. However after talking with the people at the Wolfram booth I was introduced to the Gatherby, Sortby, and a very clever way of exploring nestles, and so this bridged the gap between where I stood before with my formula, and the solution. </p>\n<h2>Challenges I ran into</h2>\n<p>Nobody on the team had experience with Wolfram before coming into this project, </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Picking up a language as difficult as Wolfram and creating a solution to an unorthodox type of problem such as this one in a matter a day. I spent almost the entire time coding and still have not slept. It was very difficult and I'm glad I accomplished what I sought out to do.</p>\n<h2>What I learned</h2>\n<p>I learned about nestles and manipulating complex datatypes in an array with a host of other things. The most significant thing I learned was certainly how to use Wolfram</p>\n<h2>What's next for Cat Hack</h2>\n<p>I want to play around with graphical manipulation of images and perhaps integrate some logic into it, because it's an area of Wolfram I've still not yet explored.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/wolfram-technologies\">wolfram-technologies</a></span></li></ul>\n</div>\n</div>", [""]], ["Sensing Semantics", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Being able to quickly summarize a piece of literature is something that is quite useful before deciding whether or not you want to read it. However, we all know judging a book by its cover isn't quite the right thing to do. However, being able to quickly determine the \"mood\" throughout the piece would be a good place to start.</p>\n<h2>What it does</h2>\n<p>Applies a naive bayes classifier to the given document, and uses this to determine the average mood of each sentence, and from that, determines the average mood throughout the document.</p>\n<h2>How I built it</h2>\n<p>National Language ToolKit supplied the data for the classifier, and python allowed a convenient way to implement this model.</p>\n<h2>Challenges I ran into</h2>\n<p>Building the Classifier without adequate test data\nGetting python to play with audio files nicely</p>\n<h2>What's next for Sensing Semantics</h2>\n<p>Getting better test data</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/nltk\">nltk</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/pygame\">pygame</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/ryan91396/sensingsemantics.git\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/ryan91396/sensingsemantics.git\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["Magic Chopstick", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Magic Chopstick \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/183/datas/gallery.jpg\"/>\n<p>\n<i>Cat Hacks!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>Magic Chopstick - Cat Hacks 2016 Project</p>\n<p>In our project, we utilize a Leap Motion Controller to sense motion in 3-Dimensional space. \nWe use Wolfram Mathematica to transform the user's input in real time into dynamically visualized plots.\nUsing this data, we provide options to:\n 1) Draw 3-Dimensional curves and analyze these curves\n 2) Draw 2-Dimensional curves and analyze these curves\n 3) Draw a signature and store it for use in PDF files\n 4) Use Mathematica's API to train a Classifier on multiple user's signature, then have it classify new signatures as they come in as one of the existing users\nThe first two functionalities provide powerful tools for analyzing curves, and the last two are useful applications that could potentially be expanded to include\nforgery detection, secure login, etc.\nThank you to Wolfram and Leap Motion for the use of their technologies, and to UK ACM and the sponsors of Cat Hacks 2016!</p>\n<p>GitHub: <a href=\"https://github.com/connormbrooks/Magic-Chopstick\" rel=\"nofollow\">https://github.com/connormbrooks/Magic-Chopstick</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">mathematica</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/connormbrooks/Magic-Chopstick\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/connormbrooks/Magic-Chopstick\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["MUSE-ic Player", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"MUSE-ic Player \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/191/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We thought it would be awesome to be able to find music that you liked just based on other music that you liked </p>\n<h2>What it does</h2>\n<p>Uses the MUSE headset to interpret EEG readings from your brain, and uses the average value of your delta brainwaves to interpret what song you liked best.</p>\n<h2>How I built it</h2>\n<p>This app was based off of an example design that the developers of MUSE had posted to display how to use their interface.</p>\n<h2>Challenges I ran into</h2>\n<p>Interpreting the MUSE code was difficult</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Incorporating the MUSE data into the design.</p>\n<h2>What I learned</h2>\n<p>How to interpret the data being sent from the device and how to design basic android apps. </p>\n<h2>What's next for MUSE-ic Player</h2>\n<p>The function to suggest other music you might enjoy based on what you have enjoyed previously.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android-studio\">android-studio</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/RadRedPanda/TestLibMuseAndroid\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/RadRedPanda/TestLibMuseAndroid\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Programming", ""]], ["PQR", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/159/datas/gallery.jpg\"/>\n<p>\n<i>View QR Codes that are shared with you</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/160/datas/gallery.jpg\"/>\n<p>\n<i>Share QR Codes with friends/groups</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/161/datas/gallery.jpg\"/>\n<p>\n<i>Add new codes</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/162/datas/gallery.jpg\"/>\n<p>\n<i>Everything is hack-safe</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/163/datas/gallery.jpg\"/>\n<p>\n<i>Intro</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/164/datas/gallery.jpg\"/>\n<p>\n<i>View your codes</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"PQR \u2013 screenshot 7\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/165/datas/gallery.jpg\"/>\n<p>\n<i>coming soon: custom web passcode + edit code content</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Lots of thinking </p>\n<h2>What it does</h2>\n<p>The app creates networks for QR codes. This allows users to create private events with signs (codes) that no-one else can decode but the invited guests. PRQ could also lead to further games (Treasure Hunts?) and codes where every person would see different results from the same code. Imagine test scores posted that contained everyone's scores, but only showed your own.</p>\n<h2>How I built it</h2>\n<p>I used the Firebase API to authenticate users and keep records of all QR Codes. Then, local iOS API's took care of recognizing the codes, creating the codes, and image manipulation. I also used sketch to design my mockups and some UI tools from Danil Gontovnik on Github.</p>\n<h2>Challenges I ran into</h2>\n<ul>\n<li>I had many mess ups with observing changes in the firebase API rather than requesting them. </li>\n<li>I had a hard time devising how I would model my whole backend on JSON</li>\n<li>Child view controllers</li>\n</ul>\n<h2>Accomplishments that I'm proud of</h2>\n<ul>\n<li>It works!!!</li>\n<li>First solo hackathon project!!!</li>\n</ul>\n<h2>What I learned</h2>\n<ul>\n<li>How to work with AVFoundation</li>\n<li>Firebase</li>\n<li>The power of QR codes</li>\n<li>iOS Paginations</li>\n</ul>\n<h2>What's next for PQR</h2>\n<ul>\n<li>Multiple people see different things</li>\n<li>Backup website for people who don't have the app</li>\n<li>APP STORE?!</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/xcode\">xcode</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/firebase\">firebase</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sketch\">sketch</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/sahil-a/pqr\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/sahil-a/pqr\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["CatHacks2016", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<p>Inspired by the likes of google docs, we endeavored to create a plugin for Sublime that allows users to concurrently edit the same document. This would allow developers to edit programs in tandem with each other within an application that allows for easy testing and debugging.</p>\n<p>Our plugin works by allowing a user to create a server within Sublime that other users can then connect to. Upon connecting, a copy of the document being edited is transmitted to the client. Once connected, all changes made are immediately sent to the server, applied to the server copy of the document, then sent to all client copies.</p>\n<p>We used Java for server side developments and Python and the Sublime Text 3 API for client side development. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/egtoney/CatHacks2016\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/egtoney/CatHacks2016\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["MyoRecord", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Being a music minor, I've always been driven towards different ways of creating music. The goal was to use an interface to mock a loop pedal used by live artists performing solo.</p>\n<h2>What it does</h2>\n<p>The concept is to use MYO to create a virtual loop pedal with multiple instruments.</p>\n<h2>How I built it</h2>\n<p>Initially I was trying to build it as a VR project, but since the facility backfired, I switched to leap motion and due to limitations of accessiblity of working plane. I switched to MYO. I used python back end to program a command line program that would do the same for MYO.</p>\n<h2>Challenges I ran into</h2>\n<p>Some hardware issues with respect to compatibility. Also, ran into a lot of space related issues with respect to leap controllers. But I'm definitley investing in a leap controller and creating what I visioned.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Problem solving with respect to creating the MYOcontroller for Audacity which helps in creating a loop layer.</p>\n<h2>What I learned</h2>\n<p>Learned more about hardwares avaiable and how different back end programs work. Learned a lot about the gesturing technology of both MYO and Leap. Both are definitely my favorites.</p>\n<h2>What's next for MyoRecord</h2>\n<p>Definitely finishing up with multiple instruments.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/myo\">myo</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/lua\">lua</a></span></li><li><span class=\"cp-tag\">atom</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/DendiBot/MyoRecord\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/DendiBot/MyoRecord\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["The Labyrinth", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"The Labyrinth \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/154/datas/gallery.jpg\"/>\n<p>\n<i>victory</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Labyrinth \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/155/datas/gallery.jpg\"/>\n<p>\n<i>half way</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Labyrinth \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/156/datas/gallery.jpg\"/>\n<p>\n<i>After key</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Labyrinth \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/157/datas/gallery.jpg\"/>\n<p>\n<i>after door</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Labyrinth \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/158/datas/gallery.jpg\"/>\n<p>\n<i>Start</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>What it does</h2>\n<p>Travel through the scary labyrinth, while collecting keys to unlock doors on your way and face your deepes darkest fears.</p>\n<h1>How we built it</h1>\n<p>in Qt and stuff</p>\n<h2>Challenges we ran into</h2>\n<p>Graphics were tough to implement. We had a lot of issues with pointers and inheritence. We also had many more ideas that we wanted to implement.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Having a working product in the end feels like a huge success for all of us, so we're happy about that.</p>\n<h2>What we learned</h2>\n<p>Qt, graphics</p>\n<h2>What's next for The Labyrinth</h2>\n<p>Coming soon: the Minotaur</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">qt-5.6-with-c++</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/sparkprogramming/Labyrinth\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/sparkprogramming/Labyrinth\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Projekt46", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>This was inspired by the desire to elevate our PC racing game experience and feel like we're actually driving the car.</p>\n<h2>What it does</h2>\n<p>It interfaces with the Volkswagen dashboard via the UNO to control the dashboard displays of the car. By sending data from the game, we can tell the dashboard what to output to the speedometer, gears, etc. </p>\n<h2>How I built it</h2>\n<p>Taking some 2x4s, an arduino uno, and a scrapped steering wheel and Volkswagen dashboard, we constructed the apparatus for holding the dashboard upright. Using the arduino as a buffer between the gaming PC and the dashboard, we were able to convert the data from the game into signals the dashboard could accept in order to adjust the output of various parts of the dashboard. </p>\n<h2>Challenges I ran into</h2>\n<p>Getting the PC to send data to the arduino proved challenging. There is a lot of documentation on how to program the arduino, but not how to get the PC to send data to the arduino. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>We're proud of building the apparatus for the vehicle in a span of 18 hours. After establishing how to send data to the UNO, we found that the amount of data sent to the UNO slowed dramatically after a fixed period of time. We later found that the arduino was sending messages to the PC, causing a buffer overflow at the PC, slowing the computer's abiltity to send messages to the UNO.</p>\n<h2>What I learned</h2>\n<p>How to communicate with a micro-controller via c/c++ programming.</p>\n<h2>What's next for Projekt46</h2>\n<p>Finishing the rest of the dashboard's functionality so that it behaves exactly like a fully functional vehicle.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">arduino-uno</span></li></ul>\n</div>\n</div>", ["I helped program the Arduino UNO and the PC so that they could send and receive messages from one another.", "", ""]], ["Firing Frenzy", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>A spaceship shooting game inspired by Raiden and Galaga.</p>\n<h2>What it does</h2>\n<p>Currently, spawns in a few basic ships that strafe you must destroy.</p>\n<h2>How I built it</h2>\n<p>Using various YouTube tutorials and the Java documentation, I added a few ideas of my own along with the information I gleamed from said sources.</p>\n<h2>Challenges I ran into</h2>\n<p>Lots of null pointer exceptions because I haven't yet synchronized everything properly, and getting hitboxes.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>That it works, that I made the graphics myself, and the potential for the game itself.</p>\n<h2>What I learned</h2>\n<p>I learned a lot about Java graphics and organization, though that last one may not be evident in the project source code.</p>\n<h2>What's next for Firing Frenzy</h2>\n<p>Possibly some updates, but it's likely to be shelved for me to just look at later.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/eclipse\">eclipse</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://www.mediafire.com/download/ppl6ta6d4dzkmao\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.mediafire.com/download/ppl6ta6d4dzkmao\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.mediafire.com</span>\n</a></li>\n<li><a href=\"https://github.com/drca234/FiringFrenzy\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/drca234/FiringFrenzy\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Twin-Stick Shooter", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration: I want to try and make my first video game</h2>\n<h2>What it does: So far, it allows you move around and spawn enemies</h2>\n<h2>How I built it: I used Unreal Engine 4</h2>\n<h2>Challenges I ran into: I trouble creating Enemy AI and building spawn points</h2>\n<h2>Accomplishments that I'm proud of: I was able to make the first phase of my game</h2>\n<h2>What I learned: How to use Unreal Engine</h2>\n<h2>What's next for Twin-Stick Shooter: Add damage, score, and multiplayer</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unreal-engine\">unreal-engine</a></span></li></ul>\n</div>\n</div>", [""]], ["2D Procedural Tilemap", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"2D Procedural Tilemap \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/174/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"2D Procedural Tilemap \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/374/175/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Cathacks2016</h2>\n<p>I am John Geddes. I made a simple game in the Unreal Engine 4.11.1 during Cathacks to demonstrate that it's not difficult to make a quick 2D game with random world generation. The system is very scalable: the current world size is at 128 by 128 tiles, but I can scale it up to the thousands. At that point, I would start running into memory issues if I didn't remove terrain I couldn't see. For the TileSets, I used the asset pack <em>Paper2D</em> that came pre-installed with the Unreal Engine. There was little to no documentation about <em>Paper2D</em>, but I was able to avoid all tutorials and implement the system using C++. I used Perlin noise and some math tricks to manipulate the random terrain generation. It's not perfect, and it doesn't look realistic at all.</p>\n<p>The <em>Paper2D</em> package is still in early access, there's not enough useful commands, and there's not a lot of good documentation. I wasted nearly half of the 26 hours just trying to figure out how to do things that should have been simple. If I didn't lose all of that time, I could have implemented a lot more features, including biomes, caves, and even an inventory system. I enjoyed working on this project, however, because I used this hackathon to learn how to make a game in the Unreal Engine.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag\">blueprint</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unreal-engine\">unreal-engine</a></span></li><li><span class=\"cp-tag\">paper2d</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/GitGeddes/Cathacks2016\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/GitGeddes/Cathacks2016\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Dell Front panel control panel reverse engineering", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<p>Joab Smith\nTyler Burkhart\nAustin Murphy\nPaul Ebinheart</p>\n<p>For this hackathon our group decided to reverse engineer a dell server front control panel. While we were collecting parts in order to come up with ideas, we found an unused dell server control panel card with an LCD screen and lights. Upon a group decision we decided to try to reverse engineer the control panel and try to connect it to the super computer. This process was tedious as we poked and tested the circuit board. We eventually mapped out most of the information for the output connector that connected to the computer. This however led to more problems that eventually took too much time to finish fully.</p>\n</div>\n</div>", [""]]]