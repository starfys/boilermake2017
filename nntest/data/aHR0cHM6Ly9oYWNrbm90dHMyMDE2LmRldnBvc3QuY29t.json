[["is-so.sexy", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Over the years, many .sexy websites have emerged from the minds of young, inspired artisans on their craft. We decided it was about time we put the power of .sexy into the hands of the people.</p>\n<h2>What it does</h2>\n<p>Allows you to get a subdomain, upload pictures and create a .sexy page. (For example, <a href=\"pandelis.sexy\" rel=\"nofollow\">http://pandelis.sexy</a>)</p>\n<h2>How we built it</h2>\n<p>We used the sheer power of the <em>One True Dev Language</em>. Plus some modules which are written in the <em>One True Dev Language</em>.</p>\n<h2>Challenges we ran into</h2>\n<p>Nobody likes Jade. Jade sucks.</p>\n<h2>What's next for is-so.sexy</h2>\n<p>Welcome the world.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mongodb\">mongodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/react\">react</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/express-js\">express.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://hacknotts2016.is-so.sexy\" rel=\"nofollow\" target=\"_blank\" title=\"http://hacknotts2016.is-so.sexy\">\n<i class=\"ss-icon ss-link\"></i>\n<span>hacknotts2016.is-so.sexy</span>\n</a></li>\n<li><a href=\"https://github.com/PandelisZ/is-so.sexy\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/PandelisZ/is-so.sexy\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["Code-Zero", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Code-Zero \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/113/datas/gallery.jpg\"/>\n<p>\n<i>Inside a cavern</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Code-Zero \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/114/datas/gallery.jpg\"/>\n<p>\n<i>Winning at the castle</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Code-Zero \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/115/datas/gallery.jpg\"/>\n<p>\n<i>Losing, lost in a forest</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Code-Zero \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/116/datas/gallery.jpg\"/>\n<p>\n<i>A sudden pit of doppelgangers</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>Code-Zero</h1>\n<p>We developed a side-stroller in Java over 24 hours using awt as our rendering package.</p>\n<p>The goal of the small game is to get to the castle at the end of the level (Somewhere to the right). If you make a mistake then you can re-wind time at the cost of Sanity. </p>\n<p>Controls are W, S, A, D for movement and E for rewinding time by 3 seconds.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/TheKimeo/Code-Zero\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/TheKimeo/Code-Zero\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["hacktocat.com", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"hacktocat.com \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/130/datas/gallery.jpg\"/>\n<p>\n<i>the original</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>we thought of a punny domain name, and we had to think of something to put on it. Everyone's favorite aquatic feline obviously was the first thing that came to mind.</p>\n<h2>What it does</h2>\n<p>You click the button, you get a Cat. You click it again, you get another cat.</p>\n<h2>How we built it</h2>\n<p>So much grepping.<br/>\nSo much.</p>\n<h2>Challenges and Successes</h2>\n<p>Making a website appear online in 24 hours is hard. AWS made it easy.<br/>\nYou can never have too many octocats. Thanks GitHub!</p>\n<h2>What's next for hacktocat.com</h2>\n<p>Who knows??????\nMoar cats?!?!?!?!?!?!?!?!?</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag\">grep</span></li><li><span class=\"cp-tag\">octodex</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://hacktocat.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://hacktocat.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>hacktocat.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["AudioAffair", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Windows media player animations </p>\n<h2>What it does</h2>\n<p>Dynamically generates basic shapes based off audio files and displays them on an LED matrix powered by a raspberry pi. </p>\n<h2>How we built it</h2>\n<p>We used python with the aubio framework (to sample audio files)</p>\n<h2>Challenges we ran into</h2>\n<p>Running our code on an (old) raspberry pi, running multiple bits of code concurrently, selecting audio information that would make for distinct animations for any file.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Scraping data from audio files and dumping them into numpy arrays; getting a raspberry pi hooked up to 36 LEDs and having them update in sync with each other.</p>\n<h2>What we learned</h2>\n<p>A lot about audio libraries and signal processing, merging git branches and multiprocessing in python </p>\n<h2>What's next for AudioAffair</h2>\n<p>Moving from an LED matrix to a more advanced renderer (OpenGL?) and using more data points from files to seed our algorithms (signal energy, amplitude differential etc). </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/TheRedshift/AudioAffair\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/TheRedshift/AudioAffair\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the audio sampling, data point selection and recording, and making sure the code ran on the raspberry pi ", "I worked on taking the sound input and converting it into a pulsating image", "I did research in the different types of music libraries available for Python and added functionality in the source code to allow the LED display to update dynamically in response to variations in the music rhythm and tempo. ", ""]], ["roombox", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>The original idea for roombox came from a common frustration at parties - everyone loves Spotify, but why doesn't it allow other people to queue songs in a playlist? Eventually, we became fed up with constantly queueing songs for others, and decided to build roombox, a simple room-based queueing system for Spotify.</p>\n<h2>What it does</h2>\n<p>roombox allows users to create password-protected rooms, which in turn creates a playlist in their Spotify account. Other people can then join that room and queue songs into that playlist - the idea being that Spotify plays through whatever has been queued in order, removing the need for someone to oversee the music.</p>\n<h2>How we built it</h2>\n<p>For the backend, we used Flask - a powerful template-driven Python web framework designed with modularity and scalability in mind. This allowed us to build roombox up from just a home page without really needing to modify our existing code. This definitely made the development process go a little more smoothly, as well as providing a lot of useful inbuilt stuff.</p>\n<p>For the frontend, we elected to use a framework called MaterializeCSS - this was perfect for a variety of reasons:</p>\n<ul>\n<li>It allowed us to have a site which worked well on both mobile and desktop browsers.</li>\n<li>It allowed us to create a site with a very clean, minimal design.</li>\n<li>MaterializeCSS has toast notifications built in - we used a Flask template to effectively create a \"message handler\" for Flask messages, which let us create toast notifications using only Flask's inbuilt <code>flash()</code> function.</li>\n<li>It removed a lot of the guesswork involved in creating a usable layout; most of the elements arrange themselves into a neat layout without much work on our part.</li>\n</ul>\n<h2>Challenges we ran into</h2>\n<p>Honestly, the development went quite smoothly all things considered. We ran into an issue where a bug in our code caused the database into an odd state, resulting in errors when performing queries - because we weren't storing any valuable data at that stage in development, we could work around the problem by deleting the database until we fixed the bug. In general, we found that database management was the most difficult part of the project to implement. Aside from that, there were no show-stopping issues, and we were able to get roombox finished relatively quickly.</p>\n<h2>Accomplishments that we're proud of</h2>\n<ul>\n<li>The server is resource-efficient enough that it runs fairly quickly with memory to spare inside the cheapest available DigitalOcean droplet ($5/mo for 512MB RAM, 20GB SSD and 1 vCore). If we run into performance issues as time goes on, we may consider upgrading, but for now it works fine.</li>\n<li>We were able to get the project finished in just over 12 hours - this left us plenty of time to squish any minor bugs and usability issues that we found with the project after that point.</li>\n</ul>\n<h2>What we learned</h2>\n<p>Developing roombox taught us a lot about front-end development more than anything; making sure the site was straightforward, ensuring the next steps were obvious, et cetera. We found that a lot of our time was spent rearranging things on the frontend to remove unnecessary steps, and fixing usability issues with the layout (like putting the search bar above the queue, where previously it was below and could end up off-screen). Additionally, it was nice to learn how the Spotify Web API works, and we learned a lot about how to make requests (and parse the response) using the popular <code>requests</code> library available on pip.</p>\n<h2>What's next for roombox</h2>\n<p>We have thrown around the idea of preparing roombox for public use - the idea seems to be popular with people who have had it demonstrated to them, and the site is pretty close to being ready for public consumption - we just need to finish implementing little \"polish\" things (like auto playlist deletion after a given time, and the ability for the host to delete things from the queue).</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/postgresql\">postgresql</a></span></li><li><span class=\"cp-tag\">materializecss</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://hack.monotron.me\" rel=\"nofollow\" target=\"_blank\" title=\"http://hack.monotron.me\">\n<i class=\"ss-icon ss-link\"></i>\n<span>hack.monotron.me</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["worked mostly on frontend stuff and some serverside (writing the init script for the Flask server, etc.)", "worked on backend, including authorisation and communication with Spotify API and database management "]], ["Hacker Tracker", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Hacker Tracker \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/117/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Hacker Tracker \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/118/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We found that documenting hackathons outside of GitHub was very tough, and it was easy to forget to note down some of the more sentimental things that happened. Initially, we planned on using Alexa to note down milestones and events, but as this later became less of an option, APIs were suggested to us.</p>\n<h2>What it does</h2>\n<p>It acts to help hackathon attendees document tweets, commits, and milestones, and presents these in a final summary table.</p>\n<h2>How we built it</h2>\n<p>We built the frontend using core HTML initially, neglecting to style the website until core functionality was in place. We also endeavoured to implement the Twitter and GitHub APIs. We allowed users to store what they wanted to document in MongoDB, and endeavoured to parse Twitter and GitHub data into this database too.</p>\n<h2>Challenges we ran into</h2>\n<p>Making sense of both the Twitter API and GitHub API were a challenge. Parsing the Twitter data was also a nightmare! We had no previous experience using these APIs. Interfacing between PHP and HTML proved a challenge, since the website was very heavy on both reading and writing database data.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are proud of making the APIs work and integrating all our work together! We believe that with a quick and easy setup, this could be a tool that we all use during hackathons.</p>\n<h2>What we learned</h2>\n<p>We learned about new APIs, building forms, and using databases. In particular, Simon began to understand PHP, and while Darren had experience in this before, he learned about the most effective ways to use database data in a website.</p>\n<h2>What's next for Hacker Tracker</h2>\n<p>Integrate more APIs into Hacker Tracker to make it a stronger platform for many people use it as a platform to document their previous hackathons! It also has social network potential. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/php\">php</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twitter\">twitter</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/git\">git</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/github\">github</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mongodb\">mongodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bootstrap\">bootstrap</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/undying-fish/hacker-tracker\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/undying-fish/hacker-tracker\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I built the server-side backend of this website in PHP and the ability to store user data submitted in a MongoDB database. Whilst I had some experience working with MongoDB and PHP before, linking the two technologies together was unfamiliar territory which made the whole experience rather challenging. Having said that, I have learnt lots of new things such as the MongoDB PHP drivers, browser sessions, Composer and the Twitter API.", "", "", ""]], ["Aqua-Mazing", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/aFK2VOmQwZM?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Aqua-Mazing \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/149/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>I like water and stuff</h2>\n<h2>The water simulation works 100%, however the physics for pushing the player with waves is a bit...janky</h2>\n<h2>How we built it</h2>\n<h2>The simulation used is really a clever approximation of an actual 2d simulation, and as such detecting wavefronts to apply forces requires making some educated guesses based on the properties of waves...This could have gone better</h2>\n<h2>Looks nice, got the core simulation up and running very quick. Still feel the core game idea is sound.</h2>\n<h2>Dont assume creating your own physics engine is easy...</h2>\n<h2>May look into solving the issues with wave detection, at this point we can then implement the obstacle generation which is mostly made (but not enabled in this build)</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/blaze237/Aqua-Mazing\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/blaze237/Aqua-Mazing\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I wrote the water simulation core, wave push mechanics and image manipulation code,", ""]], ["Action Action!", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Action Action! \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/320/datas/gallery.jpg\"/>\n<p>\n<i>plot</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>Action Action</h1>\n<p>Scan your books, newspapers and documents. Quickly find sections that involve drama and <em>action</em>. Interesting parts are easy to find by searching for the highlighted paragraphs.</p>\n<p>It even enables you to have a look at different plots of the underlying features as well as giving you the opportunity of highlighting the word type structure and frequency of your document.</p>\n<p>The project was implemented by:</p>\n<ul>\n<li>using a diverse range of features extracted from different text units \n(i.e. sentence length, amount of adjectives...)</li>\n<li>\n</li></ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/nltk\">nltk</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/AceLewis/NLP-analysis\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/AceLewis/NLP-analysis\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I started by doing the back-end data processing and moved over to the XML management that represents our results on the website.", "I helped with the software for counting different types of words (e.g verbs, nouns and punctuation types), as well as the calculation of the action coefficient and general graph plot for the website.", "I worked on the Flask front end and some of the back end too"]], ["hackNottsAlexa", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h1>hackNottsAlexa</h1>\n<p>We came up we a load of ideas of how to use Alexa. They were either already built in or impossible due to limitation in the technology.</p>\n<p>Eventually we found an idea that we could work with. Make the slackbot but on Alexa. We've tried to make it flow as best as possible.</p>\n<p>We hope you like it.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/johnathan99j/hackNottsAlexa\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/johnathan99j/hackNottsAlexa\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["hacksnothate.com", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Online Harassment is a serious issue, but awareness needs to be raised. </p>\n<h2>What it does</h2>\n<p>The site features a short quiz designed to test the user's knowledge regarding online harassment. It is scored immediately, with the form marking answers correct or incorrect. At the bottom of the page, there is a link to #HackHarassment's brochure, where the information for the quiz was found. It also links to the #HackHarassment's challenge.</p>\n<h2>How we built it</h2>\n<p>domain + HTML + jotform + AWS = website!!!</p>\n<h2>Challenges and Future Goals</h2>\n<p>Initially I was going to have a large set of questions and randomize the questions that appear each time the site is loaded, but incorperating the jotform element into javscript was a bit harder than expected. It will definitely be a part of future versions.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jotform\">jotform</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://hacksnothate.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://hacksnothate.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>hacksnothate.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["Alexa the Werewolf", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Werewolf is an amazing game.Combine it with Alexa's voice command and a little (huge actually) amount of Python in the backend and you get countless hours of fun.</p>\n<h2>What it does</h2>\n<p>Calls into Alexa's API in order to simulate the host of a werewolf game.</p>\n<h2>How we built it</h2>\n<p>The backend is fully supported by AWS,while Alexa makes calls to our Flask server to get the whole story of the werewolf.Then,it parses the info into our front end written in html,css and js in order to provide mobile users with a GUI</p>\n<h2>AWS challenge</h2>\n<p>Lambda - handles Alexa integration\nGame Server - EC2\nRoute53 for static routing\nCloudWatch\nS3 with CloudFront to serve silent mp3 files for timing.</p>\n<h2>Domain challenge :</h2>\n<p>alexaplaywerewolf.com</p>\n<h2>Challenges we ran into</h2>\n<p>Get alexa to understand how to run our game</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Learning how to use Alexa Python SDK in order to develop our project.</p>\n<h2>What we learned</h2>\n<p>A lot about Alexa,how it works and what you can use it for.</p>\n<h2>What's next for Alexa the Werewolf</h2>\n<p>Ui imporvements and a lot of code cleaning.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/JacquesRyan/hacknotts\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/JacquesRyan/hacknotts\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Contributed to develop the idea, define game dynamics and role assignment as well as wrote the speeches.", "Front and Backend Development using HTML,CSS,JS and Flask", "", ""]], ["DubRace", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"DubRace \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/189/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"DubRace \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/190/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"DubRace \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/191/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"DubRace \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/192/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We started off wanting to make a game based on the music that you're listening to. We ended up making a music visualiser optimised for edm with special events or kicks and drops.</p>\n<h2>What it does</h2>\n<h2>How we built it</h2>\n<p>loads and loads of js </p>\n<h2>Challenges we ran into</h2>\n<p>javascript is 90% bs</p>\n<h2>Accomplishments that we're proud of</h2>\n<h2>What we learned</h2>\n<h2>What's next for DubRace</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag\">babylon-js</span></li><li><span class=\"cp-tag\">dancer-js</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://rishi.doubletrouble.co:8000/\" rel=\"nofollow\" target=\"_blank\" title=\"http://rishi.doubletrouble.co:8000/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>rishi.doubletrouble.co</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Transaction Nebulae", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Transaction Nebulae \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/202/datas/gallery.jpg\"/>\n<p>\n<i>p17</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We were reading up on big-data science and statistics but got bored by chapter 2. Our focus moved away from trying to visualise trends to simply making pretty art instead. Unfortunately, both of us stopped drawing professionally at age 7 and our skills haven't developed since then.</p>\n<h2>What it does</h2>\n<p>It takes an aggregated data-set provided by Nationwide and animates the income, outgoings and balance over time into a so-called polar-coordinates-color-overlay-awesome-graph.</p>\n<h2>How we built it</h2>\n<p>Javascript + Magic</p>\n<h2>Challenges we ran into</h2>\n<p>Fuchsia vs Magenta...</p>\n<h2>Accomplishments that we're proud of...</h2>\n<p>Realising that neither Fuchsia nor Magenta were suitable and instead choosing Mauvish Crimson.</p>\n<h2>What we learned</h2>\n<p>Color theory is hard.</p>\n<h2>What's next for Transaction Nebulae</h2>\n<p>The ability to throw new data at the running program in real time and have the graph(s) keep getting drawn. This could also be adapted for stock market visualisations.<br/>\nMaking it work in <code>($browsers - $browsers[chrome])</code> would be cool, too.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/canvas\">canvas</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://robjte.de/projects/transaction-nebulae/\" rel=\"nofollow\" target=\"_blank\" title=\"https://robjte.de/projects/transaction-nebulae/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>robjte.de</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["bank-of-alexa", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/4BFneUfHtzA?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We saw what you could do with Alexa and seeing the talk by Capital One made it obvious to us. We wanted to see the future and the only way to do that is by inventing it.</p>\n<h2>What it does</h2>\n<p>We built a skill for Alexa using Python as our backend and flask-ask to interact with and create the skill for Alexa. You can call commands such as \"Alexa, show me my balance in Retirement\", \"Alexa ask banking to show me my financial report\", \"Alexa ask banking to remind me that I owe John \u00a310\", and \"Alexa ask banking to buy me a chicken using account Credit Card\"</p>\n<h2>How we built it</h2>\n<p>We built this over a 24 hour hackathon using Flask-ask, Python, Json and Requests. \nArron and I worked on the backend side using the Capital One API. Ollie and Chris worked on the Alexa front end.</p>\n<h2>Challenges we ran into</h2>\n<p>The Alexa API regularly timed out due to poor wifi or other issues. To overcome this we set up a mobile hotspot to circumnavigate the bad internet.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Making Alexa understand and respond to requests made by humans. This was one of the more challenging aspects, despite the Alexa API supporting this. Because of the issues we had with the API it was difficult for us to develop a basic working Alexa application fast.</p>\n<h2>What we learned</h2>\n<p>We learned how to use object orientated design within Python and how to effectively work with the Alexa and Capital One API.</p>\n<h2>What's next for bank-of-alexa</h2>\n<p>Since Capital One only have a hackathon API we might not be able to develop much on it, however, the future of banking is clearly to bring it into the home and to use IOT devices such as Amazon Echo/Dot and we are glad to have been at the edge of technology.</p>\n<h3>Update</h3>\n<p>Thanks to some good comments from Capital One, we will be continuing this project.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag\">flask-ask</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/alexa\">alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/capital-one\">capital-one</a></span></li><li><span class=\"cp-tag\">api</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/ajgeek/vr-banking\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/ajgeek/vr-banking\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the backend with Arron, I created functions which acted like API following the Unix Philosophy to allow the Alexa team to easily implement the capital one functions in their programs. Specifically I created:\nHow much you owe someone and the ability to owe someone an amount", "Worked with Brandon on processing the nessie API and making the endpoints for Alexa.", "Actually set up the Alexa. Very proud of it. aMEIzing.", "I was working with the Amazon Alexa API and integrating the backend Python functions that Aaron and Brandon worked on with the Alexa Christos set up. I created the utterances and intents that forwarded commands given to Alexa to the appropriate python functions that formatted responses, and then sent those responses back to Alexa."]], ["HotPebble", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We are basically a bunch of creative students who thought hard about the small life hacks that people will like. Pebble was a new gadget for most of the team and we wanted to explore what we could do with it.</p>\n<h2>What it does</h2>\n<p>HotPebble is made up of 3 simple utilities function.</p>\n<ol>\n<li>Hands-free smooth scrolling of webpages by rotating the wrists.</li>\n<li>Control of media on the pebble, such as play/pause, previous and next song/video and volume controls.</li>\n<li>Control of PowerPoint presentation on the pebble.</li>\n</ol>\n<p>Use Cases:</p>\n<ul>\n<li>Imagine following a cooking recipe in the kitchen and using the scroll feature to follow the steps of the recipe.</li>\n<li>Reading an e-book/blog and not having to constantly reach for the trackpad on your laptop to view the contents.</li>\n<li>Many of us like to lie on our beds/walk around the house while listening to music from the computer. It is always a pain to walk right up to it to change tracks, adjust the volume or start/stop playing. With HotPebble, there is a simple and seamless solution to manage your media experience.</li>\n</ul>\n<h2>How we built it</h2>\n<p>There are two main components to this project, the client-side pebble application and the server scripts to handle client data. The client-side pebble application is built in pure C, the highest level language in the world ;). The server scripts are built in Python and caters separately to both macOS and Windows. The macOS scripts uses Python libraries such as pyautogui and pynput, whereas the Windows scripts uses the win32api.</p>\n<p>The pebble app collects accelerometer data and performs on-device processing to eliminate jitter and smoothen out spikes in orientation values. The app then pipes the data via Bluetooth serial to a server listening on a laptop, which interprets the data to perform the various commands that HotPebble is capable of. This includes scrolling the active window, sending media keys such as Play/Stop, Next/Previous Track, volume control and simple presentation shortcuts.</p>\n<h2>Challenges we ran into</h2>\n<p>It was a difficult process to connect pebble applications to non-mobile devices as there was no official API support for direct connection. We had to rely on an external Python library (libpebble2) to accomplish it. The documentation was not very extensive and not much resources/examples were available online. Therefore, we had to spend a lot of time figuring out how to implement the functionalities that we desire.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>It was our first hackathon together as a team even though we had known each other for more than a year. It was an amazing experience as we got to learn about each other better. </p>\n<p>We are super proud to have completed what we had set out to do. It will definitely be a memorable time and a start for many more great hackathon experiences to come.</p>\n<h2>What we learned</h2>\n<p>Learning to work well in a team. Finding workarounds to technical obstacles that we face. Helping each other solve problems. Managing our expectations and time. </p>\n<h2>What's next for HotPebble</h2>\n<ul>\n<li>Implement server scripts to cater to the Linux platform</li>\n<li>Add more modules for greater functionality</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li><li><span class=\"cp-tag\">winapi</span></li><li><span class=\"cp-tag\">pynput</span></li><li><span class=\"cp-tag\">libpebble2</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/pebble\">pebble</a></span></li><li><span class=\"cp-tag\">pyautogui</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/now-raymond/hotpebble\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/now-raymond/hotpebble\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["(SKIP THIS) Fat Zombies (SKIP THIS)", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"(SKIP THIS) Fat Zombies (SKIP THIS) \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/344/datas/gallery.jpg\"/>\n<p>\n<i>Fat Zombie</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I finished my first game starting from scratch with just c++ and sfml</p>\n<p>GitHub: <a href=\"https://github.com/chtorr97/HackNotts16.git\" rel=\"nofollow\">https://github.com/chtorr97/HackNotts16.git</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag\">sfml</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/chtorr97/HackNotts16.git\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/chtorr97/HackNotts16.git\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Clausiosity Rover 2: The Woofening", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Clausiosity Rover 2: The Woofening \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/452/319/datas/gallery.jpg\"/>\n<p>\n<i>The fully completed cardboard robot. Whats next, Robot Wars?</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Our (excluding Stephen) hack from last year, now for a similar robot sequel (including Stephen).</p>\n<h2>What it does</h2>\n<p>Walkies. Play dead. You give it commands and it does it.</p>\n<h2>How we built it</h2>\n<p>Lots of tape. Not GIT. Anything but GIT.</p>\n<h2>Challenges we ran into</h2>\n<p>Gravity, things falling apart, number of pictures, the adhesiveness of certain materials. Ghosts possibly, probably?</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Competent Amazon Alexa integration. It looks really sad. Face detection.</p>\n<h2>What we learned</h2>\n<p>How to do </p>\n<h2>What's next for Clausiosity Rover 2: The Woofening</h2>\n<p>Fully integrated face recognition for walkies.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-alexa\">amazon-alexa</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">sellotape</span></li></ul>\n</div>\n</div>", ["Facial  recognition, design, some hardware stuff", "", "", ""]]]