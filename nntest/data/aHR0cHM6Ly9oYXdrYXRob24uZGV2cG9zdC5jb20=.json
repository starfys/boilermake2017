[["PolyChat", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/6OlIdY9bB1E?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"PolyChat \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/463/datas/gallery.jpg\"/>\n<p>\n<i>Logo by: Shen Gao</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>UMASS Lowell has a nationally diverse student body as well as faculty, which can lead to misunderstanding and frustration due to language barriers. After seeing how useful and successful Slack was implemented in the event, we got around to talking about how chat rooms could become multilingual, and how cool would it be if the chat sent from anyone in any language could be translated to a language chosen by the user automatically. This is the drive and purpose behind PolyChat; to allow a linguistically diverse group of people to communicate with each other with peace of mind knowing their message is being conveyed properly.</p>\n<h2>What it does</h2>\n<p>PolyChat either automatically detects a user's language using HPE's Language Detection API, or accepts a language option picked by the user and translates the message using Google's Translate API into the specified language. Additionally, our application uses HPE's Sentiment Analysis to determine the overall mood of a message, and displays it to the recipient in the form of an emoji.</p>\n<h2>How we built it</h2>\n<p>A web application using HTML+CSS, Google's Translate API, HPE's Language Detection API and Sentiment Analysis API. Hosted on AWS.</p>\n<h2>Challenges we ran into</h2>\n<p>Originally wanted speech to text, but we couldn't find a way to speed up the process, which took too long for it to be used as a real time feature. Also a delay in shorter messages due to parsing of API for possible language matches.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>The web page was well designed, and the UI is user-friendly. Our application can automatically detect languages, and can display a positive or negative mood based on the language used. Also, we have a lot of languages available. Like, a lot. Thanks Google.</p>\n<h2>What we learned</h2>\n<p>The mechanics of speech to text and text to speech API's, translation API's, and the functionality of a user-friendly chat room.</p>\n<h2>What's next for PolyChat</h2>\n<p>Performance fixes, and load times for translations need to be improved. Also a direct messaging system and private chat rooms, which goes in tandem with user accounts.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/adobe-illustrator\">adobe-illustrator</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/inkscape\">inkscape</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/gimp\">gimp</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/github\">github</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-translate\">google-translate</a></span></li><li><span class=\"cp-tag\">haven-language-detection</span></li><li><span class=\"cp-tag\">haven-sentiment-analysis</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://cardanos.com\" rel=\"nofollow\" target=\"_blank\" title=\"http://cardanos.com\">\n<i class=\"ss-icon ss-link\"></i>\n<span>cardanos.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Backend and systems working. Got the website up and running on AWS, with a configured domain name. Worked on initial experimentation with different APIs, particularly speech to text, but none was fast enough for our needs. Worked on getting HavenOnDemand to work, and got their language identification and sentiment analysis APIs to work with our service. Unfortunately, due to delays, we had to limit their use a bit.", "", "", ""]], ["Clock Work", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Clock Work \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/483/datas/gallery.jpg\"/>\n<p>\n<i>View shown when there are alarms. </i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Clock Work \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/484/datas/gallery.jpg\"/>\n<p>\n<i>The default loading screen. with no data.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Clock Work \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/485/datas/gallery.jpg\"/>\n<p>\n<i>Choosing an alarm time. </i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Clock Work \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/486/datas/gallery.jpg\"/>\n<p>\n<i>When an alarm's going off. Such a fun fact! </i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Almost everybody wakes up to alarms every day. A process that's extremely linear, straightforward, and generally unpleasant. We wanted to customize the experience per user, and to give them useful information when they woke up, rather than just waking them up with a loud sound. </p>\n<h2>What it does</h2>\n<p>Clock Work takes information relevant, and enjoyable to the user, and pushes it to the screen when they wake up. In addition to alarming, Clock Work also shows the user's next two calendar appointments, and a fun fact, or a headline from reddit stored using AWS APIs. </p>\n<p>In addition, the information is customized based on the user using HPE APIs. </p>\n<h2>How I built it</h2>\n<p>Using Android Studio, we were able to create an Android app for our portable alarm clock. We also used Java to interface with multiple APIs to manage our data on and offline. </p>\n<h2>Challenges I ran into</h2>\n<p>Integrating and managing multiple web services is difficult. Ensuring they don't step on each other was a task in and of itself. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Constructing everything into a workable product in such a short amount of time was incredibly difficult, and incredibly rewarding. </p>\n<h2>What I learned</h2>\n<p>An idea doesn't have to be complicated to be useful.</p>\n<h2>What's next for Clock Work</h2>\n<p>Just wait and see! </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag\">hpe</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android-studio\">android-studio</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/IoT-Hawkathon/Clockwork_App\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/IoT-Hawkathon/Clockwork_App\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I was the core Android developer. Most of the base work of the app was done by me. ", "", ""]], ["Shell-Scribe", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Shell-Scribe \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/490/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>-When writing in the command line, programmers often wish that they could bring back lines upon lines of old bash code, rather than having to rewrite similar code every time you wish to create a similar program. Shell-Scribe allows you to do just that and more.</p>\n<p>-Shell-Scribe, once installed, will save the bash commands that the user runs and will save them to a built-in auto-lesson-generator function. This function will prompt the user to comment each line of code (while also showing that code's output) so that other users can refer to the instructions as a sort of tutorial system. </p>\n<p>-Built upon python, unix, and bash.</p>\n<p>-This command-line application leaves plenty of room for updates and additions.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">unix</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bash\">bash</a></span></li></ul>\n</div>\n</div>", ["", "", ""]], ["GearPong", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>A fun game with robots!</p>\n<h2>What it does</h2>\n<p>Android controlled robot that plays beer pong.</p>\n<h2>How we built it</h2>\n<p>ROS ( robot operating system ), a publisher- subscriber framework was used to have an Android app control the robot, running off an Arduino Uno.</p>\n<h2>Challenges I ran into</h2>\n<p>Many, many, hardware failures.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>So many people and pieces or tech working together.</p>\n<h2>What I learned</h2>\n<p>I used ROS for the first time last night. Definitely a learning experience for all of us.</p>\n<h2>What's next for GearPong</h2>\n<p>Where are integrating computer vision to have an unbiased robot referee to keep score.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">ros</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/opencv\">opencv</a></span></li></ul>\n</div>\n</div>", [""]], ["MySiSPal", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>UMass Lowell's Student Information System (SiS) is infamous among students, and teachers, for it's backwards-thinking user interface. Actions like selecting courses, finding professors, and checking grades are all treated the same: as a transaction. As a result, the shopping cart inspired database system has an extremely high learning curve, and leaves most newcomers utterly lost without the required freshman training. We sought not to fix this problem at the Hawkathon, but instead create a better, more tolerable alternative.</p>\n<h2>What it does</h2>\n<p>The amount of work necessary to completely integrate the entirety of SiS is immense and definitely a part of our future plans. For our current model, we have built on some of its most frustrating features. For example, when looking for grades at the end of a semester, students have to go through a wide array of selections and drop down menus to get this information. With MySiSPal this information is only a single word text message away. The power of MySiSPal is truly realized in the fact that any cell phone, as long as it has texting capabilities, is able to use it. </p>\n<h2>How we built it</h2>\n<p>The result of our work at the Hawkathon is prototype which consists of a website (<a href=\"http://www.mysispal.com\" rel=\"nofollow\">www.mysispal.com</a> aka 50.17.160.160) that allows users to sign up with their emails, and eventually their SiS passwords, which are stored along with the scraped text grades (upon request from our API but not the Twilio API).</p>\n<h2>What we learned</h2>\n<p>Throughout our time at the Hawkathon, we learned how to use Twilio's texting capabilities to its full extent, and also had a chance to work with AWS, thought it was not a favorite. In addition, we each gained experience working with both front-end and back-end procedures.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/php\">php</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twilio\">twilio</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/tventura1337/mysispal\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/tventura1337/mysispal\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", ""]], ["Community Connections", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Community Connections \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/507/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to create something that would help the community, and we decided to create a simple, easy-to-use platform to connect people interested in volunteering with available opportunities.</p>\n<h2>What it does</h2>\n<p>Community Connections allows volunteers to find opportunities either based on their geographic location or their interests. It also allows organizations to find volunteers for events.</p>\n<h2>How we built it</h2>\n<p>We set up the basic logic of the app with PowerPoint, to make sure it was easy to use. Then we programmed our ideas into MATLAB.</p>\n<h2>Challenges we ran into</h2>\n<p>PowerPoint does not allow the user to input data when it is in presentation mode. Fortunately, MATLAB does, so we were able to solve that problem.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are proud that we developed a solid foundation for an app at our first hackathon. </p>\n<h2>What's next for Community Connections</h2>\n<p>With more time and practice, hopefully we will be able to develop Community Connections into an actual working app for Android, Apple, or both.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/matlab\">matlab</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/powerpoint\">powerpoint</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://hawkathoncomcon.blogspot.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://hawkathoncomcon.blogspot.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>hawkathoncomcon.blogspot.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Textable Door", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Textable Door \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/513/datas/gallery.jpg\"/>\n<p>\n<i>It's quite the setup. </i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>A lot of doors in colleges and in houses require a key to get in or a keypad to be installed, which can either be a troublesome task for activities like running clubs or an expensive option. So we wanted to create a lock system that is easy to use, does not require a lot of money shelled out, and is quickly able to be installed. The lock system would require a message to be texted and sent to a server using Twilio's APIs to unlock the lock system based on a group of stored phone numbers on the server. The system consists of a server, a Raspberry Pi, a chipKit Uno32, and breadboards. The server is maintained by an administrator and has AWS IoT encryption for security between the server and the Raspberry Pi. The system also has a camera that can take pictures of people that have entered through a door. Potentially, a record of the number of people that have entered a door could also be kept online on the server, and multiple doors could be handled by a server with different required messages as well. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">mpide</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twilio\">twilio</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/nginx\">nginx</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-web-services\">amazon-web-services</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-dynamodb\">amazon-dynamodb</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-ec2\">amazon-ec2</a></span></li><li><span class=\"cp-tag\">iot</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-sns\">amazon-sns</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-elastic-mapreduce\">amazon-elastic-mapreduce</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/hawkathon-atribecalledsuccess\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/hawkathon-atribecalledsuccess\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Worked on the software side of the Raspberry Pi handling the connection to AWS IoT.", "Did the Web side of the IoT, from server and DB, to client and MapReduce/Hive powered data analytics. ", "Worked on the physical interface with the lock-opening motor and raspberry pi GPIO code", ""]], ["IntelliFridge", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h1>Hawkathon Project</h1>\n<p>** There are 173278 recipes in the database (got it from <a href=\"https://github.com/fictivekin/openrecipes)**\" rel=\"nofollow\">https://github.com/fictivekin/openrecipes)**</a></p>\n<p>\n<img data-canonical-url=\"https://raw.githubusercontent.com/Bunchhieng/Hawkathon/master/public/images/s1.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--xE-5Tp-G--/https://raw.githubusercontent.com/Bunchhieng/Hawkathon/master/public/images/s1.png\"/>\n</p>\n<p>\n<img data-canonical-url=\"https://raw.githubusercontent.com/Bunchhieng/Hawkathon/master/public/images/s2.png\" src=\"https://res.cloudinary.com/devpost/image/fetch/s--b3KezJO5--/https://raw.githubusercontent.com/Bunchhieng/Hawkathon/master/public/images/s2.png\"/>\n</p>\n<h3>Objective</h3>\n<p>How often do we find ourselves constantly checking the fridge to see whats inside? How often do we end up discarding forgotten food from our fridge or\nfinding out that we are out of eggs or milk? We decided to create a solution to this problem by implementing a Smart Refrigerator. Our solution keeps track of\nthe Refrigerator's inventory via QR code scanning of items placed in the fridge. In addition the application is able to recommend recipes based on the fridge's inventory using data mining. In addition we utilized the HAVENONDEMAND Machine Learning API to perform sentiment analysis on food recipe reviews.</p>\n<p>We created a web application to display the contents of the fridge and the suggested recipes as well as adapted open source code for Qr scanning and sending JSON to our database.</p>\n<h3>High level overview</h3>\n<ul>\n<li>Generate QR code with JSON object that have property <code>name</code>, <code>added_date</code> and <code>expired_date</code></li>\n<li>Mining data against 17328 recipes in the database and recommend the most highest score (createIndexes) based on name textScore</li>\n<li> Each recipe come with url to the review and content website. We scrap all the content (except html tag) from the url and feed to the Havenondemand sentimental analysis API. This gives sentiment either <code>positive</code> or <code>negative</code> and the score is range from 0 to 1.</li>\n</ul>\n<h3>Future improvement</h3>\n<ul>\n<li>Twilio API to send text when foods is almost expired or amount less than x.</li>\n<li>Neural network to learn user cooking pattern</li>\n<li>Allow user to favorite/like recipes</li>\n<li>User account</li>\n</ul>\n<h3>Technology</h3>\n<ul>\n<li>Node.js - Evented I/O for the backend</li>\n<li>Framework used to build the REST-based backend</li>\n<li>Havenondemand machine learning API - sentimental analysis</li>\n<li>Mongodb - database</li>\n</ul>\n<h3>How to use</h3>\n<ul>\n<li>download recipes database <a href=\"https://github.com/fictivekin/openrecipes\" rel=\"nofollow\">https://github.com/fictivekin/openrecipes</a></li>\n<li>load recipes to Mongodb: <code>mongoimport --db test --collection recipes --drop --file recipeitems-latest.json</code></li>\n<li>load fridge data: <code>mongoimport --db test --collection fridge --drop --file fridge.json</code></li>\n<li><code>npm install</code></li>\n<li><code>npm run</code></li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/Bunchhieng/Hawkathon\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Bunchhieng/Hawkathon\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Full Stack", "I worked on a version of the Front End and connecting it to the back end. I wrote the initial UI prototypes.", "I worked on the front end of the project finding the inconsistency of the page. ", "I worked on a prototype for the Qr Code Scanner application for ios to scan in food items into the fridge. "]], ["Hands-Free Chess", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Hands-Free Chess \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/506/datas/gallery.jpg\"/>\n<p>\n<i>Hands-Free Chess</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Technology, fun, and bringing friends together with a new way to play chess.</p>\n<h2>What it does</h2>\n<p>Hands-Free Chess allows you to play chess by automatically moving chess pieces across the board on command.</p>\n<h2>How we built it</h2>\n<p>Arduinos and motors were integrated with software and circuit boards to move an XY gantry coupled with a magnet. The magnet is below the chess board surface and directed to line up with a piece being moved or captured, putting the pieces in their respective places. The chess pieces have attractive metal on their bottom surfaces. The chess pieces were custom 3D printed.</p>\n<h2>Challenges we ran into</h2>\n<p>Debugging, circuitry, connections, locating (0,0) on the board and proper chess piece sizes for maneuverability. </p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Integrating hardware together, writing a successful algorithm and creating a cool new way to play chess.</p>\n<h2>What we learned</h2>\n<p>How to play team members strengths to get a project done quickly and effectively.</p>\n<h2>What's next for Hands-Free Chess</h2>\n<p>Accessible over the internet, making moves via text/internet, and for two boards to be connected and replicate physical chess piece movements. Voice recognition could also be incorporated to move pieces. This approach to chess could bring people together who are in different locations who would otherwise not have this kind of social and entertaining experience.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">xy-gantry</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/matlab\">matlab</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/3dprinting\">3dprinting</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/servo\">servo</a></span></li><li><span class=\"cp-tag\">stepper</span></li><li><span class=\"cp-tag\">motors</span></li><li><span class=\"cp-tag\">frame</span></li></ul>\n</div>\n</div>", [""]], ["Blind-View", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Blind-View \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/366/449/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<h3>We found a problem with technological help for the blind. We decided to make this program to help cover that gap. </h3>\n<h2>What it does</h2>\n<p>POC: Translates logos to speech in order to help the blind in everyday situations</p>\n<h3> Goal: Translate street signs, hazard signs among others. </h3>\n<h2>How we built it</h2>\n<h4>Python, OpenCV, JSON, HPE, time, HavenOnDemand,Twilio</h4>\n<h2>Challenges we ran into</h2>\n<p>\nCreating a time loop to take photos on a set period of instructions while updating the photo writing to a file every time a new photo was taken.<br/>\nThe second challenge was requesting the API from HPE and getting the API to acknowledge our request.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Creating the program and finishing.</p>\n<h2>What we learned</h2>\n<p>How to handle JSON objects<br/>\nHow to work with Rest API's<br/>\nUse of Twilio<br/></p>\n<h2>What's next for Blind View</h2>\n<p>Future applications include creating our own database to include street signs</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/opencv\">opencv</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twilio\">twilio</a></span></li><li><span class=\"cp-tag\">hpe</span></li><li><span class=\"cp-tag\">time</span></li><li><span class=\"cp-tag\">havenondemand</span></li></ul>\n</div>\n</div>", ["My role in Blind View consisted of controlling image capture with OpenCV, importing the API requests, sending text messages with Twilio, as well as creating a time loop to control everything.", "Research on topics for the project ", "I help research on the topics what they need for our project.", "I worked on handling API calls with HPE's HavenOnDemand Image recognition service. \nParsed the JSON into readable XML that would be sent to Mike's twilio server which will send a text to a blind user's mobile device which will be converted into speech by their phone.", "design and created a power point presentation to better understand and market the product. "]], ["Fridge Friend", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Opening the fridge and looking around wastes energy.\nHaving a list of items inside your fridge prevents you from triggering the largest loss of energy for your refrigerator.\nIf you can\u2019t remember when you bought, for example milk, this will prevent you from drinking old milk.</p>\n<h2>What it does</h2>\n<p>Scanner that keeps an inventory of what is in your refrigerator.\nYou scan items in and out of your fridge.\nKeeps track of how long you have had certain items.\nA camera captures the bar-code of products and looks for it in the database.\nIf there is a match it will show you what the product is based on the bar code.\nIt stores the day it was scanned in and it has an estimated expiration date for products such as milk.\nIt tells you how many days until your product will potentially go bad.</p>\n<h2>How we built it</h2>\n<p>Our scanner system consists of a raspberry pi with a webcam that is triggered by an old guitar pedal button that is wired directly to the GPIO. A simple Python function was used to facilitate the button being pushed thus triggering the camera.The image is then saved into a temporary local file folder. The image is sent to HPE Haven ondemand barcode recognition API via an http request to retrieve the data using Curl. The return from this request was stored in a JSON file and parced into our framework. Then it is checked against the database to retrieve the additional information such as the item name and expiration date. We are using SFML to create a front-end for the program. The database was also developed in a txt file.</p>\n<h2>Challenges we ran into</h2>\n<p>Problems that we ran into included the C++ implementation of the API data in both the bar-code recognition and Curl API. We also had a problem with the implementation of the bar-code database as well. These issues took many hours to solve. Our camera also couldn't take pictures with enough resolution to actually use the bar-code in the API. We had to use carefully taken cell phone pictures of the bar-codes to actually run the program successfully.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Honestly, we are proud of how the whole program came together. The API implementation into C++ was especially impressive.</p>\n<h2>What we learned</h2>\n<p>To tackle a project from both the back-end and the front-end to implement our own API was intense and immensely powerful.</p>\n<h2>What's next for Fridge Friend</h2>\n<p>This product we designed was originally meant for small scale use in a household refrigerator, but this API could potentially have even bigger applications. Our intuitive inventory could be used in a warehouse to track not only the amount of items, but their shelf lives and expiration dates as well. This could be used for perishables like food or other vital chemicals and medicines as well.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li><li><span class=\"cp-tag\">api</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/JohnPMerrill/Hawkathon\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/JohnPMerrill/Hawkathon\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["Worked on the back end api implementation, the data parsing functions, the hardware software integration on the raspberry pi, and the data structures used to store the produce data. ", "", ""]], ["Vote2016", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Vote2016 \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/550/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Vote2016 \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/536/datas/gallery.jpg\"/>\n<p>\n<i>Election Selection</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Vote2016 \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/537/datas/gallery.jpg\"/>\n<p>\n<i>Election Details and nearest polling place</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Vote2016 \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/539/datas/gallery.jpg\"/>\n<p>\n<i>Candidates</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Vote2016 \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/535/datas/gallery.jpg\"/>\n<p>\n<i>Candidates details</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Vote2016 \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/538/datas/gallery.jpg\"/>\n<p>\n<i>Scrolling for Candidates</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I tried to vote in Boston but I didn't know where my polling place was and I didn't even know I wasn't registered in Boston! So this kinda sparked the idea</p>\n<h2>What it does</h2>\n<p>This is a prototype of an app that gives the user more info on how to vote, where to vote, and if they can even vote</p>\n<h2>How we built it</h2>\n<p>We first designed the wireframes and designs, and then we implemented them with Android Studio</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/photoshop\">photoshop</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/hypereddie/Vote2016\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/hypereddie/Vote2016\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["Notr", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/468/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/469/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/470/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/471/datas/gallery.jpg\"/>\n<p>\n<i>Desktop Application</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/472/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/473/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 7\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/474/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 8\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/475/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 9\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/476/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 10\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/477/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 11\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/478/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 12\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/480/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Notr \u2013 screenshot 13\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/520/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We as college students often take photos of the notes on the board in class, due to multiple inconveniences e.g writing speed, erasing speed, handwriting, etc. As such, we've always wanted to be able to easily convert pictures of lecture notes to easily readable and searchable documents, not only for convenience but also to help us study efficiently. </p>\n<h2>What it does</h2>\n<p>Using Google Translate's Image to Text Recgonition, the written notes on the whiteboard is translated from image to text. This text is then inputted manually as text file into our application in order to organize into readable notes. The application also pulls important dates that it finds within the image and automatically creates and assigns due dates to Google Calendar.</p>\n<h2>How we built it</h2>\n<p>We used Python and the google calendar API.</p>\n<h2>Challenges we ran into</h2>\n<p>Very early on we ran into problems pertaining to processing text from images because of how primitive OCR (Optical Character Recgonition) APIs are. We also had trouble implementing Google Calendar's API into our program.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>After long toil, we managed to use the help of an internet forum in order to figure out how to fix our problem with Google's Calendar API, making it work well. </p>\n<h2>What we learned</h2>\n<p>Its really hard to identify and process written text through images</p>\n<h2>What's next for Notr</h2>\n<p>Currently, the program we have now is only partially done. Without a more powerful image to text processing API that can read handwriting, it can not be implemented into our program to use to convert lecture notes to text documents like we initially wanted. We hope to also include some sort of auto image processing using a special code to identify graphs/charts/etc that professors have deemed important. These pictures are then auto-cropped within the app and integrated into our translated notes. Ideally, this is all done as soon as the student takes a picture of the board.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-translate\">google-translate</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bash\">bash</a></span></li></ul>\n</div>\n</div>", ["Helped to brainstorm initial ideas, looked for Image to text APIs, provided various support", "Python code, various backend development", "Python code, various backend development", "I helped brainstorm and test the code. ", "I worked on the UI design of the IOS app and the web app."]], ["World Wide Med", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to learn how to work with different programs and look at other engineering students build their models.</p>\n<h2>What it does</h2>\n<p>-Informs people about the different hospitals around the world, and basic information on common diseases.</p>\n<h2>How we built it</h2>\n<p>We built it by using a template from weebly, and other sources to find our information.</p>\n<h2>Challenges we ran into</h2>\n<p>Since we are not computer science majors, we had trouble creating a website. We also tried to create a project using the leap motion, but we did not have any background information on coding and designing so we had to create a website based off of a template.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>Even though our website is not perfect, and lacks in many areas, we are proud that we even tried competing against computer science students. </p>\n<h2>What we learned</h2>\n<p>We learned that creating a website is very difficult, and that gathering information can be challenging because we need the accurate information to be presented.</p>\n<h2>What's next for World Wide Med</h2>\n<p>It would be nice if we had the chance to put up more hospitals that targeted specific diseases and treatments. We only had time to put up a few hospitals from each continent. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/weebly\">weebly</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://worldwidemed.weebly.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://worldwidemed.weebly.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>worldwidemed.weebly.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["MyBCC", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"MyBCC \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/487/datas/gallery.jpg\"/>\n<p>\n<i>BCCHACKS</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Most colleges have an app for students, but not Berkshire Community College, until now. Students have wanted a \"one-stop\" shop where they can get all of their academic needs fulfilled and MyBCC is what fulfills those needs.</p>\n<h2>What it does</h2>\n<p>MyBCC brings together our students most important online resources into one convinient package. Connecting past and present students, as well as Freshman to Upper classmen.</p>\n<h2>How I built it</h2>\n<p>We split up and tackled the project from various angles, and ran into some bumps in the road along the way.</p>\n<h2>Challenges I ran into</h2>\n<p>None of our team members have ever taken a class in Computer Scienece.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Overcoming the adversity that hackathon throws at you, especially since we have no previous programming experience.</p>\n<h2>What I learned</h2>\n<p>We have learned a whole lot about programming, and working through everything that was thrown our way.</p>\n<h2>What's next for MyBCC</h2>\n<p>Improvement, Improvement, there's always room for improvement. Whether it's new features or cleaner code. We look forward to improving MyBCC to a point where it can go beyond helping students at Berkshire Community College and start connecting the surrounding colleges and communities.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/mit-app-inventor\">mit-app-inventor</a></span></li></ul>\n</div>\n</div>", [""]], ["MandelThought", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/467/datas/gallery.jpg\"/>\n<p>\n<i>Neutral sentiment fractal art</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/496/datas/gallery.jpg\"/>\n<p>\n<i>Heartbeat trace from camera app</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/497/datas/gallery.jpg\"/>\n<p>\n<i>Negative sentiment fractal art</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/498/datas/gallery.jpg\"/>\n<p>\n<i>Heartbeat-reading camera app, screenshot</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/499/datas/gallery.jpg\"/>\n<p>\n<i>Heartbeat-reading camera app, in-use</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/500/datas/gallery.jpg\"/>\n<p>\n<i>Negative sentiment fractal art</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"MandelThought \u2013 screenshot 7\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/553/datas/gallery.jpg\"/>\n<p>\n<i>Positive sentiment fractal art</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We each delved into various interest areas and for members of our team and formed an idea that was modular, included the collective ideas of most of our team, and resulted in a thought-provoking tool for users. We all have a hearty appreciation for data analytics, particularly visualizing it, so this project ended up coming from the question: \"how many different sources of data can we visualize in a fun way?\" The answer was MandelThought.</p>\n<h2>What it does</h2>\n<p>MandelThought takes in various data sources and creates unique fractal art centered around the sentiment of the source. Sources include Facebook, Twitter, Reddit, and that list may increase as we work on MandelThought in the future.</p>\n<h2>How we built it</h2>\n<p>We wanted to make MandelThought as modular as possible, especially in the data side. To that end, we made integrating new data sources fairly easy, in that you only need to add the file that uses the API you're adding. Extras have to be individually added to the webapp portion, but that is unavoidable given our timeframe. The data we gathered from the various sites was analyzed by the Haven text analysis API. From there, we built a fractal art generation tool using Turtle and adjusted various fractal formation values based on the sentiment. The idea was to have negative emotion be more angular and sharp, while more happy, positive emotion would be represented with softer curves. We spent a huge amount of time trying to get heart rate data using a phone camera so we could add user mood to our calculations, but we ended up being unable to do that due to security measures. We did, however, manage to pull heartbeat data off the phone camera using the changes in red values in the camera image, which corresponds to heartbeat.</p>\n<h2>Challenges we ran into:</h2>\n<p>A main challenge we ran into was trying to get pulse data. This was going to be one of our data sources, and we went through many methods that almost worked. Each of these were attempted:</p>\n<ul>\n<li>creatively using Myo armband (around a bicep instead of forearm), very briefly worked</li>\n<li>using a Fitbit, the model we had didn't have pulse data</li>\n<li>distilling an energy drink with significant amounts of table salt in order to make an high-ion syrup in order to attach electrodes to the body, which probably would have worked if we had been allowed to attempt it.</li>\n<li>creatively using a Muse headset (around upper left side of torso instead of forehead), would have worked if there hadn't been complications with blue-tooth</li>\n<li>retrieving variations in blood in fingertip with a smart phone camera, actually consistently works</li>\n</ul>\n<h2>Accomplishments that we're proud of</h2>\n<p>The working fractal art generator that functions in tandem with sentiment analysis on various text sources was a huge accomplishment for us. Getting that online is an ongoing problem, but one we plan to solve before hacking ends. Our explorations for ideas about this project were outrageous and fantastic, and even though most of them fell through, the parts that stuck worked together to make our project a convoluted masterpiece in our eyes. Managing to pull real heart rate data off of an average android smart phone, using just the differences in red scale, was an incredible accomplishment, even if it couldn't be implemented directly into the project due to circumstances outside our control.</p>\n<h2>What we learned</h2>\n<p>We learned how to chain APIs together, gather data from strange, often ridiculous places, the noticeable difference between Pattern for sentiment analysis and the far superior Haven API for sentiment analysis, and the wonders of personalized fractal art.</p>\n<h2>What's next for MandelThought</h2>\n<p>We're going to try the energy drink distillation when we get back to Olin, and we're also planning on adding more data sources like a functional EKG with the materials we have available to us.</p>\n<p>At some point, we'll also try to bring the website we picked up online!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li></ul>\n</div>\n</div>", ["I worked primarily on the API integration for Twitter, Facebook, Reddit, and using the Haven API to analyze the resulting data from all those social media sources. I also was a major part of the write-up and assisted with fractal scaling based on sentiment.", "I created the random fractal generator and did all of the coding for the webapp.", "I worked on getting pulse data from various sources (as outlined in the \"challenges\" section).", "", ""]], ["Waffle", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Waffle \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/465/datas/gallery.jpg\"/>\n<p>\n<i>Winning a Waffle!!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>It was never easy for the event coordinators to run raffles and make sure the winner gets the prize! It is also disappointing to have to leave without a way to know if you've won!</p>\n<h2>What it does</h2>\n<p>Anyone who uses the app can create a raffle for an event that they are organizing! By having other people sign into the app and entering their ticket number (either through manual input or OCR), the organizer can then pull the winning ticket and automate a text message to the winner with details on how to claim the prize!! Not only can this be used for your small ice cream raffles and other shenanigans, but if you wanted to help out a community for the powerball, you can use Waffle!</p>\n<h2>How we built it</h2>\n<p>We built on node.js. Originally, we worked on parallel to build a native Android app as well as a web app. The Android app is currently not fully functional, however, our web app is ready to go! We used the Twilio API's to notify the winner and BootStrap to style the web app.</p>\n<h2>Challenges we ran into</h2>\n<p>OCR and RESTFUL API calls between our backend and Android created problems for querying. OCR was particularly difficult due to slow responses.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>It works and can be used as a tool!!</p>\n<h2>What we learned</h2>\n<p>Ambition is good, but too much will overwhelm you.</p>\n<h2>What's next for Waffle</h2>\n<p>More stable routing and error handling. Abuse prevention and cross-platform functionality. Integration with Powerball API's and other famous lotteries.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/twilio\">twilio</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://waffle-server.herokuapp.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://waffle-server.herokuapp.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>waffle-server.herokuapp.com</span>\n</a></li>\n<li><a href=\"https://github.com/Fanatic-Four/Waffle-Server\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Fanatic-Four/Waffle-Server\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", "", "", ""]], ["trumpit", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"trumpit \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/365/459/datas/gallery.jpg\"/>\n<p>\n<i>its just a trumpet</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>TrumpIt!</h1>\n<p>Generate topical and favorable political speeches.</p>\n<h2>What is Trumpit?</h2>\n<p>Ever wanted to be a politician, but couldn't figure out what to say? Well, now you can! We've carefully studied the speech patterns of some of the 2016 Presidential front runners in order to have you speaking like the professionals!</p>\n<p>Pick a topic, hit generate, and TrumpIt! </p>\n<h2>Usage</h2>\n<p>Clone the <code>git</code> repository to your local machine and build.</p>\n<pre class=\"language-nolang\"><code>$ git clone https://github.com/nickzuber/trumpit.git\n$ cd trumpit\n$ npm install\n$ npm run build\n$ node app\n</code></pre>\n<h2>License</h2>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/nickzuber/trumpit\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/nickzuber/trumpit\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n<li><a href=\"http://45.55.180.220/\" rel=\"nofollow\" target=\"_blank\" title=\"http://45.55.180.220/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>45.55.180.220</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]]]