[["Android Touchpad", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Use your phone to control your computer.</p>\n<h2>What it does</h2>\n<p>Registers gestures and translates them to a language your computer can understand and react to.</p>\n<h2>How I built it</h2>\n<p>Using Java, Android SDK and Bluecove</p>\n<h2>Challenges I ran into</h2>\n<p>Defining custom touch gestures on your handheld</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>It works, bruh</p>\n<h2>What I learned</h2>\n<p>How to use Java AWT utilities better.</p>\n<h2>What's next for Android Touchpad</h2>\n<p>More gestures, etc.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/bluetooth\">bluetooth</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["Frictionless", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Frictionless \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/115/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Frictionless \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/116/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Frictionless \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/117/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>An interesting opportunity to learn about network programming and low-level SDL</p>\n<h2>What it does</h2>\n<p>A multiplayer racing game written in C++</p>\n<h2>How we built it</h2>\n<p>A truly cross platform development, using git to collaborate between a Windows environment using Visual Studio and a Linux environment using gcc and emacs</p>\n<h2>Challenges we ran into</h2>\n<p>Socket based networking is difficult, especially if you need to do it in C++, do it i=over Wi-Fi, or do it in a cross-platform way.  Each of those represented hours of debugging.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>The game works, first and foremost.  It's fun to play, the art style is interesting.</p>\n<h2>What we learned</h2>\n<p>Much of the SDL library.  How to deal with sockets and unreliable messages.  How to do blend modes and textures in OpenGL.\nAlso, Ron learned the true meaning of friendship.</p>\n<h2>What's next for Frictionless</h2>\n<p>An android port looks possible, although the control scheme is not the best for it.  Much of the architecture is designed to support any number of players, not just two.  A webgl port (for browsers) is also possible.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/makefile\">makefile</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/opengl\">opengl</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sdl\">sdl</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/ssk97/Frictionless\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/ssk97/Frictionless\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["GeoHunt", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Seeking for and comparing apartments has always been a tedious and stressful process... Until now! \nPeople always check for the big three categories when choosing a new home, i.e. Income bracket of the neighbourhood, how many schools are in the area, and the crime rate. \nBut apartments/houses are not one size fits all! It is very hard for someone to do in-depth research on every potential living arrangement. \nWith GeoHunt, we will create personalized reports for you! </p>\n<h2>What it does</h2>\n<p>GeoHunt is a Chrome Extension that allows you to highlight different addresses. Each address you highlight will be compared to your transaction history. If there are things you like at that address, we will let you know!</p>\n<h2>How I built it</h2>\n<p>A chrome extension and sweat.</p>\n<h2>Challenges I ran into</h2>\n<p>Learning Android was a huge challenge because it seems that much of the code on the internet is a deprecated version!\nI learned that not many Python libraries worked with v3.x, and that when using many libraries it takes time and research to find out which version of Python would be compatible with each.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Making a working chrome extension, getting a first iteration of Android app, and learning/getting experience with Node.js</p>\n<h2>What I learned</h2>\n<p>It's important to do thorough research on a project before committing to it, and it's important to do research on all the API's and test them to make sure they would give relevant output.</p>\n<h2>What's next for GeoHunt</h2>\n<p>Polishing the android app, completing the backend, and fully integrating the backend with the chrome extension.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/plaid\">plaid</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-maps\">google-maps</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/chrome\">chrome</a></span></li></ul>\n</div>\n</div>", ["I worked on the front end and the android application. It was a challenge using deprecated android studio code and updating it to fit our needs. ", "I worked on the backend for the server. ", ""]], ["Fuzzy Time", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>When I had an analog watch, my responses to \"what time is it?\" were suitably vague. Now that my watch is smart (and, consequently, digital) I don't generally have an excuse not to say exactly what time it is. So I created a watchface that was as vague, grumpy, and uncooperative as I can be, when pressed for the time.</p>\n<h2>What it does</h2>\n<p>It's a watch face for the Pebble Time Round which, rather than displaying the exact time, gives phrases such as \"It's about two.\" or \"I don't know.\" The use case is: someone asks you what time it is, and without using your brain at all, your read what's on the watch.</p>\n<h2>How I built it</h2>\n<p>Read the docs on Pebble's website, consumed excessive quantities of caffeine.</p>\n<h2>Challenges I ran into</h2>\n<p>Pebble's C libraries are short on just enough functions to be irritating.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<ul>\n<li>First hackathon</li>\n<li>First time doing anything with a smartwatch</li>\n</ul>\n<h2>What I learned</h2>\n<ul>\n<li>Hackathons are fun</li>\n<li>Watches are cool</li>\n</ul>\n<h2>What's next for what-time</h2>\n<ul>\n<li>Other pebble models</li>\n<li>More interesting display</li>\n<li>External API integration e.g. Weather</li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/njm256/what-time\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/njm256/what-time\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["grounded", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"grounded \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/356/datas/gallery.jpg\"/>\n<p>\n<i>grounded logo</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"grounded \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/357/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Its 10pm on the second day of hacking. What do we have in the 'ole idea bucket? Not a damn thing. The ideas we do have? Pretty sucky. Then a spark goes off. A firework! What if there was an app that provided the feedback we all know (and come on, YOU know too) you really deserve?</p>\n<h2>What it does</h2>\n<p>Meet grounded. Grounded allows you to type in your fascinating (not) ideas, and the app will give you feedback. Want to start a really rad start-up? Grounded will tell you your true worth. Having too many people lifting you up? Feeling on top of the world? Get grounded. True, honest, real feedback.</p>\n<h2>How I built it</h2>\n<p>We designed the UI in Sketch and moved over to Xcode to do all the fun app-making. We also took to pen and paper to craft some really degrading responses.</p>\n<h2>Challenges I ran into</h2>\n<p>Do bad ideas count?</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Through thousands of fonts, we found one. Through infinite colors, one was selected. Out of all the bad ideas? We chose this one.</p>\n<h2>What I learned</h2>\n<p>We learned that even if you don't make a \"game-changing\" app, you can still waste hours of your time making a crappy one!</p>\n<h2>What's next for grounded</h2>\n<p>We plan to add more feedback responses to make the app even more demeaning, running your ideas further into the ground!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sketch\">sketch</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/swift\">swift</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/xcode\">xcode</a></span></li></ul>\n</div>\n</div>", ["I worked on the UI. I also wrote the Devpost :-)", "Responsible for ideation, and contributed input to the logo design.", ""]], ["College Football Stats API", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Static tables are so 2006.  A good API is the first step towards the future of college sports statistics reporting.</p>\n<h2>What it does</h2>\n<p>Rest endpoint that calculates quarterback statistics with optional filters</p>\n<h2>How I built it</h2>\n<p>Python and Falcon.  The demo page is made with bootstrap and knockout.</p>\n<h2>Challenges I ran into</h2>\n<p>CORS, Deploying with nginx, other technical firsts.\nAlso, the data was not perfect.  I had to program defensively.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>The first method of my \"API\" is up and running on the world wide web. </p>\n<h2>What I learned</h2>\n<p>How to deploy a python web api with nginx.</p>\n<h2>What's next for College Football Stats</h2>\n<p>More data, filters and positions.  Visualizations!  Predictive models!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">falcon</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://45.79.180.157/static/index.html\" rel=\"nofollow\" target=\"_blank\" title=\"http://45.79.180.157/static/index.html\">\n<i class=\"ss-icon ss-link\"></i>\n<span>45.79.180.157</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Anaximander", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/vbU7yzOzFqY?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Anaximander \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/362/datas/gallery.jpg\"/>\n<p>\n<i>Anaximander's photoshoot</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Named after the famous Greek philosopher and cartographer Anaximander, we set out to develop a robot who would be able to map out rooms autonomously. We decided to try to build this device after watching our friend play a video game that contained a similar device and we wanted to see if we would be able to emulate it.</p>\n<h2>What it does</h2>\n<p>As of right now it is unable to map out rooms, but it does have rudimentary navigation skills. It is able to attempt to avoid running into walls while it drives along by itself.</p>\n<h2>How we built it</h2>\n<p>We used a Raspberry Pi to program its navigational program along with an ultrasonic sensor that is able to detect Anaximander's distance from a wall. We also used a motor controller to control the two independent motors that are on each side of our robot. For wheels, we used old roller blade wheels that we found lying around. Finally we used the laser cutter to cut out a piece of wood that became the chassis for Anaximander.</p>\n<h2>Challenges we ran into</h2>\n<p>We struggled with building a power supply for our motors. We did not have battery holders or a premade battery pack so we had to make our own. We found that either the batteries would not touch each others terminals or the wires that would go the motors would not stay on the terminals. We went through a variety of different ways of making battery packs including using exclusively electrical tape, soldering, and a combination of electrical tape and soldering. Eventually we found that using copper to connect the terminals while using electrical tape and hair ties to keep them in place worked the best. We also struggled with a lack of jumpers to keep our wires in place, requiring us to think of creative ways to keep them in place.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are proud of actually being able to create a workable robot. Neither of us have attempted a project of this scale that didn't include predefined instructions. We were able to make an actual robot by ourselves and we did so despite having to improvise many of the parts.</p>\n<h2>What we learned</h2>\n<p>Both of us learned more about how Python works, how to wire circuits, and how to work together to accomplish a goal. We also learned that what we think might be the simplest parts may not be so simple after all.</p>\n<h2>What's next for Anaximander</h2>\n<p>We plan on continuing our development of Anaximander by upgrading its components and introducing the mapping function. We also are considering turning him into and RC or wirelessly enabled device, allowing us to control it while it still maintains its autonomous functions.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["Myo Armbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>In a world without salsa for you chips, one robot stand apart from the rest to deliver you to salvation.</p>\n<h2>What it does</h2>\n<p>We control this robot with our Myo armbands so that we can get refills on snacks and drinks while still being lazy.</p>\n<h2>How we built it</h2>\n<p>We used an Intel Edison powering 2 motors and we used a laser cutter to make everything else.</p>\n<h2>Challenges we ran into</h2>\n<p>All of them.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We got it to work. Maybe. We think. Kind of.</p>\n<h2>What we learned</h2>\n<p>We learned that Intel Edison is _ actually _ useless.</p>\n<h2>What's next for Myo Armbot</h2>\n<p>We would implement a dumptruck type action to pour the salsa/guac/queso/buffalo dip for us.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/intel-edison\">intel-edison</a></span></li><li><span class=\"cp-tag\">motor</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/myo\">myo</a></span></li><li><span class=\"cp-tag\">laser</span></li><li><span class=\"cp-tag\">wood</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li></ul>\n</div>\n</div>", ["", "", ""]], ["Khalima Candle", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Khalima Candle \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/392/datas/gallery.jpg\"/>\n<p>\n<i>Khalima Candle</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>It's valentine's day and we went to a hackathon</p>\n<h2>What it does</h2>\n<p>Beats to the rhythm of the users heart </p>\n<h2>How I built it</h2>\n<p>Lot's of solder, hot glue, and ample use of spare material</p>\n<h2>Challenges I ran into</h2>\n<p>Never wrote arduino before, limited knowledge of circuits. Needed to remove noise from the signal.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>First Hardware Hack!</p>\n<h2>What I learned</h2>\n<p>how to code for arduino+ a bunch of stuff for circuits</p>\n<h2>What's next for Khalima Candle</h2>\n<p>Use a decoration.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["AirBand", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<p>Can't play an instrument but want to jam with your friends? </p>\n<p>Air Band is a multiplayer android app where all you need to jam with your friends is your phone. Simply pick your instrument, imitate the motions, and we'll turn it into actual music. You don't need to know any of that \"music theory\" garbage. Playing in a band has never been so easy!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag\">ableton</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/eclipse\">eclipse</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/git\">git</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/CorruptData/Air-Band\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/CorruptData/Air-Band\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["All Android and server/client operations, preparing and sequencing MIDI, \"instrument\" design ", "Playing the notes, Drum beats, beats/tempo, quantizing notes, GUI", "Music Theory Generator."]], ["Moonlight Game Streaming for Chrome", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Moonlight Game Streaming for Chrome \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/400/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Moonlight Game Streaming for Chrome \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/401/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Steam In-Home Streaming, PS4 Remote Play, NVIDIA GameStream, and Xbox One game streaming all require unique software and/or hardware in client devices. Moonlight aims to bring game streaming to everyone with a suite of open-source game streaming clients compatible with NVIDIA GameStream.</p>\n<h2>What it does</h2>\n<p>Moonlight for Chrome lets you play AAA PC games from a less powerful computer like a laptop or tablet running the Chrome browser. Chrome provides a solid development platform with robust hardware H.264 video decoding across operating systems, advanced gamepad/input APIs, and, of course, the flexibility of JavaScript and HTML5 for UI design. Moonlight for Chrome brings a fully fledged local PC game streaming experience to a web browser for the first time ever.</p>\n<h2>How we built it</h2>\n<p>Moonlight for Chrome was built using Chrome's Native Client (NaCl) plugin system. It consists of C/C++ code compiled to a machine-independent bytecode which is distributed on the Chrome Web Store. We took the core streaming library for Moonlight clients and made the required changes for it to build and run under Native Client. This includes interfacing with the system's hardware decoding capabilities via NaCl and OpenGL, integrating the libopus library for audio decoding, tying in the various input and gamepad events from Chrome, and building a UI around it all.</p>\n<h2>Challenges we ran into</h2>\n<p>The sample code for doing hardware accelerated video decoding and rendering left us with several showstopping OpenGL bugs that took over 8 hours to track down. The lack of widespread use of NaCl meant that there were few external resources to help us.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We finally brought game streaming to ChromeOS users and allowed users to take their game streaming software on the go in a way only a browser-based solution can. </p>\n<h2>What we learned</h2>\n<p>Neither of us were web programmers prior to this, so integrating with the browser has been a very new experience. In addition, the OpenGL work was also new and unfamiliar territory. While it was tough to debug, I'm happy with how it turned out.</p>\n<h2>What's next for Moonlight for Chrome</h2>\n<p>We plan to launch the app on the Chrome Web Store in the coming weeks (after a bit of polish).</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li><li><span class=\"cp-tag\">nacl</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/chrome\">chrome</a></span></li><li><span class=\"cp-tag\">pnacl</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/cgutman/moonlight-chrome/\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/cgutman/moonlight-chrome/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["", ""]], ["Datr", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>It's Valentine's Day!</p>\n<h2>What it does</h2>\n<p>Helps you plan out your next date. It has a web app and an android app version!</p>\n<h2>How we built it</h2>\n<p>With lots of bodging of Jquery, Javascript, and HTML.</p>\n<p>We also used domains.com and Amazon web services to make the site.</p>\n<h2>Website</h2>\n<p><a href=\"http://bit.ly/1SpyFnQ\" rel=\"nofollow\">http://bit.ly/1SpyFnQ</a></p>\n<p>Web App:<a href=\"https://github.com/Scott-Crawford/Datr\" rel=\"nofollow\">https://github.com/Scott-Crawford/Datr</a></p>\n<p>Android App:<a href=\"https://github.com/BLubez/HackCWRU\" rel=\"nofollow\">https://github.com/BLubez/HackCWRU</a></p>\n<h2>Fun!</h2>\n<p><em>It has a special Hitchhiker's Guide to the Galaxy mode!</em></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/Scott-Crawford/Datr\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Scott-Crawford/Datr\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I did the front-end and most of the web app.", "Me design.\nMuch logo.\nVery color.\nWow.", "I learned some breakdancing moves", "I created the android app, and some backend stuff, as well as working on deploying it to the web."]], ["RUMA", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h1>RUMA</h1>\n<h2>Inspiration</h2>\n<p>My name is Prince Ghosh and my parter, Jack Mousseau and I want to revolutionize they way you park your car. First let me tell you a quick story. This past spring break, three friends and I drove to the Philadelphia auto show. For lunch, we decided we wanted to go to a Shake Shack for lunch about 10 blocks away. We drove to the location, found no empty metered parking spaces, and saw that the only available public parking charged upwards of $40 for the entire day. Now imagine there was someone who lived a block or two down and had an open parking spot at their house, but was out at work for the day. Here we are, paying $40 for public day parking when we only want to use the spot for an hour or two, and here, is a completely feasible empty parking space.</p>\n<h2>What it does</h2>\n<p>RUMA is a crowdsourced, share-economy based parking application that allows you as a host to put your unused parking spot up for rent, or for you, as a driver, to rent out those parking spots for a low fee. The application works through a three stage process. Stage one, register yourself as either a host or driver by completing a simple background check. Stage two, as a host you will receive a low signal Gimble proximity beacon that you place anywhere inside your house. When you put your spot up for rent everytime you aren\u2019t using it and a car checks out your spot and pulls into your driveway, the beacon ensures that the correct vehicle is there through RSSID confirmation. As a driver, you enter your final destination, the hours you need the spot for, and a radius you\u2019re willing to park from your destination Stage three, as a driver, you pick the spot that\u2019s most feasible for you, pay with one touch in app, and continue on to your hassle free parking experience. The revenue model behind RUMA is 80/20, the parking spot host gets 80% of each transaction's fee and we, as a corporation recieve the other 20%.</p>\n<h2>How we built it</h2>\n<p>RUMA was built primarily through Sketch and Swift and XCode. We initially storyboarded the entire application through Sketch and completed a thorough documentation of how we would like each screen to be for our final product. After that, we built the application with Swift and XCode. In the application, we used both Google Maps' as well as Swift's API's to process our mapping and our payment process. In the future, we hope to integrate Apple Pay to create an even more user friendly experience.</p>\n<h2>Challenges we ran into</h2>\n<p>A majority of the challenges we ran into were issues with layout, confirmations, and resetting our Gimble beacon interface. We overcame these issues through extensive debugging, closely studying other open-source software, and going through tutorials and manuals for actions we were confused about.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We're extremely proud of the entire application as a whole. From our proprietary pricing algorithm to our astounding user interface, we made an application that's not only functional, but also extremely appeasing.</p>\n<h2>What we learned</h2>\n<p>Throughout this Hackathon, we discovered how to create an output algorithm based on different options weightings and what works best to maximize profits while still keeping customers happy. We also learned a lot about user interface design, component design, and proximity tracking and confirmation through the use of the Gimble beacon.</p>\n<h2>What's next for RUMA</h2>\n<p>RUMA was first put into proof of concept in the fall of 2015 during Case Western's Blackstone Launchpad Startup Weekend. From there, the concept and its business plan have been entered into competitions and in the winter of 2015 placed 2'nd in pitchU at Case Western Reserve. From here, we have applied to be in the Spartan Challenge, and are looking to raise capital to provide free parking vouchers for firs time users as well as to purchase more Gimble Proximity beacons for our parking spot hosts.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/swift\">swift</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/gimbal\">gimbal</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/google-maps\">google-maps</a></span></li></ul>\n</div>\n</div>", ["I worked on the iOS application which is written completely in Swift.", "I worked on storyboarding the application, generating the pricing algorithm and contributed to the UI layout."]], ["Fl\u00fcr", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to create an app that built the perfect playlist, where you could plug in specifications and the generator would build exactly what you wanted to hear at that moment.</p>\n<h2>What it does</h2>\n<p>Fl\u00fcr creates a new playlist using data from a database that we created off of all songs with a \"genre\" field from the Spotify API. It creates a randomized list based off the parameters that the user chooses and is able to play it in the browser with Spotify  by pulling the ID of the song from the database.</p>\n<h2>How we built it</h2>\n<p>We used MySQL for the database, Flask for the web template, and html/css with jinja templating to design the website itself. We used the Spotify API and the Spotipy Python library to gather data for the database and to make the player functional.</p>\n<h2>Challenges we ran into</h2>\n<p>We found it a large challenge to find a way to accurately gather the data from spotify and to gather enough data from Spotify that had a \"genre\" field. This took the most time and was the feature we needed most for the project to work.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>The fact that we were able to pull so much data from Spotify to use and were able to put this to use in a functional player with a randomized playlist is what we're most proud of, because this is very close to our original dream and we were able to pull it off in 36 hours and were able to add some more features. We were also able to use SQL to find more ways of sorting and gathering the data.</p>\n<h2>What we learned</h2>\n<p>All of our team learned how to use SQL commands and use them in python code, and collectively we learned how to effectively use a database, how to use Flask web templating, and how to use the Spotify API.</p>\n<h2>What's next for Fl\u00fcr</h2>\n<p>We would love to find a way to sort music by intensity in the future, so that songs were rated by intensity of the beginning, middle, and end of the piece so that the flow of the playlist was fine-tuned. Though we tried to incorporated this into our project at first, we found out that many leaders in the music industry still struggle with this and it is something that we are excited to help with to progress the music tech industry further.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html\">html</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sql\">sql</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/spotify\">spotify</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/gracenote\">gracenote</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://pyedpyper.org\" rel=\"nofollow\" target=\"_blank\" title=\"http://pyedpyper.org\">\n<i class=\"ss-icon ss-link\"></i>\n<span>pyedpyper.org</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on the backend, specializing in algorithms that processed the data. I also helped with the front end by integrating it with Flask standards and making sure input was passed to the backend properly.", "", "", ""]], ["VidDelay", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>At our juggling practice, we have a giant screen that we have yet to put to use. So now, we can take video and play it on the monitor with a delay. That way, you can try a trick with all of your focus on trying the trick and afterwards watch the instant replay to examine technique and see how cool it looks. Then if you get something that looks cool, you can save it. This can also be applied to any other skill or sport that requires practicing good technique.</p>\n<h2>What it does</h2>\n<p>Takes webcam video and plays it back at a delay. It uses loop recording to store the video so only a fixed amount of memory is required, so it can be run for extended periods of time without running out of memory.</p>\n<h2>How I built it</h2>\n<p>The video playback and writing is in python, using opencv. The web interface uses Flask.</p>\n<h2>Challenges I ran into</h2>\n<p>Had to learn some Flask basics to get the web server to work.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Making a project that I will actually use on a regular basis. I've wanted something sort of like this for quite a while so it's nice to see it actually come to life.</p>\n<h2>What I learned</h2>\n<p>Come up with an idea well before my next hackathon. I'm glad this got done, but I think we could have tackled a more ambitious project if we had thought of one.</p>\n<h2>What's next for VidDelay</h2>\n<p>Make the web interface prettier. Maybe show the video stream on the web interface as well.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/opencv\">opencv</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/flask\">flask</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/KaiSmith/VidDelay\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/KaiSmith/VidDelay\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["HarmonicAnalyzer", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Music composition can be greatly facilitated via harmonic analysis using music theory. Having a process to do this would save a lot of time.</p>\n<h2>What it does</h2>\n<p>It takes a chord sequence of chords, and determines the quality and root of the chord.</p>\n<h2>How I built it</h2>\n<p>Blood sweat and tears and lots of c++ data structures and file parsing.</p>\n<h2>Challenges I ran into</h2>\n<p>The gp5 file format being used was undocumented, complex, and poorly designed. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>Developing a unique algorithm for root determination. Reverse engineering a file format.</p>\n<h2>What I learned</h2>\n<p>When working on a team, many things need to be standardized before hand. Also, I need to go the bed.</p>\n<h2>What's next for HarmonicAnalyzer</h2>\n<p>Getting it to be more stable with the current file format and expanding functionality to other musical score file formats.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/visual-studio\">visual-studio</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/electrojustin/harmonic-analyzer\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/electrojustin/harmonic-analyzer\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I worked on parsing the proprietary binary file format mainly. Reading outdated and relatively poor documentation, reverse engineering the parts that changed/weren't properly documented and turning it all into C++ code.", ""]], ["You Light Up My Life", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/MrOLFjdvm5E?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"You Light Up My Life \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/478/datas/gallery.jpg\"/>\n<p>\n<i>A touch of elegance in subzero temperatures.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"You Light Up My Life \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/480/datas/gallery.jpg\"/>\n<p>\n<i>Changing colors with distance.</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Hackers Ray and Kate are engaged!  Kate will wear a dress like this at their wedding this summer.  The concept of wearable technology that responds to the wearer's movement comes from Ray's experience in Cleveland Institute of Art's 'In the Dark' fashion competition.  His team took first place after presenting two beautiful dresses which responded to different inputs (steps and acceleration).</p>\n<h2>What it does</h2>\n<p>This dress (and matching bow tie) twinkle randomly in a blue color at their resting state.  When the two pieces get closer together, the color gradually shifts to a romantic red.</p>\n<h2>How it's done</h2>\n<p>Neopixels are controlled by RFduino microcontrollers in each piece.  The strength of the Bluetooth signal they receive from each other is used to approximate distance.  The wedding dress was not built from scratch- it's a dress from Goodwill that matches the general structure of Kate's wedding dress.</p>\n<h2>Challenges</h2>\n<p>Originally, the plan was for the pieces glow white, and to change in brightness as they got closer together.  But the neopixels make white light by shining bright red, green, and blue at once.  The power draw of so many pixels shining at once proved to be too much for the hardware, and voltage issues caused the RFduinos to frequently reset.  Moving to a color-responsive system reduced the power requirement by a factor of three, and also makes a much more noticeable change than variable brightness did.</p>\n<h2>Accomplishments</h2>\n<p>This is the first Hackathon Kate and Ray have ever been to.  Completing a project of this size in just 36 hours was a huge accomplishment.</p>\n<h2>Learning</h2>\n<p>Kate had almost no Arduino experience coming into hackCWRU, and learned all the basics of Arduino programming very quickly!  Ray already knew a lot about Arduinos, but picked up a lot of new skills in the field of sewing/tailoring.</p>\n<h2>What's next for You Light Up My Life</h2>\n<p>Ray and Kate plan to repeat this process with her real wedding dress (and careful oversight from a real tailor)!  Beyond that, the illuminated wedding dress will likely make an appearance on Kickstarter in the coming months!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">fastled</span></li><li><span class=\"cp-tag\">rfduino</span></li><li><span class=\"cp-tag\">neopixels</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/adafruit\">adafruit</a></span></li></ul>\n</div>\n</div>", ["I programmed most of the logic to make the dress twinkle and change color on proximity.  I also learned to solder on this project!  And, of course, I modeled the dress.", "I did the dress alterations and wiring for the leds and hardware components."]], ["Get Peaked", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/AviNHdD6K9g?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The four of us showed up to Hackathon anticipating that one of the others would bring the inspiration for a brilliant-world-changing-project.  We were all wrong.  After sitting around for 20 minutes doing nothing productive, one of the members jokingly suggested that we design an app that would optimize people's coding abilities, by assisting them with measuring their performance enhancing substance-intake.  Being the least outlandish, and most practical idea, the team decided to move forward with it.  Because we thought mobile apps would be the easiest and most fun, we decided to use that platform, even though none had any experience at all in it.  We soon learned we were wrong.</p>\n<h2>What it does</h2>\n<p>We set out to revolutionize the coding world, by assisting helpless coders monitor and maintain a BAC for maximizing their workflow.  This app takes into account the users weight, gender, and drinks available, and instructs them on how much they should drink to reach the ideal BAC.  The app then shows their BAC in real time, and reminds them from time to time to drink again, so that they stay in the ideal BAC range and are the most productive and efficient.  It also contains supplemental information on the Ballmer Peak, the inspiration and basis for our app.</p>\n<h2>How we built it</h2>\n<p>After investing painstaking hours of detailed research in deriving a formula for the ideal BAC (Blood Alcohol Concentration) of a coder, we arrived at the conclusion that the ideal BAC is 0.1337. From there, the project grew, mutated, changed, was modified, had a couple limbs hacked off, and changed into what it is now.  Starting as a simple equation in one panel that would tell you what you needed to drink, it became a multi-panel, multi-input platform for perfecting the human coding ability.  </p>\n<h2>Challenges we ran into</h2>\n<p>As with any revolution, change would not come easy.  We soon learned that learning and coding in a new language, that none of had any experience in before, could be difficult.  After investing 36 hours and the soul of one of our team members in a parallel Android platform, we were forced to give up on it, as well as the soul of our wayward teammate. RIP.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>However, through the fires and trials of Android Studio, we developed new and innovative strategies on how to help a fifth friend on his data structures homework.  On the iOS side, we accomplished building an app from scratch, a field none of us had previous experience in.  We know that this app has the potential to push us into a new era of enlightenment.  We believe that this is the most groundbreaking since the discovery of gravitational waves.</p>\n<h2>What we learned</h2>\n<p>What are the lessons we took from these trials? iOS is better and more user-friendly than Android.  Learning how to work better as a team, how to code in new languages, how many red bulls we can drink in an hour, what horny bull weed is.  But most importantly, now we know how to maintain the ideal BAC.</p>\n<h2>What's next for Get Peaked</h2>\n<p>Soon, on every phone, by default, Get Peaked will be installed.  Everyone will monitor their inflow of alcohol, using one of our iOS exclusive apps.  Now go, Get Peaked!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ios\">ios</a></span></li></ul>\n</div>\n</div>", ["", "", "", ""]], ["Disaster Dice", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Disaster Dice \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/549/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Disaster Dice \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/550/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Disaster Dice \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/551/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Disaster Dice \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/552/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Disaster Dice \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/553/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Disaster Dice \u2013 screenshot 6\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/554/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Will had already 3D printed a dice with images for a drinking game going into the hackathon, but mass producing dice for a drinking game seems almost limiting for what we could really do with images on a die. </p>\n<h2>What it does</h2>\n<p>We decided to make a website that allows users to submit pictures for a customized die that we can then laser etch onto a die for a customized dice rolling experience.</p>\n<h2>How we built it</h2>\n<p>We wanted to keep it simple to start, so we started off with by making a Sinatra app in ruby that we are hosting on an aws ec2 server. </p>\n<h2>Challenges we ran into</h2>\n<p>Precision of 3D printing and conversion of file types to laser cutter friendly files.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We kept an open mind and considered multiple methods of manufacturing and were able to successfully export images from our website to our manufacturer.</p>\n<h2>What we learned</h2>\n<p>Autocad's command tool, while powerful has terrible error messages. It's really easy to deploy a basic website through the use of Sinatra. Once you move beyond serving static content into handling forms, things become a lot more complicated and challenging.</p>\n<h2>What's next for Disaster Dice</h2>\n<p>Scalability! Higher levels of automation as well as a more scalable website to allow for increased traffic and organization of customers as well as a secure financial interaction with the customer.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sinatra\">sinatra</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ruby\">ruby</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/adobe-illustrator\">adobe-illustrator</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/amazon-ec2\">amazon-ec2</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://disasterdice.com/\" rel=\"nofollow\" target=\"_blank\" title=\"http://disasterdice.com/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>disasterdice.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I built the frontend of our website. The web app uses Sinatra and serves content made entirely from scratch and styled with W3-CSS. I spun up an EC2 instance and registered our domain at no cost to me thanks to MLH freebies.", "", ""]], ["MeuralGen", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"MeuralGen \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/563/datas/gallery.jpg\"/>\n<p>\n<i>Logical diagram</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h1>MeuralGen</h1>\n<h3>Inspiration</h3>\n<ul>\n<li>MeuralGen was first thought of as a logical extension of the famous Google Deepdream experiment, which has since grown into DeepArt and DeepStyle, which allow anyone to generate stylized art based on any image, photo, or painting. Seeing many other implementations of polyphonic generational techniques using complex methods, I wondered if it would be possible to generate convincing music through simpler means.</li>\n</ul>\n<h2>What it does</h2>\n<ul>\n<li>MeuralGen generates music through utilizing the characteristics of Recurrent Artifical Neural Networks with Long Short Term Memory. By amassing data from specific composers, MeuralGen is capable of generating music in certain composers' styles. Currently, MeuralGen holds one network trained by Frederick Chopin's piano pieces.</li>\n</ul>\n<h2>Mechanism / Method</h2>\n<ul>\n<li>Going off the notion that \"Music itself is a language,\" I worked to parse MIDI files, which store music as instructions (not unlike sheet music) into a form understandable to a language-predicting neural network (see karpathy's char-rnn). I programmed the Java-based \"Midi Num(eric) Converter\" to convert MIDI files into a textual form informed by the nature of deep learning - that is, a textual form emphasizing crucial data and minimizing extraneous distractors. With data amassed from a compilation of Chopin piano works, I was able to train the Long Short-Term Memory Recurrent Neural Network (LSTM RNN) presented by Karpathy to produce textual representations which could be translated through my Converter into MIDI files, and thus, music.</li>\n</ul>\n<h2>Challenges</h2>\n<ul>\n<li><p>As the parameters I sought to mark down in the converted MIDI were not well-expressed in the MIDI files themselves, there were a few obstacles in the writing of the MIDI Converter both from MIDI to text and vice versa. As well, since Torch-generated text representations would still occasionally produce errors, some ambiguity-handling capability was needed in the text-to-MIDI converter.         </p></li>\n<li><p>Separately, since karpathy's <a href=\"https://github.com/karpathy/char-rnn\" rel=\"nofollow\">char-rnn</a> is written in Torch, a scientific computing library for Lua which is unfortunately not compatible with Windows, setting up a working environment proved extremely troublesome. Even then, the two major halves of this project (The Java MIDI Converter and the Neural Network) are separated across OS and intermediate steps must be performed manually.</p></li>\n<li><p>At a point, I decided that the music seemed too \"random\" and attributed this to the representation of key as an absolute number. However, an attempt to train and sample a network model produced from MIDIs parsed with \"relative numbers\" (that is, intervals) failed spectactularly as the neural network enthuiastically added intervals until notes became out of range in both directions. The true solution was to decrease the \"temperature\" variable of the network sampling script.</p></li>\n</ul>\n<h2>Accomplishments</h2>\n<ul>\n<li>The real production of actual, polyphonic music with an amount of structure and recognizable style through such a simple method as a character-based Recurrent Neural Network felt like a very unlikely goal - and thus, the realization of that is really rather amazing.</li>\n</ul>\n<h2>Lessons learned</h2>\n<ul>\n<li><p>Firstly: The way in which information is presented to a machine learning algorithm can be as important as the algorithm itself.</p></li>\n<li><p>Secondly: The most obvious and easiest solution sometimes still might be the best one.</p></li>\n<li><p>Thirdly: \"Powerful\" does not mean \"error-free.\" Code for interpreting unpredictable inputs should be extremely robust.</p></li>\n</ul>\n<h2>What's next</h2>\n<ul>\n<li>Elimination of intermediate steps between network preparation and music generation</li>\n<li>More data sets from a diverse variety of distinct composers</li>\n<li>Non-command line GUI</li>\n<li>More exploration of alternative data expression</li>\n</ul>\n<h1>Usage</h1>\n<h3>To generate music</h3>\n<p>Download a .t7 file from the results folder in the repository, in either the absolute (recommended) or relative folders, and move it into the cv folder in char-rnn-master.</p>\n<p>Navigate to the location of char-rnn-master and call sample.lua according to instructions by <a href=\"https://github.com/karpathy/char-rnn\" rel=\"nofollow\">karpathy</a>. Use <code>&gt;&gt; [filename.txt]</code> after the file to output the console to a text file. Then, after retrieving the text file, run the MIDI Converter under option 3 and enter the arguments as requested. It is advised to convert the output MIDI to a MP3 through a program capable of editing tempo.</p>\n<p>Altering the \"temperature\" variable may assist in producing more or less chaotic outputs.</p>\n<h1>Examples</h1>\n<ul>\n<li><a href=\"https://github.com/Kaynato/-MusicTranscriber/tree/master/lib/absolute/default\" rel=\"nofollow\">Default Generation with Absolute Keys</a></li>\n<li><a href=\"https://github.com/Kaynato/-MusicTranscriber/tree/master/lib/absolute/temperature\" rel=\"nofollow\">Absolute Keys Generation with Temperatures Altered</a></li>\n</ul>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag\">torch</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/lua\">lua</a></span></li><li><span class=\"cp-tag\">karpathy-char-rnn</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/Kaynato/-MusicTranscriber\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/Kaynato/-MusicTranscriber\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["ChromoSim", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/ResGT0WChRg?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"ChromoSim \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/502/datas/gallery.jpg\"/>\n<p>\n<i>Simulation in progress</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"ChromoSim \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/503/datas/gallery.jpg\"/>\n<p>\n<i>Simulation in progress (board not completely filled yet)</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"ChromoSim \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/504/datas/gallery.jpg\"/>\n<p>\n<i>Completed simulation (including final statistics)</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Why \"visually intuitive\"?</h2>\n<p>Most of us are familiar with the basic ideas of genetics. We know that genetic principles, to a large extent, can determine physical characteristics of cells and organisms, and even govern patterns of behavior and interactivity. Genetic simulations armed with this knowledge have become ubiquitous in today's computing age, but they are generally laden with complicated numbers, terms, and abbreviations. </p>\n<p><strong>ChromoSim</strong> is an attempt to make these genetic processes visual, colorful, and perhaps even aesthetic.</p>\n<h2>What does it do?</h2>\n<p>ChromoSim is built on the core principles of <strong>mutation</strong> and <strong>competition</strong>, in such a way that the physical character (phenotype) of each cell can be represented natively by <strong>color</strong>, in 24-bit RGB space. Cells on a grid are programmed to multiply, mutate, die, and attack one other, according to probabilistic models. Mutations are handled by alterations of a relatively simple genetic code, which approximates the process of genetic mutation in real organisms, like humans. With this simple set of rules, complex patterns of growth, destruction, competition, niches, and predatory behavior can be observed -- all by looking at a vibrant dance of colors across a screen.</p>\n<h2>What does it <em>really</em> do?</h2>\n<p>ChromoSim was built in 36 hours. It is by no means an adequate representation of actual genetic processes. It fails to capture the depth, complexity, and molecular intricacies of real biology. (The human genome is more than 3 billion base pairs long -- ChromoSim uses a genome of length 12.) Yet, even with such a simple set of rules, we can still observe behaviors and dynamics that we would expect of genetically active populations. It's also pretty to watch.</p>\n<p>I believe that the most powerful application of ChromoSim lies in education. As a student studying molecular biology, I have often felt consumed by details of metabolic and biochemical theory. Simulations like ChromoSim allow students to learn by toying with and perturbing systems, thereby actively engaging in the learning process. The ultimate goal for ChromoSim is to deploy it as an educational tool in secondary and post-secondary education in understanding the fundamentals of genetic processes.</p>\n<h2>Challenges</h2>\n<p>It was not an easy task to develop a novel genetic code that (1) is based on real molecular biology, (2) <em>natively</em> encodes color information, (3) admits mutations with realistic phenotypic effects, and (4) is still simple and intuitive. Additionally, the invasion and competition system proved to be quite difficult to balance so that populations would remain dynamic over time. A GUI allowing the user to control simulation parameters, pause, and save/load simulation states was planned, but was unfortunately scrapped due to time constraints. A major constraint of the simulation (which will likely be addressed in a later iteration) is that its algorithms are entirely serial -- this is by design, in order to maximize interactions between cells -- however, the simulation runs a tad slow. And, as always, debugging was an irksome process.</p>\n<h2>Accomplishments</h2>\n<p>I have worked extensively with MATLAB in my research, but this project is the first time I have developed a specification document for a MATLAB program and executed those specifications without a hitch, on my first try. The data visualizations presented alongside the main simulation are helpful, I feel, in conveying the nature of the interactions between populations. Also, with a little magic (i.e. killing cells with extreme color saturation), the colors depicted are vivid and quite pleasant. </p>\n<p>I had a blast developing ChromoSim. It was a very fun and pedagogical experience, and the looming 8 AM deadline motivated high productivity. Free food and drink during development was <em>greatly</em> appreciated.</p>\n<h2>What's next?</h2>\n<p>I hope to continue developing ChromoSim, perhaps adding new functionalities and ways to visualize data, along with a GUI, the ability to save and load states, and an overhaul of the competition algorithm (which should significantly increase speed). In particular, I would like to add the features of dominant and recessive genes, viruses (which can \"hijack\" genetic code of host cells), and environmental factors, such as limited resources or toxic areas. In addition, I would like to make the interface more visually appealing, which may be aided by a departure from MATLAB for graphics. </p>\n<p>In the meantime, you can watch with bated breath as your favorite colony of crimson cells is wiped out by a rogue bunch of chartreuse crusaders.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/matlab\">matlab</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://drive.google.com/file/d/0B5LJjWFV5h4XUGZwUktNNXRxMzQ/view?usp=sharing\" rel=\"nofollow\" target=\"_blank\" title=\"https://drive.google.com/file/d/0B5LJjWFV5h4XUGZwUktNNXRxMzQ/view?usp=sharing\">\n<i class=\"ss-icon ss-link\"></i>\n<span>drive.google.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I conceptualized, developed, debugged, and tested the simulation in MATLAB. I also did preliminary research to confirm various details about genetic function in real cells."]], ["Cookie Chaos", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Cookie Chaos \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/544/datas/gallery.jpg\"/>\n<p>\n<i>Main Menu Screen</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Cookie Chaos \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/545/datas/gallery.jpg\"/>\n<p>\n<i>Game Over Screen</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Cookie Chaos \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/546/datas/gallery.jpg\"/>\n<p>\n<i>Game Scene Level 3</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Cookie Chaos \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/547/datas/gallery.jpg\"/>\n<p>\n<i>Game Scene Level 4</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>My inspiration for this project was my desire to learn how to create iOS applications on Xcode. While I made this project at a hackathon, I knew from the beginning that it would not be a competition-ready in 36 hours; I just wanted to put the new development skills I've been teaching myself all weekend into practice.</p>\n<h2>What it does</h2>\n<p>Cookie Chaos is a game with a simple objective: catch as many cookies as you can before they disappear. After you tap the first cookie that appears when you hit the \"Play\" button, cookies will begin to appear at random on your screen. Tap the cookies to \"catch\" them before they shrink away. If you miss a cookie, the game ends. The more cookies you catch, the more will appear at random on your screen, making the game more challenging as you progress.</p>\n<h2>How I built it</h2>\n<p>I used Xcode to build Cookie Chaos. Within Xcode I utilized SpriteKit and Swift. </p>\n<h2>Challenges I ran into</h2>\n<p>The format to submit an app icon on Xcode is complex and requires you to manually create different sized icons for each of Apple's devices and generations. I did not have time to submit an icon to appear instead of the default icon on my iPhone's screen, but as I refine this project, I will add one. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I'm proud of teaching myself the basics of Xcode and using that new knowledge to create an application in 36 hours. Cookie Chaos is also the first app I developed completely alone.</p>\n<h2>What I learned</h2>\n<p>On one hand, I learned a lot of valuable skills in developing for iOS. On the other hand, I learned that coming home from a hackathon with new skills is a prize all in itself.</p>\n<h2>What's next for Cookie Chaos</h2>\n<p>I am interested in continuing to develop Cookie Chaos to make it a more beautiful, fun, and professional gaming application. I am also looking into getting a membership to Apple's Developer Program, so that one day, I might be able to add Cookie Chaos to the App Store.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/xcode\">xcode</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/sprite-kit\">sprite-kit</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/swift\">swift</a></span></li></ul>\n</div>\n</div>", [""]], ["Weather Wizards", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Weather Wizards \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/577/datas/gallery.jpg\"/>\n<p>\n<i>Landscape</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Weather Wizards \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/578/datas/gallery.jpg\"/>\n<p>\n<i>Beautiful Diverse Areas</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Weather Wizards \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/579/datas/gallery.jpg\"/>\n<p>\n<i>Fog , Hurricanes, and Tornadoes , Weather Wizard has it all!!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>This was my first time using an Oculus Rift and what better thing to do then weather!!</p>\n<h2>What it does</h2>\n<p>At first my plan was to build a multiplayer dueling arena based on summonable weather but unfortunately these plans did not work in the time allowed. Think of the current game as a practice and prime up for the more challenging game.</p>\n<h2>How I built it</h2>\n<p>I researched a lot of fine details about weather and had to convert all the information I gathered into something that I could program.</p>\n<h2>Challenges I ran into</h2>\n<p>Setting up a multiplayer server was challenging. I initially tried to set up a LAN server but it did not work with the guest WiFi. Therefore I had to settle for a intro single player game.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>A realistic weather system with intuitive controls. C for Cold, H for Hot, point click press enter and let go.</p>\n<h2>What I learned</h2>\n<p>Lots of Oculus Rift and VR</p>\n<h2>What's next for Weather Wizards</h2>\n<p>Multiplayer support!!\nFeel Free to come try it out with the rift at my table!</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li><li><span class=\"cp-tag\">unit</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unity\">unity</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag\">science</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://www.dropbox.com/s/iro10wbvt646b9h/Game.zip?dl=0\" rel=\"nofollow\" target=\"_blank\" title=\"https://www.dropbox.com/s/iro10wbvt646b9h/Game.zip?dl=0\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.dropbox.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Gravity Fed Water Fountain", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Gravity Fed Water Fountain \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/615/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>It started when I ran across a water fountain that was about to be thrown away. The rest is history.</p>\n</div>\n</div>", [""]], ["BreadBoardWizard", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"BreadBoardWizard \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/632/datas/gallery.jpg\"/>\n<p>\n<i>This is a picture of our working product</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Like some of the best ideas, the inspiration for our project came straight out of the blue, and then got refined into something almost unrecognizable. Beginning as a simple teaching tool, our program was conceived as the breadboard equivalent of a type-to-learn program, guiding users through a few simple circuit designs, and using an Arduino Uno to relay their designs to the computer. From there, it grew into its current form.</p>\n<h2>What it does</h2>\n<p>As it stands now, our project is a game in which the player must construct their own weapons on the breadboard. Although it still keeps to its original purpose of educating those who play it, it now features a significant improvement in gameplay over our original project, allowing users the satisfaction of defeating enemies with a weapon they learned how to wire up themselves on the breadboard.</p>\n<h2>How we built it</h2>\n<p>Ultimately, our process was a lot of trial and a whole lot of error. None of us came into this as even Arduino proficient, and we spent a lot of time trying, failing, and consulting with more experienced hackers in order to get to where we needed to be. But by learning as we built the project, we gained valuable experience in regards to how a beginner would approach the same problem we were designing for them. In the end, though, other hackers were what really saved us, offering advice and help when we were too sleep deprived or confused to power through.</p>\n<h2>Challenges we ran into</h2>\n<p>The most difficult part of this project was, by far, getting the Arduino software to interface properly with our program in Java. It was a many hour problem that even Sensei Google couldn't solve for us, and despite trying every library under the sun, we couldn't find any way to communicate with our device. But with perseverance, energy drinks, and the crowdsourced power of an entire hackathon, we were eventually able to solve our problem. F- for documentation, A+ for crowd sourcing and creativity.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>By powering through the night we were able to make up for the time we lost to our monster serial communications bug, and despite encroaching organ failure from over-consumption of energy drinks and small snack items, we made the final edits to our code just in time to make the deadline. Hard work pays off.</p>\n<h2>What we learned</h2>\n<p>Ultimately, the biggest lesson learned is to never trust a library that is more than a year out of date. But beyond that, we learned that if we put our minds to it, we can do incredible things in just 36 hours. We learned more than we have in a semester of classes, and I think each of us would do it again in a heartbeat. This experience certainly opened my up to a bunch of new fields, and new people.</p>\n<h2>What's next for BreadBoardWizard</h2>\n<p>Hopefully, we'll be able to spend a little time polishing our game now that the time rush is over. And who knows? The custom breadboard-based control system may well inspire a future project of ours. I know that I'll never forget our hacked together, wonderful little project.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/MssrTimeyWimey/BreadBoardWizard\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/MssrTimeyWimey/BreadBoardWizard\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I did a lot of our initial back end coding, and spent several hours fighting serial port errors. Arduino was entirely new to me, and it was a challenge becoming proficient in time to make a big contribution, but I really learned a lot. This was very rewarding.", "Last minute coding help"]], ["5KGL", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"5KGL \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/635/datas/gallery.jpg\"/>\n<p>\n<i>classic color square demo</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>I wanted to work on this</p>\n<h2>What it does</h2>\n<h2>How I built it</h2>\n<h2>Challenges I ran into</h2>\n<h2>Accomplishments that I'm proud of</h2>\n<h2>What I learned</h2>\n<h2>What's next for 5KGL</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">c-and-glfw</span></li></ul>\n</div>\n</div>", [""]], ["Beholder", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Beholder \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/610/datas/gallery.jpg\"/>\n<p>\n<i>Early stage construction</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Beholder \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/638/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Beholder \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/663/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Our idea for a sonar-based hack came from disassembling different hardware that we happened to have on hand and figuring out how it could be used. Initially we planned to build a belt for the blind, and  people who look at their phone while walking, to warn of potential collisions. After discovering what would be available at the Hackathon, we re-purposed our hack to be for those wearing an Oculus Rift. </p>\n<h2>What it does</h2>\n<p>The sonar sends an analog signal of varying voltage in indicate the distance the sound wave traveled after adjusting for temperature. Then the Arduino calculates the velocity of the nearest object relative to the wearer by comparing the difference in distance with the previous readings and if the object is too close or if the object would hit the wearer under an adjustable time frame a signal is sent to a speaker which emits a frequency based on the distance of the obstacle.</p>\n<h2>How we built it</h2>\n<p>We first tested our major components using a breadboard.  Then, after fully attaching the various components we wrote the code to convert the data the sonar gave to evaluate velocity and distance of potential obstacles. The enclosure was made of wood, designed in Solidworks and engraved and cut to leave room for the sonar to operate properly while keeping it compact. </p>\n<h2>Challenges we ran into</h2>\n<p>Without any prior experience in circuits, Arduinos, sonars, or laser cutting, we learned many new things during our first hackathon. We were also missing critical components on the first day due to delayed shipping we had to improvise by writing psuedocode.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>As a group of freshman, we accomplished a lot more than we expected from our first hackathon.  We're proud of the fact that we managed to get everything that we planned to implement working by the end of the hackathon despite having little to no previous experience with the physical side of EECS. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag\">sonar</span></li><li><span class=\"cp-tag\">speaker</span></li><li><span class=\"cp-tag\">vibrating-motor</span></li><li><span class=\"cp-tag\">solidworks</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li></ul>\n</div>\n</div>", ["", "", "", ""]], ["d\u014ds Medicine Dispenser", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/V1QPJmWfZaA?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"d\u014ds Medicine Dispenser \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/644/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"d\u014ds Medicine Dispenser \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/605/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"d\u014ds Medicine Dispenser \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/602/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"d\u014ds Medicine Dispenser \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/603/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"d\u014ds Medicine Dispenser \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/604/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We all know about the situation (war zone) in most peoples' medicine cabinets: prescriptions and OTC drugs clogging the shelves, with peeling labels, lost caps, and long-past expiration dates. Even worse, medications can be accessed by anyone, anytime. In households with kids or elder family members, these can cause serious safety risks. We thought that there had to be a better way to manage, store, and secure medications for families. Enter the d\u014ds. </p>\n<h2>What it does</h2>\n<p>The d\u014ds is a simple to build, easy to use storage center for a families medications. Anyone can easily add medications to storage bays within the device, and enter the number of pills, dosage, and prescribees to the system's interface. From there on out, anyone in the family who is allowed access to a medication can go get their correct dose any time, as long as they haven't taken the same medication too recently. A mom can limit their children' access to Motrin and Tylenol, in the doses that correspond to their ages and weights. Older patients can add their medications and enjoy a hassle-fee, arthritis-free usage experience that also keeps them safe by ensuring they don't accidentally forget and take a second dose. </p>\n<p>We also simplified the medication storage process: never run low on a crucial medication again! With inventory-management and reminders, you'll know exactly when to run to Walgreens (way before you get sick and need it). </p>\n<h2>How we built it</h2>\n<p>We used 3D printing and laser cutting for fabrication of our demonstration device. A stepper motor actuates the medicine-selector, and a servo serves as the dosing controller. A touchscreen Raspberry Pi is the input device, and runs a simplified Kivy GUI that allows you to switch users, move between medications, and receive a dose. All mechanical elements are controlled from an Arduino Uno R3 receiving serial commands from the Pi. 3D printed, food safe PLA canisters were used for medicine storage. Plywood and acrylic form the basis of the structural components. A full parts list can be found on the github. </p>\n<h2>Challenges we ran into</h2>\n<p>Several challanges that me and Andrew faced is getting around two struggling servo motors that took us quite a bit of our time during the hack to debug and fix. Our goal was to use the servos as refilling and dispensing mechanisms for our medicine dispenser. However, after several testing phases and several hours of servo motors either not functioning properly and giving bad responses to the main Arduino board, we came to the conclusion that one of the servos were completely faulty. This was true, and it allowed us to move on with our project, up until we ran into issues with our other well functioning servo. With our project's goal already strained, the other servo ended up frying as well due to overvolting from a bad power supply. Much to our luck, we had a larger spare servo on hand, but did some work so we could manage to fit it in our build. </p>\n<p>Besides that, we also wrote our program in a language neither of us have ever written in, and that was quite an exciting challenge as well. Despite some battles with Raspbian Distros, we were able to implement the Kivy GUI package. Through some careful debugging, we fixed some of the mistakes made when moving to a new language, resulting in a relatively robust and diverse software package. </p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are especially proud of the ease-of-use and user experience. Adding and dosing medications is fast and easy. We are also proud of the robustness of the design, and the appearance of the final prototype. Considering that this is both of ours' first Hackathon, as well as first times working with Python, we are especially happy to have a working demo completed within the challenge period.</p>\n<h2>What we learned</h2>\n<p><em>Hardware:</em>\nServos are just the worst, and nice ones should be bought whenever possible. That aside, we learned to value attention to detail, even at early prototype stages. The fact that we spent the extra few minutes making a part right in testing saved that time during final production. From a manufacturing standpoint, neither of us had used laser cutters before, and gaining that skill was incredibly useful in expediting our prototyping process. </p>\n<p><em>Software:</em>\nOn the software end, we used a language that neither of us have ever written on before, Python. There were several reasons towards this, due to poor support from Arduinos for languages that we have written before. Within 15 hours, we managed to get a better grasp of the new language we have come across, including the many other ways of how some languages manage their limitations. For instance, there were several different ways that Python handles packages, and how some packages came to good use to support our system. In the end, it came through quite well, and we've programmed a system that should be as user friendly as possible.</p>\n<h2>What's next for d\u014ds Medicine Dispenser</h2>\n<p>We need to build a more robust and secure user-changing system, so that the device serves its secondary purpose as an access-control device beyond the current recording system. Also in soft\nAdditionally, the plan had included a remote app implementing the user-management and addition system built in Python, but not present on the d\u014ds. Having the ability to add medications and users (as well as receive push-notifications) would greatly increase the utility of the device. Finally, building the entire device from inert, food-grade materials would make it much safer and home-friendly. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/3dprinting\">3dprinting</a></span></li><li><span class=\"cp-tag\">lasercutting</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c\">c</a></span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://github.com/apd47/dosDispenser\" rel=\"nofollow\" target=\"_blank\" title=\"https://github.com/apd47/dosDispenser\">\n<i class=\"ss-icon ss-link\"></i>\n<span>github.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", ["I designed and built the mechanical components and the Arduino codebase for drive control. ", "Worked on almost the entire python codebase and the main user interface. Spent 30+ hours learning a new language during the entire hack while ensuring that the system worked smoothly and feature packed."]], ["Prince Of Darkness' Little Friend", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/N4ptALA_s8M?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Prince Of Darkness' Little Friend \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/346/657/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>I'm restoring a vintage sports car with british, positive ground electrics. \nI reverse engineered the original mechanical generator voltage regulator, and created a new one with digital electronics. It has a lower power draw and is more reliable. It is fully adjustable to suit the user's needs, inexpensive, and serviceable. \nI intend to use this for myself, and also release it publicly for those that want to build one, and may create a circuit board, kit, or assembled versions to use and sell. </p>\n<p>presentation\n<a href=\"https://drive.google.com/file/d/0B09pdugLdaHKZ1Y5Tnd6QmJTaVE/view?usp=sharing\" rel=\"nofollow\">https://drive.google.com/file/d/0B09pdugLdaHKZ1Y5Tnd6QmJTaVE/view?usp=sharing</a></p>\n<p>video:\n<a href=\"https://drive.google.com/file/d/0B09pdugLdaHKM3VMeGVGWldBVDQ/view?usp=sharing\" rel=\"nofollow\">https://drive.google.com/file/d/0B09pdugLdaHKM3VMeGVGWldBVDQ/view?usp=sharing</a></p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">a-comparator</span></li><li><span class=\"cp-tag\">some-relays</span></li><li><span class=\"cp-tag\">a-plastic-box</span></li><li><span class=\"cp-tag\">lots-of-ingenuity</span></li></ul>\n</div>\n</div>", [""]], ["wheredontiwantmymoneytogo.com", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Thinking about technology applications to politics. Making politics easier to digest for citizens.</p>\n<h2>What it does</h2>\n<p>Displays map with borders of states.</p>\n<h2>How I built it</h2>\n<p>took data from Death Penalty Information Center and made it usable in json format to be put in as layer using leaflet.js.</p>\n<h2>Challenges I ran into</h2>\n<p>processing the data to be used easily.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>getting a coherent json out.</p>\n<h2>What I learned</h2>\n<h2>What's next for wheredontiwantmymoneytogo.com</h2>\n<p>finish adding to map and add police brutality data, and possibly wage issues as well. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/leaflet-js\">leaflet.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/ajax\">ajax</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li></ul>\n</div>\n</div>", [""]]]