[["InstantNotifier", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/9iZz9fPdbrk?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n</ul> </div>\n<div>\n<h2>CREATED BY NEEL BHALLA, BRANDON LI, AND ASHWIN PADAKI</h2>\n<h2>Inspiration:</h2>\n<p>I have seen that due to the introduction of technology such as SMS, social media, calling, and other platforms where people can collaborate we have been glued to our screens.  People even tend to point it out for games such Pokemon-go which has gotten so bad for the community that you can find that people are walking into random places such as cliffs and trees trying to catch pok\u00e9mon!  For social media, we find that the thirty minute homework turns out to be three hours when your social media gets between you and your homework.  Its not that there is something to look at, it is the fear that you don't want to miss a post that makes you keep checking for updates on your feed when there really isn't.  </p>\n<h2>What it does</h2>\n<p>The twitter-social-media notification can take your fear and relieve it by doing exactly what you do! It will scan the twitter feeds for the tags that you provide and wont disturb you unless something shows up.  After letting you see a glimpse of the post on the lcd display, you can decide to like it or even re-tweet it in order to see it some other time such as after you finish your homework.</p>\n<h2>How I built it</h2>\n<p>Brandon, Ashwin, and I used our raspberry pi and breadboards to build the system.  There are three main parts: The buzzer, the LED, and the LCD.  </p>\n<h1>The Buzzer</h1>\n<p>The buzzer circuit consists of an LM358 op-amp powering a relaxation oscillator whose frequency can be set via two potentiometers. The output goes to a piezo buzzer and its volume can be set by another potentiometer. The oscillator generates a square wave with variable frequency. Due to the low clock speed of the raspberry pi, we could not use PWM (Pulse Width Modulation) to implement the notification system.</p>\n<h1>The LCD</h1>\n<p>The LCD is a display that can hold text on a grid with a size of 16x2 characters. Any ASCII character can be represented on the display, and many unicode characters can be represented as well. A potentiometer controls the contrast of the screen.</p>\n<h1>The LED</h1>\n<p>This circuit consists of transistors that control the buzzing and an LED that flashes when you get a twitter notification. </p>\n<h1>The code:</h1>\n<p>the code consists of three parts.  Due to the object orient programming aspect of Python, we could test module each by itself in order to prevent bugs for occurring except from the integration.  The main code uses tweepy(API), a python 2.7 package in order to track and stream posts that are public.  A callback function is called which notifies the person.  The buzzer.py uses oscillator and led to display the notification.  The last part is the LCD display.  We have some code from a fellow developer who posted it on github.   This allows us to use standard wiring and have an api to clear and set text to the screen.  Using all of this, we must create a separate thread in order to ensure shutdown upon button press as the code tends to stall unless there is an actual post where the callback function would be used.  Another cool feature we have is the timed button press which allows you to choose between retweet and repost by pressing either less than 1.2s or more(retweet is greater than 1.2, like is less than)</p>\n<h2>Challenges I ran into</h2>\n<p>Working with asynchronous tasks and trying to avoid errors due to APIs and other dependencies can be tough when you are not as familiar as you would like to be.  We found that twitter had accidentally revoked our privileges at one point due our excessive liking of posts.  Hardware errors were also a pain since debugging things without a multi meter is as hard as hitting an target in the dark.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>I'm proud of making my first project with my classmates whom i have only talked to about technology and have yet to collaborate.  We are proud of the final product and how many extra features we were able to add in before the idea which we had from the start.</p>\n<h2>What I learned</h2>\n<h2>What's next for InstantNotifier</h2>\n<p>Due to a lack of time, we were unable to add Instagram and Facebook notifications.  In a couple more revisions we will definitely have most of the popular networks searched for you, so then that homework that takes 30 minutes by the teachers clock, 3 hours by your clock, and 10 minutes by your parents clock, might even be done in 5.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag\">tweepy</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/raspberry-pi\">raspberry-pi</a></span></li><li><span class=\"cp-tag\">piezzo-buzzers</span></li><li><span class=\"cp-tag\">transistors</span></li><li><span class=\"cp-tag\">lcd</span></li><li><span class=\"cp-tag\">internet-of-things</span></li><li><span class=\"cp-tag\">asyncio</span></li><li><span class=\"cp-tag\">irvick-github</span></li></ul>\n</div>\n</div>", [""]], ["MetronoMe", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"MetronoMe \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/566/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>When we wanted to play pieces that had complex meter changes/rhythms, traditional metronomes became useless because they could not change as the meter changed. Thus, we wanted to create a metronome to solve this problem.</p>\n<h2>What it does</h2>\n<p>The user can preprogram the metronome to accommodate meter, tempo, and rhythmic changes.</p>\n<h2>How we built it</h2>\n<p>We used Android Studio and Github.</p>\n<h2>What's next for SubDivide</h2>\n<p>Improve the UI to look more pretty :D.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android-studio\">android-studio</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/github\">github</a></span></li></ul>\n</div>\n</div>", ["", ""]], ["The Writing Robot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Robotics is seen by many as a very plain and boring activity, but robotics can be creative and artistic as well. That is why we decided to create a robot that can write and draw. We were trying to decide the best way to show this, and ended with the conclusion that bigger is better, so we had the robot write through movement.</p>\n<h2>What it does</h2>\n<p>It writes by driving in the shape of letters. It spells out \"LEXHACK\". However, we can change the code to write, or draw anything that our creativity can bring to it. </p>\n<h2>How I built it</h2>\n<p>First, the hardwares were brought in by Ben. Then, we wrote instructions for the robot, in form of code, to have it write out letters through it's movement. To capture and present this in a decent way, we took a long exposure picture of it.</p>\n<h2>Challenges I ran into</h2>\n<p>There were many challenges we ran into. The wheel didn't had much traction causing the robot to slide and drift, which made the turning sharply very hard. Adding to the list, the battery life affected the calculation, and therefore had to change the calculation according to the voltage the battery had at the time. \n. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>We were able to write letters and words with the robot's movements.</p>\n<h2>What I learned</h2>\n<p>We learned how to program with the Arduino. We also learned how to effectively work as a team. </p>\n<h2>What's next for Robot writer</h2>\n<p>We want to push it's limits by writing code that will allow it to have some kind of an input- starting off with entering words and moving to having it draw sketches by scanning and parsing images.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">a-robot-kit-assembled-over-the-summer</span></li><li><span class=\"cp-tag\">programming-in-arduino</span></li></ul>\n</div>\n</div>", [""]], ["Survive LHS Game", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Survive LHS Game \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/596/datas/gallery.jpg\"/>\n<p>\n<i>game over screen</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Survive LHS Game \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/603/datas/gallery.jpg\"/>\n<p>\n<i>game screen</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Survive LHS Game \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/607/datas/gallery.jpg\"/>\n<p>\n<i>shooting</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>This was our first time creating a video game or using a graphics user interface, so we wanted to created a game with very basic mechanics. We distorted a standard spaceship shooting game by adding real images of ourselves and LHS. </p>\n<p>You shoot stars from a larger star to defeat the students trying to enter the school. They get faster and faster as the levels get higher.</p>\n<p>We built it using Java swing and photoshop, featuring some tutorials for using the graphics user interface.</p>\n<p>We have never used a graphics interface before, so we had a lot of trouble trying to understand what areas of the code we could edit to fit our game, such as adding levels, importing images, adding a timer, and many other key aspects of a game. </p>\n<p>We are especially proud of the simple reactive animation we added with the star changing color when firing a missile. We are also proud of making the students bounce off the edges of the window. </p>\n<p>We learned a lot about animating objects, java swing, and creating multi-class projects.</p>\n<p>Next, we hope to have animate walk cycles for the students and create a more diverse game experience. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n</div>", [""]], ["Digital Spectroscope", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Digital Spectroscope \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/554/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Introduction We've been doing a bunch of spectroscopy in science class, and we've had to do it all by hand, so we've realized how hard it is to do a good job of recording by hand and eyeballing it, so we've made the process (slightly) less painful. Also harambe</h2>\n<h2>What it does It can correctly display an accurate spectrograph for six different elements, with possible future support for more elements.</h2>\n<h2>How I built it We built it using Processing and dank memes</h2>\n<h2>Challenges I ran into We ran into some issues when we started running low on dank memes, therefore causing our work speed to slow to a crawl.</h2>\n<h2>Accomplishments that I'm proud of We actually didn't screw up too much, and were able to have some fun doing it!</h2>\n<h2>What I learned Dank memes melt steel beams. Burritos are also pretty good. Jokes aside, we learned how to combat the various issues that occurred when we inevitably forgot a bunch of punctuation.</h2>\n<h2>What's next for Digital Spectroscope We will probably add more elements, or something like that. We also might program it to function in reverse as well. But we would really like to program it to bring Harambe back to life</h2>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n</div>", [""]], ["SkiWeb", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>The inconvenience of visiting several websites and going through multiple pages to find the optimal mountain conditions and trail types. Also, we wanted to experiment with several different assets at our disposal that we had not used before such as nodejs and jquery.</p>\n<h2>What it does</h2>\n<p>It summarizes the conditions, weather, and trails/lifts in real time, whilst giving you an immersive online experience complete with pictures and links to the website for buyer friendliness.</p>\n<h2>How I built it</h2>\n<p>We initially started with a raw css, js, and html webpage using materialize css. Then we used web scrapers to sift through the large amounts of data on the ski websites and find real time weather and snow depth reports. Also we used a DreamHost hosting service to post our website online. Our dedication was so full that we actually spent a dollar on the domain.</p>\n<h2>Challenges I ran into</h2>\n<p>Web scraping is really really challenging. And also the responsiveness across screen sizes is also not optimal so we had to partially manually adjust it.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>The fact that we finished it on time and that it is such a simple and promising and useful site makes us very proud.</p>\n<h2>What I learned</h2>\n<p>I learned all sorts of new assets for future projects (such as coding languages and hosting sites) we also learned that we cannot make infinite power loops.</p>\n<h2>What's next for SkiWeb</h2>\n<p>Making another great and innovative project that will be of use to the masses. Such as expanding our current service to include more mountains and promoting higher-level web scraping techniques.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/github\">github</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/open-weather-map\">open-weather-map</a></span></li><li><span class=\"cp-tag\">api</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://www.skiweb.tech\" rel=\"nofollow\" target=\"_blank\" title=\"http://www.skiweb.tech\">\n<i class=\"ss-icon ss-link\"></i>\n<span>www.skiweb.tech</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["Geometree Defense", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Geometree Defense \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/557/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Geometree Defense \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/558/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Geometree Defense \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/559/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Geometree Defense \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/560/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Geometree Defense \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/561/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We were discussing about what our project would be, and all of us quickly came to the agreement that making a game would be the most enjoyable for us. Since we all had enjoyed tower defense games when we were younger, we decided to make our own, and see what we could accomplish.</p>\n<h2>What it does</h2>\n<p>It is a tower defense game involving simple geometry shapes. There are two different types of towers, lasers and cannons, which have different costs and damage potential to allow for more strategy.</p>\n<h2>How we built it</h2>\n<p>The one language that we collectively all knew the best was Java. We used Processing to create visual graphics and game play.</p>\n<h2>Challenges we ran into</h2>\n<p>We ran into many syntax errors, and there were also little bugs that we had to constantly fix. Because we formulated our plans in pseudo-code before executing, the execution did not prove to be a big challenge. However, there were many unintended nuances of the code that we had to fix.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We learned a lot of Java and Processing syntax, and we are very proud to have created a working tower defense game that we all could enjoy playing.</p>\n<h2>What we learned</h2>\n<p>We learned more Java, Processing, and using coordinates of objects to manipulate animations and game play.</p>\n<h2>What's next for Geometree Defense</h2>\n<p>If we had more time, we would definitely have added more towers and different types of \"minions\". We would introduce mechanics such as area-of-effect damage, and improve our animations. Looking even further ahead, we would have even made a sequel.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/processing\">processing</a></span></li></ul>\n</div>\n</div>", ["", "", ""]], ["The Power Plant", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"The Power Plant \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/580/datas/gallery.jpg\"/>\n<p>\n<i>View of entire system</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Power Plant \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/581/datas/gallery.jpg\"/>\n<p>\n<i>View of flower.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Power Plant \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/582/datas/gallery.jpg\"/>\n<p>\n<i>Our code for the system.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Power Plant \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/583/datas/gallery.jpg\"/>\n<p>\n<i>View of basil.</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"The Power Plant \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/584/datas/gallery.jpg\"/>\n<p>\n<i>Our electronics.</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We made this project to develop a system to simplify helping the environment: while keeping and taking care of plants can be a great idea, it can be difficult to tell when one is over or under watering a plant. This system automates this process to ensure that plants are never over watered, under watered, or not watered at all.</p>\n<h2>What it does</h2>\n<p>This system detects the amount of moisture in the soil of and delivers water to two separate plants. When the soil moisture detector detects that the plant needs more water (the amount can be set based on the water needs of the plant itself). The water can be refilled via the two-Liter soda bottle, which contains a solenoid-controlled valve which releases water into the tube so it can flow towards the soil.</p>\n<h2>How we built it</h2>\n<p>This system required a physical setup with cut wood and cut soda bottles (after all, this project is environmentally focused). These soda bottles had valves and solenoids connected so that we could control the flow of water: at the end, we had vinyl tubing to reach the plant without spilling.\nElectronically, we used two solenoids, a Sparkfun Inventor's Kit, two soil moisture sensors, and a 9 Volt adapter. \nWe programmed this system in the Arduino IDE and C. </p>\n<h2>Challenges we ran into</h2>\n<p>We dealt with several challenges. For most of the day, we had hoped to also develop an Android app to interface with our physical device. We even went as far as to design pages in App Inventor in the morning, but we were unable to get the Arduino to communicate with the app. We started with a wifi shield, but we wasted a lot of time trying to locate header pins. We then tried to use a Bluetooth receiver, but we were unsuccessful overall. Another problem we had involved powering a 12 V motor over a 5 V Arduino board. We found a solution, but then a plug on the long chain of power strips leading to the outlet unplugged, and we assumed it was a mistake on our part and wasted several hours trying to find another method. </p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We're proud of having a polished product by the end of this Hackathon. We all had relatively limited electronics knowledge, so it was definitely a journey, but it was very rewarding. Honestly, this product is complete in and of itself: it waters plants based on the soil's moisture and requires no activation, maintenance, or attention from the user.</p>\n<h2>What we learned</h2>\n<p>We learned a lot about Arduino and electronics through this project: we had to connect many sensors and motors, and we had very little prior knowledge and experience. The most important lesson, however, was that things often do not go as planned: from losing several hours due to an unplugged power strip to having to give up on a relatively developed app, much of our work felt like it went to waste. </p>\n<h2>What's next for Self-Watering Garden</h2>\n<p>To continue this project, we'd probably try to implement either WiFi or Bluetooth connectivity. Then, we could interface with the Android app and make features more customizable.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">sparkfun-inventor's-kit</span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--3\">c++</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li></ul>\n</div>\n</div>", [""]], ["Hangman", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to make minesweeper, but that was boring and so we decided to make hangman instead.</p>\n<h2>What it does</h2>\n<p>It simply simulates a game of hangman</p>\n<h2>How we built it</h2>\n<p>We used python.</p>\n<h2>Challenges we ran into</h2>\n<p>Basically every part of the code.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>It actually works.</p>\n<h2>What we learned</h2>\n<p>How to use lists and functions in python.</p>\n<h2>What's next for Hangman</h2>\n<p>Using better graphics</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li></ul>\n</div>\n</div>", [""]], ["GMaze", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"GMaze \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/570/datas/gallery.jpg\"/>\n<p>\n<i>Playing the maze pt 2</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"GMaze \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/571/datas/gallery.jpg\"/>\n<p>\n<i>Creating the maze</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"GMaze \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/572/datas/gallery.jpg\"/>\n<p>\n<i>Playing the maze</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"GMaze \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/597/datas/gallery.jpg\"/>\n<p>\n<i>Some code</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"GMaze \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/606/datas/gallery.jpg\"/>\n<p>\n<i>With the code, project, and programmers - Cooper</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>The inspiration of this game came from some fun puzzle games we played like Portal2 and Talos Principle. We thought puzzle games were cool so we decided to make a puzzle game. Something that we thought could make games like Portal 2 better is a competitive aspect. We thought it would be cool to make something multiplayer where you fight each other instead of working together like in Co Op portal for example. </p>\n<h2>What it does</h2>\n<p>It is a 2 player game where you design a maze for your opponent to solve and vice versa. Whoever solves each others maze first wins. What makes this game cool is that it involves 2 aspects - designing a hard maze and solving your opponents maze quickly. Unfortunately since we could not set up a server for multiplayer (because we're at a hackathon), this is more of a \"proof of concept game\". You solve the mazes by using gravity. You can only move in one direction until you hit a block or \"fall\" (die) off the edge of the screen. To make sure that a player cannot make an impossible maze, you must win your maze for your opponent to play it. </p>\n<h2>How we built it</h2>\n<p>We built this using a IDE Netbeans with JavaFX.</p>\n<h2>Challenges we ran into</h2>\n<p>We ran into many challenges, most of them being simple bugs that kept messing our program up. The hardest part was solving using 2 players at the same time. This took a lot of work and all 4 of us to keep on this problem until it was solved.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are extremely proud of the hard work we put in. This project is over 3 thousand lines of code which took a lot of concentrated energy to complete. The sheer size of this program is incredible and doing multiplayer was extremely taxing and infuriating, but also extremely rewarding in the end. We are especially amazed that this was managed to be pulled off as coming up with the idea and programming 3000+ lines in a day was really  difficult to pull off.</p>\n<h2>What we learned</h2>\n<p>We learned a lot about java FX which most of us agree is better than Swing. This was also a great learning experience in Java for us all because we all now know a lot more about Java.</p>\n<h2>What's next for GMaze</h2>\n<p>The next step for Gmaze is to add being able to play online (you can't set up a server at a hackathon), better graphics/cleaning the ui up a little bit, and sound effects. We could also improve on our extremely limited single player mode (although the game was meant to be multiplayer). We also at sometime would like to </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/netbeans\">netbeans</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n</div>", [""]], ["Khelo", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>My brother is a creative young engineer, and as a 6 year old, the best way to output his creativity is through his revered LEGO blocks. But he doesn't have too many of them - they're expensive and get lost easily. Everytime he wants to build a new project, he has to tear down the old one. What if he didn't have to go through all that trouble? What if he never had to step on a stray LEGO ever again? The experience and education is what matters, which is where Khelo comes in. \nKhelo means \"play\" in Hindi. </p>\n<h2>What it does</h2>\n<p>Khelo is a Unity built game designed to provide the LEGO building experience in a virtualized environment. The reason it is built in Unity is because the desktop application can easily be ported into Virtual Reality and Augmented Reality headsets to give a more immersive experience previously unavailable. Users can place blocks of different colors and types all across a wide building field. Users can also delete objects and support certain blocks in ways impossible in real life LEGOs, creating unique structures. \nIn the upcoming HoloLens and VR models, the user can anchor their creation to a single point in the world and walk around the object as if it was really part of their universe. The user would be able to pick from a shelf of unlimited pieces to construct buildings, vehicles and creations unmatched by the current physical system. </p>\n<h2>How I built it</h2>\n<p>I used Unity's excellent C#  game engine to construct the application. Each block is an actor that responds to block directors, allowing users to use blocks of different types, such as 1x1, 2x1 and 2x2 bricks. Each block has can place exactly one brick above it, keeping the game bounded to reality. </p>\n<p>The saving/loading feature is built upon XML serialization. After creating a singleton XML manager, the user can save all the Khelo blocks into a XML file stored on their hard drive. This XML file is easily editable and very lightweight - each file is only a couple of kilobytes. This means the files can be saved in the cloud in the future. In fact, eventually users will be able to work on the same model through two different devices. </p>\n<h2>Challenges I ran into</h2>\n<p>The number one challenge I ran into proved to be the most rewarding experience. Saving files onto the user's computer in Unity isn't an easy task and requires system modification. I spent nearly 3 hours working on different serialization methods and eventually ran into XML serialization. Though it wasn't incredibly easy to implement, it proved immensely useful because of its lightweight nature and easy of readability. </p>\n<p>Placing was surprisingly challenging. Because the blocks are different sizes, they have to respond differently. Because there will be hundreds of blocks in the final version, I couldn't create a robust system for each individual block. I spent around 1.5 hours on placing, eventually perfecting a flexible system that applies to any brick, tile or plate. </p>\n<p>Performance was a major issue in the beginning. There were so many blocks that each had their own lighting conditions that lagged my computer so much, the game ran at ~11 FPS. I spent approximately an hour browsing through different profilers and methods to optimize the game, eventually running at a stunning ~50 FPS in full screen. There are more methods to improve the performance that I will be exploring. </p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>The complex block actor/director system allowed me to let the user place blocks of multiple different types in a flexible format. I created the program to be flexible and allow any future type of block, including tiles and plates. By interacting with block actors, the program is flexible, but by incorporating block directors, the user can operate quickly and not waste time, making creation as fast online as in the real world. The placing system compliments the block actor/director system, adding more flexibility and potential to Khelo. </p>\n<p>I'm most proud of the compact system I built for Khelo. Every script was written as concisely as possible, with comments and shortcuts for maximum optimization. The total project was written in only 694 lines of code. </p>\n<h2>What I learned</h2>\n<p>I learned multiple methods of serialization, such as binary format, text files, and XML. I eventually settled on XML serialization for ease of human readability. </p>\n<p>I learned the different methods for code flexibility, and the importance of comments! With so many different classes and complex systems, writing comments for myself was a necessity. The actor/director system would have easily made me run in circles had I not written comments to describe the differences in interaction. </p>\n<h2>What's next for Khelo</h2>\n<p>The next step is to move Khelo beyond the desktop. The final vision for Khelo is for Microsoft HoloLens. As soon as I get home, I'll be porting the application to HoloLens and having my little brother create a variety of objects on his living room floor just like real LEGOs. </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/unity\">unity</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/c--2\">c#</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/xml\">xml</a></span></li></ul>\n</div>\n</div>", [""]], ["YouTube and Chill", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"YouTube and Chill \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/535/datas/gallery.jpg\"/>\n<p>\n<i>Logo</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We thought of the many social media sites that exist and mixed it with the \"Netflix and Chill\" the internet meme. Beyond that we wanted to create a site that uses data that will result in certain common interests and we wanted to create a site that helps people come together. </p>\n<h2>What it does</h2>\n<p>It connects people together who have similar interests in videos on Youtube by matching your favorite channels with other people's favorite channel.</p>\n<h2>How I built it</h2>\n<p>We divided up the work in the project with the back end and front end where two of us worked on the front end to setup how the website would look. We used javascript, jquery, node.js, html, and css to create a website with a connected api. </p>\n<h2>Challenges I ran into</h2>\n<p>We ran into many challenges. The first was trying to center the channel box. The other was trying to get the login page connected to the main page. The next was trying to get Materialize UI to work. The most challenging one was trying to connect the back end to the front end.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>We were able to use source code and a lot of our own code to develop a fairly good website and a very sophisticated back end api. </p>\n<h2>What I learned</h2>\n<p>We learned how hard it is to work with Materialize UI but how we were also able to overcome the obstacles to get things to work. We also learned about the struggles in connecting the back end api to the front end website.</p>\n<h2>What's next for Youtube and Chill</h2>\n<p>Youtube and Chill can become a global market that receives profit off of advertisement and pay per click ads that helps people around the world meet based on their viewing preferences.  </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/json\">json</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/jquery\">jquery</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/node-js\">node.js</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/linux\">linux</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/photoshop\">photoshop</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/youtube\">youtube</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css\">css</a></span></li><li><span class=\"cp-tag\">backend</span></li><li><span class=\"cp-tag\">frontend</span></li><li><span class=\"cp-tag\">.env</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"https://hyperdev.com/#!/project/sequoia-princess\" rel=\"nofollow\" target=\"_blank\" title=\"https://hyperdev.com/#!/project/sequoia-princess\">\n<i class=\"ss-icon ss-link\"></i>\n<span>hyperdev.com</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]], ["HAIL Software for Disabilities", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Technology is rapidly becoming a crucial part of everyday lifestyle, but not enough attention is focused on making it accessible to disabled members of society. We wanted to leverage the power of computing to ensure these individuals would not be left behind.</p>\n<h2>What it does</h2>\n<p>We made a set of two easy to use applications \u2013 a practical Gmail Interface and a fun Space wars game \u2013 and implemented camera mouse so that these applications could be used hands free (through visual recognition) by disabled individuals. The Gmail interface connects to the user's Google account, allowing them to read messages from their inbox and compose new emails which they can send to friends, family, and colleagues.  The Space wars game is a fun application we created for the user's entertainment, which allows them to control a spaceship, shoot a variety of lasers and homing missiles, and use a shield. It allows for local multiplayer so two players can play on one system, one using the camera mouse or keyboard, and the other using the keyboard.</p>\n<h2>How we built it</h2>\n<p>We built the HAIL Gmail interface (heirarchal adaptable interface layout) using HTML, Javascript, and CSS. We built the Space Wars game using Python. We paired these applications with an app called camera mouse.</p>\n<h2>Challenges we ran into</h2>\n<p>At first we had trouble with seamlessly integrated the Gmail API, but after some trial and error and looking through documentation we were able to figure it out.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are very proud to be supporting the disabled community and helping them be as active as anyone in society. As some of our own family members are disabled, this meant a lot to us.</p>\n<h2>What we learned</h2>\n<p>We learned a ton about Python, Javascript, and API integration.</p>\n<h2>What's next for HAIL Software for Disabilities</h2>\n<p>We hope to polish the application even more, and hopefully some day publish them so they can be used by others.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/python\">python</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/pygame\">pygame</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/html5\">html5</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/css3\">css3</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/javascript\">javascript</a></span></li></ul>\n</div>\n</div>", ["Helped clean up Python game", "Helped program HAIL gmail and cleaned up the backend.", "I programmed the HAIL Gmail interface. "]], ["Foosbot", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div>\n<h2>Inspiration</h2>\n<p>Playing Foosball is a two player game, but we wanted to find out whether or not you could do it alone. We were inspired by previous robot building experience and wanted to create a unique and interesting bot.</p>\n<h2>What it does</h2>\n<p>The robot uses arduinos to play Foosball by turning the sticks.  It uses a combination of java and arduinos and java</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/android\">android</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag\">neural-networks</span></li><li><span class=\"cp-tag\">computer-vision</span></li><li><span class=\"cp-tag\">artificial-intelligence</span></li></ul>\n</div>\n</div>", [""]], ["Ambidextrous Rhythms", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Ambidextrous Rhythms \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/563/datas/gallery.jpg\"/>\n<p>\n<i>Main gameplay!</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>We wanted to build a retro music-based game and one example that we all loved to play before was _ italics <em>Dance Dance Revolution</em> italics _. Our game was inspired by the similar concepts and involves a fire techno beat and lightning reflexes.</p>\n<h2>What it does</h2>\n<p>You must stay in sync with the both hands, pressing the WASD pad and Arrow keys in unison. Climb the scoreboards as you hit crazy ambidextrous combos while staying lit to the song.</p>\n<h2>How we built it</h2>\n<p>We built this game using Processing and Java.</p>\n<h2>Challenges we ran into</h2>\n<p>One challenge that we ran into was coming up with a good idea. The first half of the time we were given, we used to make another game that we ended up scrapping halfway through. However, we are glad that we decided on Ambidextrous Rhythms! The design is much more sleek and polished than our last game.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We are proud of the aesthetics and how the game concepts turned out. Given the short time we had to develop, this game exceeded our expectations by leaps and bounds.\nOverall, we are most proud of making Ambidextrous Rhythms work!</p>\n<h2>What we learned</h2>\n<p>We learned a lot about Processing and problem solving. Prior to going into this project, two of our members had very little experience using Processing, however, after experimenting and reading up on a lot of StackOverflow articles, we became all very proficient in Processing and contributed significantly.</p>\n<h2>What's next for Ambidextrous Rhythms</h2>\n<p>We are considering trying to turn it into a web app, and host it online for others to play. In addition, we have our sights on implementing new features such as a song selection widget and even more beautiful game effects.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/processing\">processing</a></span></li><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n</div>", ["", "", ""]], ["Platformer", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li>\n<div class=\"flex-video\">\n<iframe allowfullscreen=\"allowfullscreen\" allowscriptaccess=\"always\" class=\"video-embed\" frameborder=\"0\" height=\"375\" mode=\"transparent\" src=\"https://www.youtube.com/embed/YNrjpCW5GBI?enablejsapi=1&amp;hl=en_US&amp;rel=0&amp;start=&amp;version=3&amp;wmode=transparent\" type=\"text/html\" webkitallowfullscreen=\"true\" width=\"615\" wmode=\"transparent\"></iframe>\n</div>\n</li>\n<li class=\"text-center\">\n<img alt=\"Platformer \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/540/datas/gallery.jpg\"/>\n<p>\n<i>Home Screen</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Platformer \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/539/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Platformer \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/541/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Platformer \u2013 screenshot 4\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/542/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Platformer \u2013 screenshot 5\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/543/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>What Platformer is</h2>\n<p>Platformer is a Platformer I made. I call it \"Platformer\" because I don't know what else to call it. The levels aren't that hard but (I think) is funny.\nBy the way, the text guy isn't me.</p>\n<h2>What it does</h2>\n<p>Platformer is a game. You play it using the arrow keys. </p>\n<h2>How I built it</h2>\n<p>I have this platformer engine and I built off of it. (I <strong>MADE</strong> the platformer engine).</p>\n<h2>Challenges I ran into</h2>\n<p>Problems with image reading.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>This is the only platformer I made that reads image data.</p>\n<h2>What's next for Platformer</h2>\n<p>I need to fix bugs and add more levels.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li></ul>\n</div>\n</div>", ["Me\nME ME ME ME ME ME ME ME ME ME!!!!"]], ["Glide", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"Glide \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/537/datas/gallery.jpg\"/>\n<p>\n<i>Showing character</i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"Glide \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/538/datas/gallery.jpg\"/>\n<p>\n<i>Showing character and obstacles</i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Project to display text on lcd screen in instruction manual of redboard inventors kit</p>\n<h2>What it does</h2>\n<p>You dodge obstacles by pressing a button </p>\n<h2>How I built it</h2>\n<p>Based circuitry off instruction manual, programmed from scatch.</p>\n<h2>Challenges I ran into</h2>\n<p>A ton of both soft and hardware errors.</p>\n<h2>Accomplishments that I'm proud of</h2>\n<p>That it actually works somewhat</p>\n<h2>What I learned</h2>\n<p>Hardware is incredibly hard to mesh with software.</p>\n<h2>What's next for Glide</h2>\n<p>Bug fixes </p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/arduino\">arduino</a></span></li><li><span class=\"cp-tag\">redboard</span></li></ul>\n</div>\n</div>", [""]], ["D\u0321i\u0335s\u0489to\u0361r\u035et\u0336ed\u0489", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\" data-options=\"animation_speed:0;slide_number:false;timer:false\" data-orbit=\"true\">\n<li class=\"text-center\">\n<img alt=\"D\u0321i\u0335s\u0489to\u0361r\u035et\u0336ed\u0489 \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/526/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"D\u0321i\u0335s\u0489to\u0361r\u035et\u0336ed\u0489 \u2013 screenshot 2\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/524/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li> <li class=\"text-center\">\n<img alt=\"D\u0321i\u0335s\u0489to\u0361r\u035et\u0336ed\u0489 \u2013 screenshot 3\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/525/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<h2>Inspiration</h2>\n<p>Inspired by the theme, we built off and expanded into more depth. Though we may well have bitten off more than we could chew with the challenges ahead of us.</p>\n<h2>What it does</h2>\n<p>It's a sidescrolling platformer, with mechanics poised to center around the distortion of reality.</p>\n<h2>Challenges we ran into</h2>\n<p>There were many challenges, from unexpected distraction to major setbacks in code. We were most struck when working code began to fail for no notable reason, which took us hours to correct.</p>\n<h2>Accomplishments that we're proud of</h2>\n<p>We made a working physics engine, for our sidescroller which is a plus. However, I believe the most promising aspect is the wonderful style of art and its design, best credited to our chief artist Bryan.</p>\n<h2>What we learned</h2>\n<p>As a whole, we improved our skills on game dev. We also learned more about each other as a group, both our strengths and faults. And finally, and perhaps most importantly, we met with new groups of people and had a great time!</p>\n<h2>What's next for D\u0321i\u0335s\u0489to\u0361r\u035et\u0336ed\u0489</h2>\n<p>Who knows. The game remains lacking in its mechanics and story line, however, the strong base is enough to make it an item of much interest into our future projects.</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag recognized-tag\"><a href=\"https://devpost.com/software/built-with/java\">java</a></span></li><li><span class=\"cp-tag\">c9</span></li></ul>\n</div>\n</div>", ["", ""]], ["Project name", "<div class=\"large-9 columns\" id=\"app-details-left\">\n<div id=\"gallery\">\n<ul class=\"no-bullet\">\n<li class=\"text-center\">\n<img alt=\"Project name \u2013 screenshot 1\" class=\"software_photo_image image-replacement\" src=\"//challengepost-s3-challengepost.netdna-ssl.com/photos/production/software_photos/000/410/514/datas/gallery.jpg\"/>\n<p>\n<i></i>\n</p>\n</li>\n</ul> </div>\n<div>\n<p>Many things have happened</p>\n</div>\n<div class=\"\" id=\"built-with\">\n<h2>Built With</h2>\n<ul class=\"no-bullet inline-list\"><li><span class=\"cp-tag\">code</span></li></ul>\n</div>\n<nav class=\"app-links section\">\n<h2>Try it out</h2>\n<ul class=\"no-bullet\" data-role=\"software-urls\">\n<li><a href=\"http://lexhack.org/\" rel=\"nofollow\" target=\"_blank\" title=\"http://lexhack.org/\">\n<i class=\"ss-icon ss-link\"></i>\n<span>lexhack.org</span>\n</a></li>\n</ul>\n</nav>\n</div>", [""]]]